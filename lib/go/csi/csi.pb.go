// Code generated by protoc-gen-go. DO NOT EDIT.
// source: csi.proto

package csi

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BlockMetadataType int32

const (
	BlockMetadataType_UNKNOWN BlockMetadataType = 0
	// The FIXED_LENGTH value indicates that data ranges are
	// returned in fixed size blocks.
	BlockMetadataType_FIXED_LENGTH BlockMetadataType = 1
	// The VARIABLE_LENGTH value indicates that data ranges
	// are returned in potentially variable sized extents.
	BlockMetadataType_VARIABLE_LENGTH BlockMetadataType = 2
)

var BlockMetadataType_name = map[int32]string{
	0: "UNKNOWN",
	1: "FIXED_LENGTH",
	2: "VARIABLE_LENGTH",
}

var BlockMetadataType_value = map[string]int32{
	"UNKNOWN":         0,
	"FIXED_LENGTH":    1,
	"VARIABLE_LENGTH": 2,
}

func (x BlockMetadataType) String() string {
	return proto.EnumName(BlockMetadataType_name, int32(x))
}

func (BlockMetadataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{0}
}

type PluginCapability_Service_Type int32

const (
	PluginCapability_Service_UNKNOWN PluginCapability_Service_Type = 0
	// CONTROLLER_SERVICE indicates that the Plugin provides RPCs for
	// the ControllerService. Plugins SHOULD provide this capability.
	// In rare cases certain plugins MAY wish to omit the
	// ControllerService entirely from their implementation, but such
	// SHOULD NOT be the common case.
	// The presence of this capability determines whether the CO will
	// attempt to invoke the REQUIRED ControllerService RPCs, as well
	// as specific RPCs as indicated by ControllerGetCapabilities.
	PluginCapability_Service_CONTROLLER_SERVICE PluginCapability_Service_Type = 1
	// VOLUME_ACCESSIBILITY_CONSTRAINTS indicates that the volumes for
	// this plugin MAY NOT be equally accessible by all nodes in the
	// cluster. The CO MUST use the topology information returned by
	// CreateVolumeRequest along with the topology information
	// returned by NodeGetInfo to ensure that a given volume is
	// accessible from a given node when scheduling workloads.
	PluginCapability_Service_VOLUME_ACCESSIBILITY_CONSTRAINTS PluginCapability_Service_Type = 2
	// GROUP_CONTROLLER_SERVICE indicates that the Plugin provides
	// RPCs for operating on groups of volumes. Plugins MAY provide
	// this capability.
	// The presence of this capability determines whether the CO will
	// attempt to invoke the REQUIRED GroupController service RPCs, as
	// well as specific RPCs as indicated by
	// GroupControllerGetCapabilities.
	PluginCapability_Service_GROUP_CONTROLLER_SERVICE PluginCapability_Service_Type = 3
	// SNAPSHOT_METADATA_SERVICE indicates that the Plugin provides
	// RPCs to retrieve metadata on the allocated blocks of a single
	// snapshot, or the changed blocks between a pair of snapshots of
	// the same block volume.
	// The presence of this capability determines whether the CO will
	// attempt to invoke the OPTIONAL SnapshotMetadata service RPCs.
	PluginCapability_Service_SNAPSHOT_METADATA_SERVICE PluginCapability_Service_Type = 4
)

var PluginCapability_Service_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "CONTROLLER_SERVICE",
	2: "VOLUME_ACCESSIBILITY_CONSTRAINTS",
	3: "GROUP_CONTROLLER_SERVICE",
	4: "SNAPSHOT_METADATA_SERVICE",
}

var PluginCapability_Service_Type_value = map[string]int32{
	"UNKNOWN":                          0,
	"CONTROLLER_SERVICE":               1,
	"VOLUME_ACCESSIBILITY_CONSTRAINTS": 2,
	"GROUP_CONTROLLER_SERVICE":         3,
	"SNAPSHOT_METADATA_SERVICE":        4,
}

func (x PluginCapability_Service_Type) String() string {
	return proto.EnumName(PluginCapability_Service_Type_name, int32(x))
}

func (PluginCapability_Service_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{4, 0, 0}
}

type PluginCapability_VolumeExpansion_Type int32

const (
	PluginCapability_VolumeExpansion_UNKNOWN PluginCapability_VolumeExpansion_Type = 0
	// ONLINE indicates that volumes may be expanded when published to
	// a node. When a Plugin implements this capability it MUST
	// implement either the EXPAND_VOLUME controller capability or the
	// EXPAND_VOLUME node capability or both. When a plugin supports
	// ONLINE volume expansion and also has the EXPAND_VOLUME
	// controller capability then the plugin MUST support expansion of
	// volumes currently published and available on a node. When a
	// plugin supports ONLINE volume expansion and also has the
	// EXPAND_VOLUME node capability then the plugin MAY support
	// expansion of node-published volume via NodeExpandVolume.
	//
	// Example 1: Given a shared filesystem volume (e.g. GlusterFs),
	//
	//	the Plugin may set the ONLINE volume expansion capability and
	//	implement ControllerExpandVolume but not NodeExpandVolume.
	//
	// Example 2: Given a block storage volume type (e.g. EBS), the
	//
	//	Plugin may set the ONLINE volume expansion capability and
	//	implement both ControllerExpandVolume and NodeExpandVolume.
	//
	// Example 3: Given a Plugin that supports volume expansion only
	//
	//	upon a node, the Plugin may set the ONLINE volume
	//	expansion capability and implement NodeExpandVolume but not
	//	ControllerExpandVolume.
	PluginCapability_VolumeExpansion_ONLINE PluginCapability_VolumeExpansion_Type = 1
	// OFFLINE indicates that volumes currently published and
	// available on a node SHALL NOT be expanded via
	// ControllerExpandVolume. When a plugin supports OFFLINE volume
	// expansion it MUST implement either the EXPAND_VOLUME controller
	// capability or both the EXPAND_VOLUME controller capability and
	// the EXPAND_VOLUME node capability.
	//
	// Example 1: Given a block storage volume type (e.g. Azure Disk)
	//
	//	that does not support expansion of "node-attached" (i.e.
	//	controller-published) volumes, the Plugin may indicate
	//	OFFLINE volume expansion support and implement both
	//	ControllerExpandVolume and NodeExpandVolume.
	PluginCapability_VolumeExpansion_OFFLINE PluginCapability_VolumeExpansion_Type = 2
)

var PluginCapability_VolumeExpansion_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "ONLINE",
	2: "OFFLINE",
}

var PluginCapability_VolumeExpansion_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"ONLINE":  1,
	"OFFLINE": 2,
}

func (x PluginCapability_VolumeExpansion_Type) String() string {
	return proto.EnumName(PluginCapability_VolumeExpansion_Type_name, int32(x))
}

func (PluginCapability_VolumeExpansion_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{4, 1, 0}
}

type VolumeCapability_AccessMode_Mode int32

const (
	VolumeCapability_AccessMode_UNKNOWN VolumeCapability_AccessMode_Mode = 0
	// Can only be published once as read/write on a single node, at
	// any given time.
	VolumeCapability_AccessMode_SINGLE_NODE_WRITER VolumeCapability_AccessMode_Mode = 1
	// Can only be published once as readonly on a single node, at
	// any given time.
	VolumeCapability_AccessMode_SINGLE_NODE_READER_ONLY VolumeCapability_AccessMode_Mode = 2
	// Can be published as readonly at multiple nodes simultaneously.
	VolumeCapability_AccessMode_MULTI_NODE_READER_ONLY VolumeCapability_AccessMode_Mode = 3
	// Can be published at multiple nodes simultaneously. Only one of
	// the node can be used as read/write. The rest will be readonly.
	VolumeCapability_AccessMode_MULTI_NODE_SINGLE_WRITER VolumeCapability_AccessMode_Mode = 4
	// Can be published as read/write at multiple nodes
	// simultaneously.
	VolumeCapability_AccessMode_MULTI_NODE_MULTI_WRITER VolumeCapability_AccessMode_Mode = 5
	// Can only be published once as read/write at a single workload
	// on a single node, at any given time. SHOULD be used instead of
	// SINGLE_NODE_WRITER for COs using the experimental
	// SINGLE_NODE_MULTI_WRITER capability.
	VolumeCapability_AccessMode_SINGLE_NODE_SINGLE_WRITER VolumeCapability_AccessMode_Mode = 6
	// Can be published as read/write at multiple workloads on a
	// single node simultaneously. SHOULD be used instead of
	// SINGLE_NODE_WRITER for COs using the experimental
	// SINGLE_NODE_MULTI_WRITER capability.
	VolumeCapability_AccessMode_SINGLE_NODE_MULTI_WRITER VolumeCapability_AccessMode_Mode = 7
)

var VolumeCapability_AccessMode_Mode_name = map[int32]string{
	0: "UNKNOWN",
	1: "SINGLE_NODE_WRITER",
	2: "SINGLE_NODE_READER_ONLY",
	3: "MULTI_NODE_READER_ONLY",
	4: "MULTI_NODE_SINGLE_WRITER",
	5: "MULTI_NODE_MULTI_WRITER",
	6: "SINGLE_NODE_SINGLE_WRITER",
	7: "SINGLE_NODE_MULTI_WRITER",
}

var VolumeCapability_AccessMode_Mode_value = map[string]int32{
	"UNKNOWN":                   0,
	"SINGLE_NODE_WRITER":        1,
	"SINGLE_NODE_READER_ONLY":   2,
	"MULTI_NODE_READER_ONLY":    3,
	"MULTI_NODE_SINGLE_WRITER":  4,
	"MULTI_NODE_MULTI_WRITER":   5,
	"SINGLE_NODE_SINGLE_WRITER": 6,
	"SINGLE_NODE_MULTI_WRITER":  7,
}

func (x VolumeCapability_AccessMode_Mode) String() string {
	return proto.EnumName(VolumeCapability_AccessMode_Mode_name, int32(x))
}

func (VolumeCapability_AccessMode_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{10, 2, 0}
}

type ControllerServiceCapability_RPC_Type int32

const (
	ControllerServiceCapability_RPC_UNKNOWN                  ControllerServiceCapability_RPC_Type = 0
	ControllerServiceCapability_RPC_CREATE_DELETE_VOLUME     ControllerServiceCapability_RPC_Type = 1
	ControllerServiceCapability_RPC_PUBLISH_UNPUBLISH_VOLUME ControllerServiceCapability_RPC_Type = 2
	ControllerServiceCapability_RPC_LIST_VOLUMES             ControllerServiceCapability_RPC_Type = 3
	ControllerServiceCapability_RPC_GET_CAPACITY             ControllerServiceCapability_RPC_Type = 4
	// Currently the only way to consume a snapshot is to create
	// a volume from it. Therefore plugins supporting
	// CREATE_DELETE_SNAPSHOT MUST support creating volume from
	// snapshot.
	ControllerServiceCapability_RPC_CREATE_DELETE_SNAPSHOT ControllerServiceCapability_RPC_Type = 5
	ControllerServiceCapability_RPC_LIST_SNAPSHOTS         ControllerServiceCapability_RPC_Type = 6
	// Plugins supporting volume cloning at the storage level MAY
	// report this capability. The source volume MUST be managed by
	// the same plugin. Not all volume sources and parameters
	// combinations MAY work.
	ControllerServiceCapability_RPC_CLONE_VOLUME ControllerServiceCapability_RPC_Type = 7
	// Indicates the SP supports ControllerPublishVolume.readonly
	// field.
	ControllerServiceCapability_RPC_PUBLISH_READONLY ControllerServiceCapability_RPC_Type = 8
	// See VolumeExpansion for details.
	ControllerServiceCapability_RPC_EXPAND_VOLUME ControllerServiceCapability_RPC_Type = 9
	// Indicates the SP supports the
	// ListVolumesResponse.entry.published_node_ids field and the
	// ControllerGetVolumeResponse.published_node_ids field.
	// The SP MUST also support PUBLISH_UNPUBLISH_VOLUME.
	ControllerServiceCapability_RPC_LIST_VOLUMES_PUBLISHED_NODES ControllerServiceCapability_RPC_Type = 10
	// Indicates that the Controller service can report volume
	// conditions.
	// An SP MAY implement `VolumeCondition` in only the Controller
	// Plugin, only the Node Plugin, or both.
	// If `VolumeCondition` is implemented in both the Controller and
	// Node Plugins, it SHALL report from different perspectives.
	// If for some reason Controller and Node Plugins report
	// misaligned volume conditions, CO SHALL assume the worst case
	// is the truth.
	// Note that, for alpha, `VolumeCondition` is intended be
	// informative for humans only, not for automation.
	ControllerServiceCapability_RPC_VOLUME_CONDITION ControllerServiceCapability_RPC_Type = 11
	// Indicates the SP supports the ControllerGetVolume RPC.
	// This enables COs to, for example, fetch per volume
	// condition after a volume is provisioned.
	ControllerServiceCapability_RPC_GET_VOLUME ControllerServiceCapability_RPC_Type = 12
	// Indicates the SP supports the SINGLE_NODE_SINGLE_WRITER and/or
	// SINGLE_NODE_MULTI_WRITER access modes.
	// These access modes are intended to replace the
	// SINGLE_NODE_WRITER access mode to clarify the number of writers
	// for a volume on a single node. Plugins MUST accept and allow
	// use of the SINGLE_NODE_WRITER access mode when either
	// SINGLE_NODE_SINGLE_WRITER and/or SINGLE_NODE_MULTI_WRITER are
	// supported, in order to permit older COs to continue working.
	ControllerServiceCapability_RPC_SINGLE_NODE_MULTI_WRITER ControllerServiceCapability_RPC_Type = 13
	// Indicates the SP supports modifying volume with mutable
	// parameters. See ControllerModifyVolume for details.
	ControllerServiceCapability_RPC_MODIFY_VOLUME ControllerServiceCapability_RPC_Type = 14
)

var ControllerServiceCapability_RPC_Type_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "CREATE_DELETE_VOLUME",
	2:  "PUBLISH_UNPUBLISH_VOLUME",
	3:  "LIST_VOLUMES",
	4:  "GET_CAPACITY",
	5:  "CREATE_DELETE_SNAPSHOT",
	6:  "LIST_SNAPSHOTS",
	7:  "CLONE_VOLUME",
	8:  "PUBLISH_READONLY",
	9:  "EXPAND_VOLUME",
	10: "LIST_VOLUMES_PUBLISHED_NODES",
	11: "VOLUME_CONDITION",
	12: "GET_VOLUME",
	13: "SINGLE_NODE_MULTI_WRITER",
	14: "MODIFY_VOLUME",
}

var ControllerServiceCapability_RPC_Type_value = map[string]int32{
	"UNKNOWN":                      0,
	"CREATE_DELETE_VOLUME":         1,
	"PUBLISH_UNPUBLISH_VOLUME":     2,
	"LIST_VOLUMES":                 3,
	"GET_CAPACITY":                 4,
	"CREATE_DELETE_SNAPSHOT":       5,
	"LIST_SNAPSHOTS":               6,
	"CLONE_VOLUME":                 7,
	"PUBLISH_READONLY":             8,
	"EXPAND_VOLUME":                9,
	"LIST_VOLUMES_PUBLISHED_NODES": 10,
	"VOLUME_CONDITION":             11,
	"GET_VOLUME":                   12,
	"SINGLE_NODE_MULTI_WRITER":     13,
	"MODIFY_VOLUME":                14,
}

func (x ControllerServiceCapability_RPC_Type) String() string {
	return proto.EnumName(ControllerServiceCapability_RPC_Type_name, int32(x))
}

func (ControllerServiceCapability_RPC_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{33, 0, 0}
}

type VolumeUsage_Unit int32

const (
	VolumeUsage_UNKNOWN VolumeUsage_Unit = 0
	VolumeUsage_BYTES   VolumeUsage_Unit = 1
	VolumeUsage_INODES  VolumeUsage_Unit = 2
)

var VolumeUsage_Unit_name = map[int32]string{
	0: "UNKNOWN",
	1: "BYTES",
	2: "INODES",
}

var VolumeUsage_Unit_value = map[string]int32{
	"UNKNOWN": 0,
	"BYTES":   1,
	"INODES":  2,
}

func (x VolumeUsage_Unit) String() string {
	return proto.EnumName(VolumeUsage_Unit_name, int32(x))
}

func (VolumeUsage_Unit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{53, 0}
}

type NodeServiceCapability_RPC_Type int32

const (
	NodeServiceCapability_RPC_UNKNOWN              NodeServiceCapability_RPC_Type = 0
	NodeServiceCapability_RPC_STAGE_UNSTAGE_VOLUME NodeServiceCapability_RPC_Type = 1
	// If Plugin implements GET_VOLUME_STATS capability
	// then it MUST implement NodeGetVolumeStats RPC
	// call for fetching volume statistics.
	NodeServiceCapability_RPC_GET_VOLUME_STATS NodeServiceCapability_RPC_Type = 2
	// See VolumeExpansion for details.
	NodeServiceCapability_RPC_EXPAND_VOLUME NodeServiceCapability_RPC_Type = 3
	// Indicates that the Node service can report volume conditions.
	// An SP MAY implement `VolumeCondition` in only the Node
	// Plugin, only the Controller Plugin, or both.
	// If `VolumeCondition` is implemented in both the Node and
	// Controller Plugins, it SHALL report from different
	// perspectives.
	// If for some reason Node and Controller Plugins report
	// misaligned volume conditions, CO SHALL assume the worst case
	// is the truth.
	// Note that, for alpha, `VolumeCondition` is intended to be
	// informative for humans only, not for automation.
	NodeServiceCapability_RPC_VOLUME_CONDITION NodeServiceCapability_RPC_Type = 4
	// Indicates the SP supports the SINGLE_NODE_SINGLE_WRITER and/or
	// SINGLE_NODE_MULTI_WRITER access modes.
	// These access modes are intended to replace the
	// SINGLE_NODE_WRITER access mode to clarify the number of writers
	// for a volume on a single node. Plugins MUST accept and allow
	// use of the SINGLE_NODE_WRITER access mode (subject to the
	// processing rules for NodePublishVolume), when either
	// SINGLE_NODE_SINGLE_WRITER and/or SINGLE_NODE_MULTI_WRITER are
	// supported, in order to permit older COs to continue working.
	NodeServiceCapability_RPC_SINGLE_NODE_MULTI_WRITER NodeServiceCapability_RPC_Type = 5
	// Indicates that Node service supports mounting volumes
	// with provided volume group identifier during node stage
	// or node publish RPC calls.
	NodeServiceCapability_RPC_VOLUME_MOUNT_GROUP NodeServiceCapability_RPC_Type = 6
)

var NodeServiceCapability_RPC_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "STAGE_UNSTAGE_VOLUME",
	2: "GET_VOLUME_STATS",
	3: "EXPAND_VOLUME",
	4: "VOLUME_CONDITION",
	5: "SINGLE_NODE_MULTI_WRITER",
	6: "VOLUME_MOUNT_GROUP",
}

var NodeServiceCapability_RPC_Type_value = map[string]int32{
	"UNKNOWN":                  0,
	"STAGE_UNSTAGE_VOLUME":     1,
	"GET_VOLUME_STATS":         2,
	"EXPAND_VOLUME":            3,
	"VOLUME_CONDITION":         4,
	"SINGLE_NODE_MULTI_WRITER": 5,
	"VOLUME_MOUNT_GROUP":       6,
}

func (x NodeServiceCapability_RPC_Type) String() string {
	return proto.EnumName(NodeServiceCapability_RPC_Type_name, int32(x))
}

func (NodeServiceCapability_RPC_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{57, 0, 0}
}

type GroupControllerServiceCapability_RPC_Type int32

const (
	GroupControllerServiceCapability_RPC_UNKNOWN GroupControllerServiceCapability_RPC_Type = 0
	// Indicates that the group controller plugin supports
	// creating, deleting, and getting details of a volume
	// group snapshot.
	GroupControllerServiceCapability_RPC_CREATE_DELETE_GET_VOLUME_GROUP_SNAPSHOT GroupControllerServiceCapability_RPC_Type = 1
)

var GroupControllerServiceCapability_RPC_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "CREATE_DELETE_GET_VOLUME_GROUP_SNAPSHOT",
}

var GroupControllerServiceCapability_RPC_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"CREATE_DELETE_GET_VOLUME_GROUP_SNAPSHOT": 1,
}

func (x GroupControllerServiceCapability_RPC_Type) String() string {
	return proto.EnumName(GroupControllerServiceCapability_RPC_Type_name, int32(x))
}

func (GroupControllerServiceCapability_RPC_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{64, 0, 0}
}

type GetPluginInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPluginInfoRequest) Reset()         { *m = GetPluginInfoRequest{} }
func (m *GetPluginInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetPluginInfoRequest) ProtoMessage()    {}
func (*GetPluginInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{0}
}

func (m *GetPluginInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPluginInfoRequest.Unmarshal(m, b)
}
func (m *GetPluginInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPluginInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetPluginInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPluginInfoRequest.Merge(m, src)
}
func (m *GetPluginInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetPluginInfoRequest.Size(m)
}
func (m *GetPluginInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPluginInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPluginInfoRequest proto.InternalMessageInfo

type GetPluginInfoResponse struct {
	// The name MUST follow domain name notation format
	// (https://tools.ietf.org/html/rfc1035#section-2.3.1). It SHOULD
	// include the plugin's host company name and the plugin name,
	// to minimize the possibility of collisions. It MUST be 63
	// characters or less, beginning and ending with an alphanumeric
	// character ([a-z0-9A-Z]) with dashes (-), dots (.), and
	// alphanumerics between. This field is REQUIRED.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// This field is REQUIRED. Value of this field is opaque to the CO.
	VendorVersion string `protobuf:"bytes,2,opt,name=vendor_version,json=vendorVersion,proto3" json:"vendor_version,omitempty"`
	// This field is OPTIONAL. Values are opaque to the CO.
	Manifest             map[string]string `protobuf:"bytes,3,rep,name=manifest,proto3" json:"manifest,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetPluginInfoResponse) Reset()         { *m = GetPluginInfoResponse{} }
func (m *GetPluginInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetPluginInfoResponse) ProtoMessage()    {}
func (*GetPluginInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{1}
}

func (m *GetPluginInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPluginInfoResponse.Unmarshal(m, b)
}
func (m *GetPluginInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPluginInfoResponse.Marshal(b, m, deterministic)
}
func (m *GetPluginInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPluginInfoResponse.Merge(m, src)
}
func (m *GetPluginInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetPluginInfoResponse.Size(m)
}
func (m *GetPluginInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPluginInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPluginInfoResponse proto.InternalMessageInfo

func (m *GetPluginInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetPluginInfoResponse) GetVendorVersion() string {
	if m != nil {
		return m.VendorVersion
	}
	return ""
}

func (m *GetPluginInfoResponse) GetManifest() map[string]string {
	if m != nil {
		return m.Manifest
	}
	return nil
}

type GetPluginCapabilitiesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPluginCapabilitiesRequest) Reset()         { *m = GetPluginCapabilitiesRequest{} }
func (m *GetPluginCapabilitiesRequest) String() string { return proto.CompactTextString(m) }
func (*GetPluginCapabilitiesRequest) ProtoMessage()    {}
func (*GetPluginCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{2}
}

func (m *GetPluginCapabilitiesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPluginCapabilitiesRequest.Unmarshal(m, b)
}
func (m *GetPluginCapabilitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPluginCapabilitiesRequest.Marshal(b, m, deterministic)
}
func (m *GetPluginCapabilitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPluginCapabilitiesRequest.Merge(m, src)
}
func (m *GetPluginCapabilitiesRequest) XXX_Size() int {
	return xxx_messageInfo_GetPluginCapabilitiesRequest.Size(m)
}
func (m *GetPluginCapabilitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPluginCapabilitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPluginCapabilitiesRequest proto.InternalMessageInfo

type GetPluginCapabilitiesResponse struct {
	// All the capabilities that the controller service supports. This
	// field is OPTIONAL.
	Capabilities         []*PluginCapability `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetPluginCapabilitiesResponse) Reset()         { *m = GetPluginCapabilitiesResponse{} }
func (m *GetPluginCapabilitiesResponse) String() string { return proto.CompactTextString(m) }
func (*GetPluginCapabilitiesResponse) ProtoMessage()    {}
func (*GetPluginCapabilitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{3}
}

func (m *GetPluginCapabilitiesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPluginCapabilitiesResponse.Unmarshal(m, b)
}
func (m *GetPluginCapabilitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPluginCapabilitiesResponse.Marshal(b, m, deterministic)
}
func (m *GetPluginCapabilitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPluginCapabilitiesResponse.Merge(m, src)
}
func (m *GetPluginCapabilitiesResponse) XXX_Size() int {
	return xxx_messageInfo_GetPluginCapabilitiesResponse.Size(m)
}
func (m *GetPluginCapabilitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPluginCapabilitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPluginCapabilitiesResponse proto.InternalMessageInfo

func (m *GetPluginCapabilitiesResponse) GetCapabilities() []*PluginCapability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

// Specifies a capability of the plugin.
type PluginCapability struct {
	// Types that are valid to be assigned to Type:
	//
	//	*PluginCapability_Service_
	//	*PluginCapability_VolumeExpansion_
	Type                 isPluginCapability_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *PluginCapability) Reset()         { *m = PluginCapability{} }
func (m *PluginCapability) String() string { return proto.CompactTextString(m) }
func (*PluginCapability) ProtoMessage()    {}
func (*PluginCapability) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{4}
}

func (m *PluginCapability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginCapability.Unmarshal(m, b)
}
func (m *PluginCapability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginCapability.Marshal(b, m, deterministic)
}
func (m *PluginCapability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginCapability.Merge(m, src)
}
func (m *PluginCapability) XXX_Size() int {
	return xxx_messageInfo_PluginCapability.Size(m)
}
func (m *PluginCapability) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginCapability.DiscardUnknown(m)
}

var xxx_messageInfo_PluginCapability proto.InternalMessageInfo

type isPluginCapability_Type interface {
	isPluginCapability_Type()
}

type PluginCapability_Service_ struct {
	Service *PluginCapability_Service `protobuf:"bytes,1,opt,name=service,proto3,oneof"`
}

type PluginCapability_VolumeExpansion_ struct {
	VolumeExpansion *PluginCapability_VolumeExpansion `protobuf:"bytes,2,opt,name=volume_expansion,json=volumeExpansion,proto3,oneof"`
}

func (*PluginCapability_Service_) isPluginCapability_Type() {}

func (*PluginCapability_VolumeExpansion_) isPluginCapability_Type() {}

func (m *PluginCapability) GetType() isPluginCapability_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *PluginCapability) GetService() *PluginCapability_Service {
	if x, ok := m.GetType().(*PluginCapability_Service_); ok {
		return x.Service
	}
	return nil
}

func (m *PluginCapability) GetVolumeExpansion() *PluginCapability_VolumeExpansion {
	if x, ok := m.GetType().(*PluginCapability_VolumeExpansion_); ok {
		return x.VolumeExpansion
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PluginCapability) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PluginCapability_Service_)(nil),
		(*PluginCapability_VolumeExpansion_)(nil),
	}
}

type PluginCapability_Service struct {
	Type                 PluginCapability_Service_Type `protobuf:"varint,1,opt,name=type,proto3,enum=csi.v1.PluginCapability_Service_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *PluginCapability_Service) Reset()         { *m = PluginCapability_Service{} }
func (m *PluginCapability_Service) String() string { return proto.CompactTextString(m) }
func (*PluginCapability_Service) ProtoMessage()    {}
func (*PluginCapability_Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{4, 0}
}

func (m *PluginCapability_Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginCapability_Service.Unmarshal(m, b)
}
func (m *PluginCapability_Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginCapability_Service.Marshal(b, m, deterministic)
}
func (m *PluginCapability_Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginCapability_Service.Merge(m, src)
}
func (m *PluginCapability_Service) XXX_Size() int {
	return xxx_messageInfo_PluginCapability_Service.Size(m)
}
func (m *PluginCapability_Service) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginCapability_Service.DiscardUnknown(m)
}

var xxx_messageInfo_PluginCapability_Service proto.InternalMessageInfo

func (m *PluginCapability_Service) GetType() PluginCapability_Service_Type {
	if m != nil {
		return m.Type
	}
	return PluginCapability_Service_UNKNOWN
}

type PluginCapability_VolumeExpansion struct {
	Type                 PluginCapability_VolumeExpansion_Type `protobuf:"varint,1,opt,name=type,proto3,enum=csi.v1.PluginCapability_VolumeExpansion_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *PluginCapability_VolumeExpansion) Reset()         { *m = PluginCapability_VolumeExpansion{} }
func (m *PluginCapability_VolumeExpansion) String() string { return proto.CompactTextString(m) }
func (*PluginCapability_VolumeExpansion) ProtoMessage()    {}
func (*PluginCapability_VolumeExpansion) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{4, 1}
}

func (m *PluginCapability_VolumeExpansion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginCapability_VolumeExpansion.Unmarshal(m, b)
}
func (m *PluginCapability_VolumeExpansion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginCapability_VolumeExpansion.Marshal(b, m, deterministic)
}
func (m *PluginCapability_VolumeExpansion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginCapability_VolumeExpansion.Merge(m, src)
}
func (m *PluginCapability_VolumeExpansion) XXX_Size() int {
	return xxx_messageInfo_PluginCapability_VolumeExpansion.Size(m)
}
func (m *PluginCapability_VolumeExpansion) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginCapability_VolumeExpansion.DiscardUnknown(m)
}

var xxx_messageInfo_PluginCapability_VolumeExpansion proto.InternalMessageInfo

func (m *PluginCapability_VolumeExpansion) GetType() PluginCapability_VolumeExpansion_Type {
	if m != nil {
		return m.Type
	}
	return PluginCapability_VolumeExpansion_UNKNOWN
}

type ProbeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProbeRequest) Reset()         { *m = ProbeRequest{} }
func (m *ProbeRequest) String() string { return proto.CompactTextString(m) }
func (*ProbeRequest) ProtoMessage()    {}
func (*ProbeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{5}
}

func (m *ProbeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProbeRequest.Unmarshal(m, b)
}
func (m *ProbeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProbeRequest.Marshal(b, m, deterministic)
}
func (m *ProbeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeRequest.Merge(m, src)
}
func (m *ProbeRequest) XXX_Size() int {
	return xxx_messageInfo_ProbeRequest.Size(m)
}
func (m *ProbeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeRequest proto.InternalMessageInfo

type ProbeResponse struct {
	// Readiness allows a plugin to report its initialization status back
	// to the CO. Initialization for some plugins MAY be time consuming
	// and it is important for a CO to distinguish between the following
	// cases:
	//
	//  1. The plugin is in an unhealthy state and MAY need restarting. In
	//     this case a gRPC error code SHALL be returned.
	//  2. The plugin is still initializing, but is otherwise perfectly
	//     healthy. In this case a successful response SHALL be returned
	//     with a readiness value of `false`. Calls to the plugin's
	//     Controller and/or Node services MAY fail due to an incomplete
	//     initialization state.
	//  3. The plugin has finished initializing and is ready to service
	//     calls to its Controller and/or Node services. A successful
	//     response is returned with a readiness value of `true`.
	//
	// This field is OPTIONAL. If not present, the caller SHALL assume
	// that the plugin is in a ready state and is accepting calls to its
	// Controller and/or Node services (according to the plugin's reported
	// capabilities).
	Ready                *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=ready,proto3" json:"ready,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ProbeResponse) Reset()         { *m = ProbeResponse{} }
func (m *ProbeResponse) String() string { return proto.CompactTextString(m) }
func (*ProbeResponse) ProtoMessage()    {}
func (*ProbeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{6}
}

func (m *ProbeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProbeResponse.Unmarshal(m, b)
}
func (m *ProbeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProbeResponse.Marshal(b, m, deterministic)
}
func (m *ProbeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeResponse.Merge(m, src)
}
func (m *ProbeResponse) XXX_Size() int {
	return xxx_messageInfo_ProbeResponse.Size(m)
}
func (m *ProbeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeResponse proto.InternalMessageInfo

func (m *ProbeResponse) GetReady() *wrapperspb.BoolValue {
	if m != nil {
		return m.Ready
	}
	return nil
}

type CreateVolumeRequest struct {
	// The suggested name for the storage space. This field is REQUIRED.
	// It serves two purposes:
	//  1. Idempotency - This name is generated by the CO to achieve
	//     idempotency.  The Plugin SHOULD ensure that multiple
	//     `CreateVolume` calls for the same name do not result in more
	//     than one piece of storage provisioned corresponding to that
	//     name. If a Plugin is unable to enforce idempotency, the CO's
	//     error recovery logic could result in multiple (unused) volumes
	//     being provisioned.
	//     In the case of error, the CO MUST handle the gRPC error codes
	//     per the recovery behavior defined in the "CreateVolume Errors"
	//     section below.
	//     The CO is responsible for cleaning up volumes it provisioned
	//     that it no longer needs. If the CO is uncertain whether a volume
	//     was provisioned or not when a `CreateVolume` call fails, the CO
	//     MAY call `CreateVolume` again, with the same name, to ensure the
	//     volume exists and to retrieve the volume's `volume_id` (unless
	//     otherwise prohibited by "CreateVolume Errors").
	//  2. Suggested name - Some storage systems allow callers to specify
	//     an identifier by which to refer to the newly provisioned
	//     storage. If a storage system supports this, it can optionally
	//     use this name as the identifier for the new volume.
	//
	// Any Unicode string that conforms to the length limit is allowed
	// except those containing the following banned characters:
	// U+0000-U+0008, U+000B, U+000C, U+000E-U+001F, U+007F-U+009F.
	// (These are control characters other than commonly used whitespace.)
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// This field is OPTIONAL. This allows the CO to specify the capacity
	// requirement of the volume to be provisioned. If not specified, the
	// Plugin MAY choose an implementation-defined capacity range. If
	// specified it MUST always be honored, even when creating volumes
	// from a source; which MAY force some backends to internally extend
	// the volume after creating it.
	CapacityRange *CapacityRange `protobuf:"bytes,2,opt,name=capacity_range,json=capacityRange,proto3" json:"capacity_range,omitempty"`
	// The capabilities that the provisioned volume MUST have. SP MUST
	// provision a volume that will satisfy ALL of the capabilities
	// specified in this list. Otherwise SP MUST return the appropriate
	// gRPC error code.
	// The Plugin MUST assume that the CO MAY use the provisioned volume
	// with ANY of the capabilities specified in this list.
	// For example, a CO MAY specify two volume capabilities: one with
	// access mode SINGLE_NODE_WRITER and another with access mode
	// MULTI_NODE_READER_ONLY. In this case, the SP MUST verify that the
	// provisioned volume can be used in either mode.
	// This also enables the CO to do early validation: If ANY of the
	// specified volume capabilities are not supported by the SP, the call
	// MUST return the appropriate gRPC error code.
	// This field is REQUIRED.
	VolumeCapabilities []*VolumeCapability `protobuf:"bytes,3,rep,name=volume_capabilities,json=volumeCapabilities,proto3" json:"volume_capabilities,omitempty"`
	// Plugin specific creation-time parameters passed in as opaque
	// key-value pairs. This field is OPTIONAL. The Plugin is responsible
	// for parsing and validating these parameters. COs will treat
	// these as opaque.
	Parameters map[string]string `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Secrets required by plugin to complete volume creation request.
	// This field is OPTIONAL. Refer to the `Secrets Requirements`
	// section on how to use this field.
	Secrets map[string]string `protobuf:"bytes,5,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If specified, the new volume will be pre-populated with data from
	// this source. This field is OPTIONAL.
	VolumeContentSource *VolumeContentSource `protobuf:"bytes,6,opt,name=volume_content_source,json=volumeContentSource,proto3" json:"volume_content_source,omitempty"`
	// Specifies where (regions, zones, racks, etc.) the provisioned
	// volume MUST be accessible from.
	// An SP SHALL advertise the requirements for topological
	// accessibility information in documentation. COs SHALL only specify
	// topological accessibility information supported by the SP.
	// This field is OPTIONAL.
	// This field SHALL NOT be specified unless the SP has the
	// VOLUME_ACCESSIBILITY_CONSTRAINTS plugin capability.
	// If this field is not specified and the SP has the
	// VOLUME_ACCESSIBILITY_CONSTRAINTS plugin capability, the SP MAY
	// choose where the provisioned volume is accessible from.
	AccessibilityRequirements *TopologyRequirement `protobuf:"bytes,7,opt,name=accessibility_requirements,json=accessibilityRequirements,proto3" json:"accessibility_requirements,omitempty"`
	// Plugins MUST treat these
	// as if they take precedence over the parameters field.
	// This field SHALL NOT be specified unless the SP has the
	// MODIFY_VOLUME plugin capability.
	MutableParameters    map[string]string `protobuf:"bytes,8,rep,name=mutable_parameters,json=mutableParameters,proto3" json:"mutable_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateVolumeRequest) Reset()         { *m = CreateVolumeRequest{} }
func (m *CreateVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*CreateVolumeRequest) ProtoMessage()    {}
func (*CreateVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{7}
}

func (m *CreateVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVolumeRequest.Unmarshal(m, b)
}
func (m *CreateVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVolumeRequest.Marshal(b, m, deterministic)
}
func (m *CreateVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVolumeRequest.Merge(m, src)
}
func (m *CreateVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_CreateVolumeRequest.Size(m)
}
func (m *CreateVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVolumeRequest proto.InternalMessageInfo

func (m *CreateVolumeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateVolumeRequest) GetCapacityRange() *CapacityRange {
	if m != nil {
		return m.CapacityRange
	}
	return nil
}

func (m *CreateVolumeRequest) GetVolumeCapabilities() []*VolumeCapability {
	if m != nil {
		return m.VolumeCapabilities
	}
	return nil
}

func (m *CreateVolumeRequest) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *CreateVolumeRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *CreateVolumeRequest) GetVolumeContentSource() *VolumeContentSource {
	if m != nil {
		return m.VolumeContentSource
	}
	return nil
}

func (m *CreateVolumeRequest) GetAccessibilityRequirements() *TopologyRequirement {
	if m != nil {
		return m.AccessibilityRequirements
	}
	return nil
}

func (m *CreateVolumeRequest) GetMutableParameters() map[string]string {
	if m != nil {
		return m.MutableParameters
	}
	return nil
}

// Specifies what source the volume will be created from. One of the
// type fields MUST be specified.
type VolumeContentSource struct {
	// Types that are valid to be assigned to Type:
	//
	//	*VolumeContentSource_Snapshot
	//	*VolumeContentSource_Volume
	Type                 isVolumeContentSource_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *VolumeContentSource) Reset()         { *m = VolumeContentSource{} }
func (m *VolumeContentSource) String() string { return proto.CompactTextString(m) }
func (*VolumeContentSource) ProtoMessage()    {}
func (*VolumeContentSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{8}
}

func (m *VolumeContentSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeContentSource.Unmarshal(m, b)
}
func (m *VolumeContentSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeContentSource.Marshal(b, m, deterministic)
}
func (m *VolumeContentSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeContentSource.Merge(m, src)
}
func (m *VolumeContentSource) XXX_Size() int {
	return xxx_messageInfo_VolumeContentSource.Size(m)
}
func (m *VolumeContentSource) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeContentSource.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeContentSource proto.InternalMessageInfo

type isVolumeContentSource_Type interface {
	isVolumeContentSource_Type()
}

type VolumeContentSource_Snapshot struct {
	Snapshot *VolumeContentSource_SnapshotSource `protobuf:"bytes,1,opt,name=snapshot,proto3,oneof"`
}

type VolumeContentSource_Volume struct {
	Volume *VolumeContentSource_VolumeSource `protobuf:"bytes,2,opt,name=volume,proto3,oneof"`
}

func (*VolumeContentSource_Snapshot) isVolumeContentSource_Type() {}

func (*VolumeContentSource_Volume) isVolumeContentSource_Type() {}

func (m *VolumeContentSource) GetType() isVolumeContentSource_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *VolumeContentSource) GetSnapshot() *VolumeContentSource_SnapshotSource {
	if x, ok := m.GetType().(*VolumeContentSource_Snapshot); ok {
		return x.Snapshot
	}
	return nil
}

func (m *VolumeContentSource) GetVolume() *VolumeContentSource_VolumeSource {
	if x, ok := m.GetType().(*VolumeContentSource_Volume); ok {
		return x.Volume
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VolumeContentSource) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VolumeContentSource_Snapshot)(nil),
		(*VolumeContentSource_Volume)(nil),
	}
}

type VolumeContentSource_SnapshotSource struct {
	// Contains identity information for the existing source snapshot.
	// This field is REQUIRED. Plugin is REQUIRED to support creating
	// volume from snapshot if it supports the capability
	// CREATE_DELETE_SNAPSHOT.
	SnapshotId           string   `protobuf:"bytes,1,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeContentSource_SnapshotSource) Reset()         { *m = VolumeContentSource_SnapshotSource{} }
func (m *VolumeContentSource_SnapshotSource) String() string { return proto.CompactTextString(m) }
func (*VolumeContentSource_SnapshotSource) ProtoMessage()    {}
func (*VolumeContentSource_SnapshotSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{8, 0}
}

func (m *VolumeContentSource_SnapshotSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeContentSource_SnapshotSource.Unmarshal(m, b)
}
func (m *VolumeContentSource_SnapshotSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeContentSource_SnapshotSource.Marshal(b, m, deterministic)
}
func (m *VolumeContentSource_SnapshotSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeContentSource_SnapshotSource.Merge(m, src)
}
func (m *VolumeContentSource_SnapshotSource) XXX_Size() int {
	return xxx_messageInfo_VolumeContentSource_SnapshotSource.Size(m)
}
func (m *VolumeContentSource_SnapshotSource) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeContentSource_SnapshotSource.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeContentSource_SnapshotSource proto.InternalMessageInfo

func (m *VolumeContentSource_SnapshotSource) GetSnapshotId() string {
	if m != nil {
		return m.SnapshotId
	}
	return ""
}

type VolumeContentSource_VolumeSource struct {
	// Contains identity information for the existing source volume.
	// This field is REQUIRED. Plugins reporting CLONE_VOLUME
	// capability MUST support creating a volume from another volume.
	VolumeId             string   `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeContentSource_VolumeSource) Reset()         { *m = VolumeContentSource_VolumeSource{} }
func (m *VolumeContentSource_VolumeSource) String() string { return proto.CompactTextString(m) }
func (*VolumeContentSource_VolumeSource) ProtoMessage()    {}
func (*VolumeContentSource_VolumeSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{8, 1}
}

func (m *VolumeContentSource_VolumeSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeContentSource_VolumeSource.Unmarshal(m, b)
}
func (m *VolumeContentSource_VolumeSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeContentSource_VolumeSource.Marshal(b, m, deterministic)
}
func (m *VolumeContentSource_VolumeSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeContentSource_VolumeSource.Merge(m, src)
}
func (m *VolumeContentSource_VolumeSource) XXX_Size() int {
	return xxx_messageInfo_VolumeContentSource_VolumeSource.Size(m)
}
func (m *VolumeContentSource_VolumeSource) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeContentSource_VolumeSource.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeContentSource_VolumeSource proto.InternalMessageInfo

func (m *VolumeContentSource_VolumeSource) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

type CreateVolumeResponse struct {
	// Contains all attributes of the newly created volume that are
	// relevant to the CO along with information required by the Plugin
	// to uniquely identify the volume. This field is REQUIRED.
	Volume               *Volume  `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateVolumeResponse) Reset()         { *m = CreateVolumeResponse{} }
func (m *CreateVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*CreateVolumeResponse) ProtoMessage()    {}
func (*CreateVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{9}
}

func (m *CreateVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVolumeResponse.Unmarshal(m, b)
}
func (m *CreateVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVolumeResponse.Marshal(b, m, deterministic)
}
func (m *CreateVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVolumeResponse.Merge(m, src)
}
func (m *CreateVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_CreateVolumeResponse.Size(m)
}
func (m *CreateVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVolumeResponse proto.InternalMessageInfo

func (m *CreateVolumeResponse) GetVolume() *Volume {
	if m != nil {
		return m.Volume
	}
	return nil
}

// Specify a capability of a volume.
type VolumeCapability struct {
	// Specifies what API the volume will be accessed using. One of the
	// following fields MUST be specified.
	//
	// Types that are valid to be assigned to AccessType:
	//
	//	*VolumeCapability_Block
	//	*VolumeCapability_Mount
	AccessType isVolumeCapability_AccessType `protobuf_oneof:"access_type"`
	// This is a REQUIRED field.
	AccessMode           *VolumeCapability_AccessMode `protobuf:"bytes,3,opt,name=access_mode,json=accessMode,proto3" json:"access_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *VolumeCapability) Reset()         { *m = VolumeCapability{} }
func (m *VolumeCapability) String() string { return proto.CompactTextString(m) }
func (*VolumeCapability) ProtoMessage()    {}
func (*VolumeCapability) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{10}
}

func (m *VolumeCapability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeCapability.Unmarshal(m, b)
}
func (m *VolumeCapability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeCapability.Marshal(b, m, deterministic)
}
func (m *VolumeCapability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeCapability.Merge(m, src)
}
func (m *VolumeCapability) XXX_Size() int {
	return xxx_messageInfo_VolumeCapability.Size(m)
}
func (m *VolumeCapability) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeCapability.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeCapability proto.InternalMessageInfo

type isVolumeCapability_AccessType interface {
	isVolumeCapability_AccessType()
}

type VolumeCapability_Block struct {
	Block *VolumeCapability_BlockVolume `protobuf:"bytes,1,opt,name=block,proto3,oneof"`
}

type VolumeCapability_Mount struct {
	Mount *VolumeCapability_MountVolume `protobuf:"bytes,2,opt,name=mount,proto3,oneof"`
}

func (*VolumeCapability_Block) isVolumeCapability_AccessType() {}

func (*VolumeCapability_Mount) isVolumeCapability_AccessType() {}

func (m *VolumeCapability) GetAccessType() isVolumeCapability_AccessType {
	if m != nil {
		return m.AccessType
	}
	return nil
}

func (m *VolumeCapability) GetBlock() *VolumeCapability_BlockVolume {
	if x, ok := m.GetAccessType().(*VolumeCapability_Block); ok {
		return x.Block
	}
	return nil
}

func (m *VolumeCapability) GetMount() *VolumeCapability_MountVolume {
	if x, ok := m.GetAccessType().(*VolumeCapability_Mount); ok {
		return x.Mount
	}
	return nil
}

func (m *VolumeCapability) GetAccessMode() *VolumeCapability_AccessMode {
	if m != nil {
		return m.AccessMode
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VolumeCapability) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VolumeCapability_Block)(nil),
		(*VolumeCapability_Mount)(nil),
	}
}

// Indicate that the volume will be accessed via the block device API.
type VolumeCapability_BlockVolume struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeCapability_BlockVolume) Reset()         { *m = VolumeCapability_BlockVolume{} }
func (m *VolumeCapability_BlockVolume) String() string { return proto.CompactTextString(m) }
func (*VolumeCapability_BlockVolume) ProtoMessage()    {}
func (*VolumeCapability_BlockVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{10, 0}
}

func (m *VolumeCapability_BlockVolume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeCapability_BlockVolume.Unmarshal(m, b)
}
func (m *VolumeCapability_BlockVolume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeCapability_BlockVolume.Marshal(b, m, deterministic)
}
func (m *VolumeCapability_BlockVolume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeCapability_BlockVolume.Merge(m, src)
}
func (m *VolumeCapability_BlockVolume) XXX_Size() int {
	return xxx_messageInfo_VolumeCapability_BlockVolume.Size(m)
}
func (m *VolumeCapability_BlockVolume) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeCapability_BlockVolume.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeCapability_BlockVolume proto.InternalMessageInfo

// Indicate that the volume will be accessed via the filesystem API.
type VolumeCapability_MountVolume struct {
	// The filesystem type. This field is OPTIONAL.
	// An empty string is equal to an unspecified field value.
	FsType string `protobuf:"bytes,1,opt,name=fs_type,json=fsType,proto3" json:"fs_type,omitempty"`
	// The mount options that can be used for the volume. This field is
	// OPTIONAL. `mount_flags` MAY contain sensitive information.
	// Therefore, the CO and the Plugin MUST NOT leak this information
	// to untrusted entities. The total size of this repeated field
	// SHALL NOT exceed 4 KiB.
	MountFlags []string `protobuf:"bytes,2,rep,name=mount_flags,json=mountFlags,proto3" json:"mount_flags,omitempty"`
	// If SP has VOLUME_MOUNT_GROUP node capability and CO provides
	// this field then SP MUST ensure that the volume_mount_group
	// parameter is passed as the group identifier to the underlying
	// operating system mount system call, with the understanding
	// that the set of available mount call parameters and/or
	// mount implementations may vary across operating systems.
	// Additionally, new file and/or directory entries written to
	// the underlying filesystem SHOULD be permission-labeled in such a
	// manner, unless otherwise modified by a workload, that they are
	// both readable and writable by said mount group identifier.
	// This is an OPTIONAL field.
	VolumeMountGroup     string   `protobuf:"bytes,3,opt,name=volume_mount_group,json=volumeMountGroup,proto3" json:"volume_mount_group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeCapability_MountVolume) Reset()         { *m = VolumeCapability_MountVolume{} }
func (m *VolumeCapability_MountVolume) String() string { return proto.CompactTextString(m) }
func (*VolumeCapability_MountVolume) ProtoMessage()    {}
func (*VolumeCapability_MountVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{10, 1}
}

func (m *VolumeCapability_MountVolume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeCapability_MountVolume.Unmarshal(m, b)
}
func (m *VolumeCapability_MountVolume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeCapability_MountVolume.Marshal(b, m, deterministic)
}
func (m *VolumeCapability_MountVolume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeCapability_MountVolume.Merge(m, src)
}
func (m *VolumeCapability_MountVolume) XXX_Size() int {
	return xxx_messageInfo_VolumeCapability_MountVolume.Size(m)
}
func (m *VolumeCapability_MountVolume) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeCapability_MountVolume.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeCapability_MountVolume proto.InternalMessageInfo

func (m *VolumeCapability_MountVolume) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

func (m *VolumeCapability_MountVolume) GetMountFlags() []string {
	if m != nil {
		return m.MountFlags
	}
	return nil
}

func (m *VolumeCapability_MountVolume) GetVolumeMountGroup() string {
	if m != nil {
		return m.VolumeMountGroup
	}
	return ""
}

// Specify how a volume can be accessed.
type VolumeCapability_AccessMode struct {
	// This field is REQUIRED.
	Mode                 VolumeCapability_AccessMode_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=csi.v1.VolumeCapability_AccessMode_Mode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *VolumeCapability_AccessMode) Reset()         { *m = VolumeCapability_AccessMode{} }
func (m *VolumeCapability_AccessMode) String() string { return proto.CompactTextString(m) }
func (*VolumeCapability_AccessMode) ProtoMessage()    {}
func (*VolumeCapability_AccessMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{10, 2}
}

func (m *VolumeCapability_AccessMode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeCapability_AccessMode.Unmarshal(m, b)
}
func (m *VolumeCapability_AccessMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeCapability_AccessMode.Marshal(b, m, deterministic)
}
func (m *VolumeCapability_AccessMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeCapability_AccessMode.Merge(m, src)
}
func (m *VolumeCapability_AccessMode) XXX_Size() int {
	return xxx_messageInfo_VolumeCapability_AccessMode.Size(m)
}
func (m *VolumeCapability_AccessMode) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeCapability_AccessMode.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeCapability_AccessMode proto.InternalMessageInfo

func (m *VolumeCapability_AccessMode) GetMode() VolumeCapability_AccessMode_Mode {
	if m != nil {
		return m.Mode
	}
	return VolumeCapability_AccessMode_UNKNOWN
}

// The capacity of the storage space in bytes. To specify an exact size,
// `required_bytes` and `limit_bytes` SHALL be set to the same value. At
// least one of the these fields MUST be specified.
type CapacityRange struct {
	// Volume MUST be at least this big. This field is OPTIONAL.
	// A value of 0 is equal to an unspecified field value.
	// The value of this field MUST NOT be negative.
	RequiredBytes int64 `protobuf:"varint,1,opt,name=required_bytes,json=requiredBytes,proto3" json:"required_bytes,omitempty"`
	// Volume MUST not be bigger than this. This field is OPTIONAL.
	// A value of 0 is equal to an unspecified field value.
	// The value of this field MUST NOT be negative.
	LimitBytes           int64    `protobuf:"varint,2,opt,name=limit_bytes,json=limitBytes,proto3" json:"limit_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapacityRange) Reset()         { *m = CapacityRange{} }
func (m *CapacityRange) String() string { return proto.CompactTextString(m) }
func (*CapacityRange) ProtoMessage()    {}
func (*CapacityRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{11}
}

func (m *CapacityRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CapacityRange.Unmarshal(m, b)
}
func (m *CapacityRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CapacityRange.Marshal(b, m, deterministic)
}
func (m *CapacityRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapacityRange.Merge(m, src)
}
func (m *CapacityRange) XXX_Size() int {
	return xxx_messageInfo_CapacityRange.Size(m)
}
func (m *CapacityRange) XXX_DiscardUnknown() {
	xxx_messageInfo_CapacityRange.DiscardUnknown(m)
}

var xxx_messageInfo_CapacityRange proto.InternalMessageInfo

func (m *CapacityRange) GetRequiredBytes() int64 {
	if m != nil {
		return m.RequiredBytes
	}
	return 0
}

func (m *CapacityRange) GetLimitBytes() int64 {
	if m != nil {
		return m.LimitBytes
	}
	return 0
}

// Information about a specific volume.
type Volume struct {
	// The capacity of the volume in bytes. This field is OPTIONAL. If not
	// set (value of 0), it indicates that the capacity of the volume is
	// unknown (e.g., NFS share).
	// The value of this field MUST NOT be negative.
	CapacityBytes int64 `protobuf:"varint,1,opt,name=capacity_bytes,json=capacityBytes,proto3" json:"capacity_bytes,omitempty"`
	// The identifier for this volume, generated by the plugin.
	// This field is REQUIRED.
	// This field MUST contain enough information to uniquely identify
	// this specific volume vs all other volumes supported by this plugin.
	// This field SHALL be used by the CO in subsequent calls to refer to
	// this volume.
	// The SP is NOT responsible for global uniqueness of volume_id across
	// multiple SPs.
	VolumeId string `protobuf:"bytes,2,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Opaque static properties of the volume. SP MAY use this field to
	// ensure subsequent volume validation and publishing calls have
	// contextual information.
	// The contents of this field SHALL be opaque to a CO.
	// The contents of this field SHALL NOT be mutable.
	// The contents of this field SHALL be safe for the CO to cache.
	// The contents of this field SHOULD NOT contain sensitive
	// information.
	// The contents of this field SHOULD NOT be used for uniquely
	// identifying a volume. The `volume_id` alone SHOULD be sufficient to
	// identify the volume.
	// A volume uniquely identified by `volume_id` SHALL always report the
	// same volume_context.
	// This field is OPTIONAL and when present MUST be passed to volume
	// validation and publishing calls.
	VolumeContext map[string]string `protobuf:"bytes,3,rep,name=volume_context,json=volumeContext,proto3" json:"volume_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If specified, indicates that the volume is not empty and is
	// pre-populated with data from the specified source.
	// This field is OPTIONAL.
	ContentSource *VolumeContentSource `protobuf:"bytes,4,opt,name=content_source,json=contentSource,proto3" json:"content_source,omitempty"`
	// Specifies where (regions, zones, racks, etc.) the provisioned
	// volume is accessible from.
	// A plugin that returns this field MUST also set the
	// VOLUME_ACCESSIBILITY_CONSTRAINTS plugin capability.
	// An SP MAY specify multiple topologies to indicate the volume is
	// accessible from multiple locations.
	// COs MAY use this information along with the topology information
	// returned by NodeGetInfo to ensure that a given volume is accessible
	// from a given node when scheduling workloads.
	// This field is OPTIONAL. If it is not specified, the CO MAY assume
	// the volume is equally accessible from all nodes in the cluster and
	// MAY schedule workloads referencing the volume on any available
	// node.
	//
	// Example 1:
	//
	//	accessible_topology = {"region": "R1", "zone": "Z2"}
	//
	// Indicates a volume accessible only from the "region" "R1" and the
	// "zone" "Z2".
	//
	// Example 2:
	//
	//	accessible_topology =
	//	  {"region": "R1", "zone": "Z2"},
	//	  {"region": "R1", "zone": "Z3"}
	//
	// Indicates a volume accessible from both "zone" "Z2" and "zone" "Z3"
	// in the "region" "R1".
	AccessibleTopology   []*Topology `protobuf:"bytes,5,rep,name=accessible_topology,json=accessibleTopology,proto3" json:"accessible_topology,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Volume) Reset()         { *m = Volume{} }
func (m *Volume) String() string { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()    {}
func (*Volume) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{12}
}

func (m *Volume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume.Unmarshal(m, b)
}
func (m *Volume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume.Marshal(b, m, deterministic)
}
func (m *Volume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume.Merge(m, src)
}
func (m *Volume) XXX_Size() int {
	return xxx_messageInfo_Volume.Size(m)
}
func (m *Volume) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume.DiscardUnknown(m)
}

var xxx_messageInfo_Volume proto.InternalMessageInfo

func (m *Volume) GetCapacityBytes() int64 {
	if m != nil {
		return m.CapacityBytes
	}
	return 0
}

func (m *Volume) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *Volume) GetVolumeContext() map[string]string {
	if m != nil {
		return m.VolumeContext
	}
	return nil
}

func (m *Volume) GetContentSource() *VolumeContentSource {
	if m != nil {
		return m.ContentSource
	}
	return nil
}

func (m *Volume) GetAccessibleTopology() []*Topology {
	if m != nil {
		return m.AccessibleTopology
	}
	return nil
}

type TopologyRequirement struct {
	// Specifies the list of topologies the provisioned volume MUST be
	// accessible from.
	// This field is OPTIONAL. If TopologyRequirement is specified either
	// requisite or preferred or both MUST be specified.
	//
	// If requisite is specified, the provisioned volume MUST be
	// accessible from at least one of the requisite topologies.
	//
	// Given
	//
	//	x = number of topologies provisioned volume is accessible from
	//	n = number of requisite topologies
	//
	// The CO MUST ensure n >= 1. The SP MUST ensure x >= 1
	// If x==n, then the SP MUST make the provisioned volume available to
	// all topologies from the list of requisite topologies. If it is
	// unable to do so, the SP MUST fail the CreateVolume call.
	// For example, if a volume should be accessible from a single zone,
	// and requisite =
	//
	//	{"region": "R1", "zone": "Z2"}
	//
	// then the provisioned volume MUST be accessible from the "region"
	// "R1" and the "zone" "Z2".
	// Similarly, if a volume should be accessible from two zones, and
	// requisite =
	//
	//	{"region": "R1", "zone": "Z2"},
	//	{"region": "R1", "zone": "Z3"}
	//
	// then the provisioned volume MUST be accessible from the "region"
	// "R1" and both "zone" "Z2" and "zone" "Z3".
	//
	// If x<n, then the SP SHALL choose x unique topologies from the list
	// of requisite topologies. If it is unable to do so, the SP MUST fail
	// the CreateVolume call.
	// For example, if a volume should be accessible from a single zone,
	// and requisite =
	//
	//	{"region": "R1", "zone": "Z2"},
	//	{"region": "R1", "zone": "Z3"}
	//
	// then the SP may choose to make the provisioned volume available in
	// either the "zone" "Z2" or the "zone" "Z3" in the "region" "R1".
	// Similarly, if a volume should be accessible from two zones, and
	// requisite =
	//
	//	{"region": "R1", "zone": "Z2"},
	//	{"region": "R1", "zone": "Z3"},
	//	{"region": "R1", "zone": "Z4"}
	//
	// then the provisioned volume MUST be accessible from any combination
	// of two unique topologies: e.g. "R1/Z2" and "R1/Z3", or "R1/Z2" and
	//
	//	"R1/Z4", or "R1/Z3" and "R1/Z4".
	//
	// If x>n, then the SP MUST make the provisioned volume available from
	// all topologies from the list of requisite topologies and MAY choose
	// the remaining x-n unique topologies from the list of all possible
	// topologies. If it is unable to do so, the SP MUST fail the
	// CreateVolume call.
	// For example, if a volume should be accessible from two zones, and
	// requisite =
	//
	//	{"region": "R1", "zone": "Z2"}
	//
	// then the provisioned volume MUST be accessible from the "region"
	// "R1" and the "zone" "Z2" and the SP may select the second zone
	// independently, e.g. "R1/Z4".
	Requisite []*Topology `protobuf:"bytes,1,rep,name=requisite,proto3" json:"requisite,omitempty"`
	// Specifies the list of topologies the CO would prefer the volume to
	// be provisioned in.
	//
	// This field is OPTIONAL. If TopologyRequirement is specified either
	// requisite or preferred or both MUST be specified.
	//
	// An SP MUST attempt to make the provisioned volume available using
	// the preferred topologies in order from first to last.
	//
	// If requisite is specified, all topologies in preferred list MUST
	// also be present in the list of requisite topologies.
	//
	// If the SP is unable to to make the provisioned volume available
	// from any of the preferred topologies, the SP MAY choose a topology
	// from the list of requisite topologies.
	// If the list of requisite topologies is not specified, then the SP
	// MAY choose from the list of all possible topologies.
	// If the list of requisite topologies is specified and the SP is
	// unable to to make the provisioned volume available from any of the
	// requisite topologies it MUST fail the CreateVolume call.
	//
	// Example 1:
	// Given a volume should be accessible from a single zone, and
	// requisite =
	//
	//	{"region": "R1", "zone": "Z2"},
	//	{"region": "R1", "zone": "Z3"}
	//
	// preferred =
	//
	//	{"region": "R1", "zone": "Z3"}
	//
	// then the SP SHOULD first attempt to make the provisioned volume
	// available from "zone" "Z3" in the "region" "R1" and fall back to
	// "zone" "Z2" in the "region" "R1" if that is not possible.
	//
	// Example 2:
	// Given a volume should be accessible from a single zone, and
	// requisite =
	//
	//	{"region": "R1", "zone": "Z2"},
	//	{"region": "R1", "zone": "Z3"},
	//	{"region": "R1", "zone": "Z4"},
	//	{"region": "R1", "zone": "Z5"}
	//
	// preferred =
	//
	//	{"region": "R1", "zone": "Z4"},
	//	{"region": "R1", "zone": "Z2"}
	//
	// then the SP SHOULD first attempt to make the provisioned volume
	// accessible from "zone" "Z4" in the "region" "R1" and fall back to
	// "zone" "Z2" in the "region" "R1" if that is not possible. If that
	// is not possible, the SP may choose between either the "zone"
	// "Z3" or "Z5" in the "region" "R1".
	//
	// Example 3:
	// Given a volume should be accessible from TWO zones (because an
	// opaque parameter in CreateVolumeRequest, for example, specifies
	// the volume is accessible from two zones, aka synchronously
	// replicated), and
	// requisite =
	//
	//	{"region": "R1", "zone": "Z2"},
	//	{"region": "R1", "zone": "Z3"},
	//	{"region": "R1", "zone": "Z4"},
	//	{"region": "R1", "zone": "Z5"}
	//
	// preferred =
	//
	//	{"region": "R1", "zone": "Z5"},
	//	{"region": "R1", "zone": "Z3"}
	//
	// then the SP SHOULD first attempt to make the provisioned volume
	// accessible from the combination of the two "zones" "Z5" and "Z3" in
	// the "region" "R1". If that's not possible, it should fall back to
	// a combination of "Z5" and other possibilities from the list of
	// requisite. If that's not possible, it should fall back  to a
	// combination of "Z3" and other possibilities from the list of
	// requisite. If that's not possible, it should fall back  to a
	// combination of other possibilities from the list of requisite.
	Preferred            []*Topology `protobuf:"bytes,2,rep,name=preferred,proto3" json:"preferred,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TopologyRequirement) Reset()         { *m = TopologyRequirement{} }
func (m *TopologyRequirement) String() string { return proto.CompactTextString(m) }
func (*TopologyRequirement) ProtoMessage()    {}
func (*TopologyRequirement) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{13}
}

func (m *TopologyRequirement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopologyRequirement.Unmarshal(m, b)
}
func (m *TopologyRequirement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopologyRequirement.Marshal(b, m, deterministic)
}
func (m *TopologyRequirement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopologyRequirement.Merge(m, src)
}
func (m *TopologyRequirement) XXX_Size() int {
	return xxx_messageInfo_TopologyRequirement.Size(m)
}
func (m *TopologyRequirement) XXX_DiscardUnknown() {
	xxx_messageInfo_TopologyRequirement.DiscardUnknown(m)
}

var xxx_messageInfo_TopologyRequirement proto.InternalMessageInfo

func (m *TopologyRequirement) GetRequisite() []*Topology {
	if m != nil {
		return m.Requisite
	}
	return nil
}

func (m *TopologyRequirement) GetPreferred() []*Topology {
	if m != nil {
		return m.Preferred
	}
	return nil
}

// Topology is a map of topological domains to topological segments.
// A topological domain is a sub-division of a cluster, like "region",
// "zone", "rack", etc.
// A topological segment is a specific instance of a topological domain,
// like "zone3", "rack3", etc.
// For example {"com.company/zone": "Z1", "com.company/rack": "R3"}
// Valid keys have two segments: an OPTIONAL prefix and name, separated
// by a slash (/), for example: "com.company.example/zone".
// The key name segment is REQUIRED. The prefix is OPTIONAL.
// The key name MUST be 63 characters or less, begin and end with an
// alphanumeric character ([a-z0-9A-Z]), and contain only dashes (-),
// underscores (_), dots (.), or alphanumerics in between, for example
// "zone".
// The key prefix MUST be 63 characters or less, begin and end with a
// lower-case alphanumeric character ([a-z0-9]), contain only
// dashes (-), dots (.), or lower-case alphanumerics in between, and
// follow domain name notation format
// (https://tools.ietf.org/html/rfc1035#section-2.3.1).
// The key prefix SHOULD include the plugin's host company name and/or
// the plugin name, to minimize the possibility of collisions with keys
// from other plugins.
// If a key prefix is specified, it MUST be identical across all
// topology keys returned by the SP (across all RPCs).
// Keys MUST be case-insensitive. Meaning the keys "Zone" and "zone"
// MUST not both exist.
// Each value (topological segment) MUST contain 1 or more strings.
// Each string MUST be 63 characters or less and begin and end with an
// alphanumeric character with '-', '_', '.', or alphanumerics in
// between.
type Topology struct {
	Segments             map[string]string `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Topology) Reset()         { *m = Topology{} }
func (m *Topology) String() string { return proto.CompactTextString(m) }
func (*Topology) ProtoMessage()    {}
func (*Topology) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{14}
}

func (m *Topology) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Topology.Unmarshal(m, b)
}
func (m *Topology) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Topology.Marshal(b, m, deterministic)
}
func (m *Topology) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topology.Merge(m, src)
}
func (m *Topology) XXX_Size() int {
	return xxx_messageInfo_Topology.Size(m)
}
func (m *Topology) XXX_DiscardUnknown() {
	xxx_messageInfo_Topology.DiscardUnknown(m)
}

var xxx_messageInfo_Topology proto.InternalMessageInfo

func (m *Topology) GetSegments() map[string]string {
	if m != nil {
		return m.Segments
	}
	return nil
}

type DeleteVolumeRequest struct {
	// The ID of the volume to be deprovisioned.
	// This field is REQUIRED.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Secrets required by plugin to complete volume deletion request.
	// This field is OPTIONAL. Refer to the `Secrets Requirements`
	// section on how to use this field.
	Secrets              map[string]string `protobuf:"bytes,2,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DeleteVolumeRequest) Reset()         { *m = DeleteVolumeRequest{} }
func (m *DeleteVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteVolumeRequest) ProtoMessage()    {}
func (*DeleteVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{15}
}

func (m *DeleteVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteVolumeRequest.Unmarshal(m, b)
}
func (m *DeleteVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteVolumeRequest.Marshal(b, m, deterministic)
}
func (m *DeleteVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteVolumeRequest.Merge(m, src)
}
func (m *DeleteVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteVolumeRequest.Size(m)
}
func (m *DeleteVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteVolumeRequest proto.InternalMessageInfo

func (m *DeleteVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *DeleteVolumeRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

type DeleteVolumeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteVolumeResponse) Reset()         { *m = DeleteVolumeResponse{} }
func (m *DeleteVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteVolumeResponse) ProtoMessage()    {}
func (*DeleteVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{16}
}

func (m *DeleteVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteVolumeResponse.Unmarshal(m, b)
}
func (m *DeleteVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteVolumeResponse.Marshal(b, m, deterministic)
}
func (m *DeleteVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteVolumeResponse.Merge(m, src)
}
func (m *DeleteVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteVolumeResponse.Size(m)
}
func (m *DeleteVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteVolumeResponse proto.InternalMessageInfo

type ControllerPublishVolumeRequest struct {
	// The ID of the volume to be used on a node.
	// This field is REQUIRED.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// The ID of the node. This field is REQUIRED. The CO SHALL set this
	// field to match the node ID returned by `NodeGetInfo`.
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Volume capability describing how the CO intends to use this volume.
	// SP MUST ensure the CO can use the published volume as described.
	// Otherwise SP MUST return the appropriate gRPC error code.
	// This is a REQUIRED field.
	VolumeCapability *VolumeCapability `protobuf:"bytes,3,opt,name=volume_capability,json=volumeCapability,proto3" json:"volume_capability,omitempty"`
	// Indicates SP MUST publish the volume in readonly mode.
	// CO MUST set this field to false if SP does not have the
	// PUBLISH_READONLY controller capability.
	// This is a REQUIRED field.
	Readonly bool `protobuf:"varint,4,opt,name=readonly,proto3" json:"readonly,omitempty"`
	// Secrets required by plugin to complete controller publish volume
	// request. This field is OPTIONAL. Refer to the
	// `Secrets Requirements` section on how to use this field.
	Secrets map[string]string `protobuf:"bytes,5,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Volume context as returned by SP in
	// CreateVolumeResponse.Volume.volume_context.
	// This field is OPTIONAL and MUST match the volume_context of the
	// volume identified by `volume_id`.
	VolumeContext        map[string]string `protobuf:"bytes,6,rep,name=volume_context,json=volumeContext,proto3" json:"volume_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ControllerPublishVolumeRequest) Reset()         { *m = ControllerPublishVolumeRequest{} }
func (m *ControllerPublishVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*ControllerPublishVolumeRequest) ProtoMessage()    {}
func (*ControllerPublishVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{17}
}

func (m *ControllerPublishVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerPublishVolumeRequest.Unmarshal(m, b)
}
func (m *ControllerPublishVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerPublishVolumeRequest.Marshal(b, m, deterministic)
}
func (m *ControllerPublishVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerPublishVolumeRequest.Merge(m, src)
}
func (m *ControllerPublishVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_ControllerPublishVolumeRequest.Size(m)
}
func (m *ControllerPublishVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerPublishVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerPublishVolumeRequest proto.InternalMessageInfo

func (m *ControllerPublishVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *ControllerPublishVolumeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ControllerPublishVolumeRequest) GetVolumeCapability() *VolumeCapability {
	if m != nil {
		return m.VolumeCapability
	}
	return nil
}

func (m *ControllerPublishVolumeRequest) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

func (m *ControllerPublishVolumeRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *ControllerPublishVolumeRequest) GetVolumeContext() map[string]string {
	if m != nil {
		return m.VolumeContext
	}
	return nil
}

type ControllerPublishVolumeResponse struct {
	// Opaque static publish properties of the volume. SP MAY use this
	// field to ensure subsequent `NodeStageVolume` or `NodePublishVolume`
	// calls calls have contextual information.
	// The contents of this field SHALL be opaque to a CO.
	// The contents of this field SHALL NOT be mutable.
	// The contents of this field SHALL be safe for the CO to cache.
	// The contents of this field SHOULD NOT contain sensitive
	// information.
	// The contents of this field SHOULD NOT be used for uniquely
	// identifying a volume. The `volume_id` alone SHOULD be sufficient to
	// identify the volume.
	// This field is OPTIONAL and when present MUST be passed to
	// subsequent `NodeStageVolume` or `NodePublishVolume` calls
	PublishContext       map[string]string `protobuf:"bytes,1,rep,name=publish_context,json=publishContext,proto3" json:"publish_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ControllerPublishVolumeResponse) Reset()         { *m = ControllerPublishVolumeResponse{} }
func (m *ControllerPublishVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*ControllerPublishVolumeResponse) ProtoMessage()    {}
func (*ControllerPublishVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{18}
}

func (m *ControllerPublishVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerPublishVolumeResponse.Unmarshal(m, b)
}
func (m *ControllerPublishVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerPublishVolumeResponse.Marshal(b, m, deterministic)
}
func (m *ControllerPublishVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerPublishVolumeResponse.Merge(m, src)
}
func (m *ControllerPublishVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_ControllerPublishVolumeResponse.Size(m)
}
func (m *ControllerPublishVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerPublishVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerPublishVolumeResponse proto.InternalMessageInfo

func (m *ControllerPublishVolumeResponse) GetPublishContext() map[string]string {
	if m != nil {
		return m.PublishContext
	}
	return nil
}

type ControllerUnpublishVolumeRequest struct {
	// The ID of the volume. This field is REQUIRED.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// The ID of the node. This field is OPTIONAL. The CO SHOULD set this
	// field to match the node ID returned by `NodeGetInfo` or leave it
	// unset. If the value is set, the SP MUST unpublish the volume from
	// the specified node. If the value is unset, the SP MUST unpublish
	// the volume from all nodes it is published to.
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Secrets required by plugin to complete controller unpublish volume
	// request. This SHOULD be the same secrets passed to the
	// ControllerPublishVolume call for the specified volume.
	// This field is OPTIONAL. Refer to the `Secrets Requirements`
	// section on how to use this field.
	Secrets              map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ControllerUnpublishVolumeRequest) Reset()         { *m = ControllerUnpublishVolumeRequest{} }
func (m *ControllerUnpublishVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*ControllerUnpublishVolumeRequest) ProtoMessage()    {}
func (*ControllerUnpublishVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{19}
}

func (m *ControllerUnpublishVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerUnpublishVolumeRequest.Unmarshal(m, b)
}
func (m *ControllerUnpublishVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerUnpublishVolumeRequest.Marshal(b, m, deterministic)
}
func (m *ControllerUnpublishVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerUnpublishVolumeRequest.Merge(m, src)
}
func (m *ControllerUnpublishVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_ControllerUnpublishVolumeRequest.Size(m)
}
func (m *ControllerUnpublishVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerUnpublishVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerUnpublishVolumeRequest proto.InternalMessageInfo

func (m *ControllerUnpublishVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *ControllerUnpublishVolumeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ControllerUnpublishVolumeRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

type ControllerUnpublishVolumeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControllerUnpublishVolumeResponse) Reset()         { *m = ControllerUnpublishVolumeResponse{} }
func (m *ControllerUnpublishVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*ControllerUnpublishVolumeResponse) ProtoMessage()    {}
func (*ControllerUnpublishVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{20}
}

func (m *ControllerUnpublishVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerUnpublishVolumeResponse.Unmarshal(m, b)
}
func (m *ControllerUnpublishVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerUnpublishVolumeResponse.Marshal(b, m, deterministic)
}
func (m *ControllerUnpublishVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerUnpublishVolumeResponse.Merge(m, src)
}
func (m *ControllerUnpublishVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_ControllerUnpublishVolumeResponse.Size(m)
}
func (m *ControllerUnpublishVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerUnpublishVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerUnpublishVolumeResponse proto.InternalMessageInfo

type ValidateVolumeCapabilitiesRequest struct {
	// The ID of the volume to check. This field is REQUIRED.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Volume context as returned by SP in
	// CreateVolumeResponse.Volume.volume_context.
	// This field is OPTIONAL and MUST match the volume_context of the
	// volume identified by `volume_id`.
	VolumeContext map[string]string `protobuf:"bytes,2,rep,name=volume_context,json=volumeContext,proto3" json:"volume_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The capabilities that the CO wants to check for the volume. This
	// call SHALL return "confirmed" only if all the volume capabilities
	// specified below are supported. This field is REQUIRED.
	VolumeCapabilities []*VolumeCapability `protobuf:"bytes,3,rep,name=volume_capabilities,json=volumeCapabilities,proto3" json:"volume_capabilities,omitempty"`
	// See CreateVolumeRequest.parameters.
	// This field is OPTIONAL.
	Parameters map[string]string `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Secrets required by plugin to complete volume validation request.
	// This field is OPTIONAL. Refer to the `Secrets Requirements`
	// section on how to use this field.
	Secrets map[string]string `protobuf:"bytes,5,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// See CreateVolumeRequest.mutable_parameters.
	// This field is OPTIONAL.
	MutableParameters    map[string]string `protobuf:"bytes,6,rep,name=mutable_parameters,json=mutableParameters,proto3" json:"mutable_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ValidateVolumeCapabilitiesRequest) Reset()         { *m = ValidateVolumeCapabilitiesRequest{} }
func (m *ValidateVolumeCapabilitiesRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateVolumeCapabilitiesRequest) ProtoMessage()    {}
func (*ValidateVolumeCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{21}
}

func (m *ValidateVolumeCapabilitiesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateVolumeCapabilitiesRequest.Unmarshal(m, b)
}
func (m *ValidateVolumeCapabilitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateVolumeCapabilitiesRequest.Marshal(b, m, deterministic)
}
func (m *ValidateVolumeCapabilitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateVolumeCapabilitiesRequest.Merge(m, src)
}
func (m *ValidateVolumeCapabilitiesRequest) XXX_Size() int {
	return xxx_messageInfo_ValidateVolumeCapabilitiesRequest.Size(m)
}
func (m *ValidateVolumeCapabilitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateVolumeCapabilitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateVolumeCapabilitiesRequest proto.InternalMessageInfo

func (m *ValidateVolumeCapabilitiesRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *ValidateVolumeCapabilitiesRequest) GetVolumeContext() map[string]string {
	if m != nil {
		return m.VolumeContext
	}
	return nil
}

func (m *ValidateVolumeCapabilitiesRequest) GetVolumeCapabilities() []*VolumeCapability {
	if m != nil {
		return m.VolumeCapabilities
	}
	return nil
}

func (m *ValidateVolumeCapabilitiesRequest) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *ValidateVolumeCapabilitiesRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *ValidateVolumeCapabilitiesRequest) GetMutableParameters() map[string]string {
	if m != nil {
		return m.MutableParameters
	}
	return nil
}

type ValidateVolumeCapabilitiesResponse struct {
	// Confirmed indicates to the CO the set of capabilities that the
	// plugin has validated. This field SHALL only be set to a non-empty
	// value for successful validation responses.
	// For successful validation responses, the CO SHALL compare the
	// fields of this message to the originally requested capabilities in
	// order to guard against an older plugin reporting "valid" for newer
	// capability fields that it does not yet understand.
	// This field is OPTIONAL.
	Confirmed *ValidateVolumeCapabilitiesResponse_Confirmed `protobuf:"bytes,1,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Message to the CO if `confirmed` above is empty. This field is
	// OPTIONAL.
	// An empty string is equal to an unspecified field value.
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateVolumeCapabilitiesResponse) Reset()         { *m = ValidateVolumeCapabilitiesResponse{} }
func (m *ValidateVolumeCapabilitiesResponse) String() string { return proto.CompactTextString(m) }
func (*ValidateVolumeCapabilitiesResponse) ProtoMessage()    {}
func (*ValidateVolumeCapabilitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{22}
}

func (m *ValidateVolumeCapabilitiesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateVolumeCapabilitiesResponse.Unmarshal(m, b)
}
func (m *ValidateVolumeCapabilitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateVolumeCapabilitiesResponse.Marshal(b, m, deterministic)
}
func (m *ValidateVolumeCapabilitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateVolumeCapabilitiesResponse.Merge(m, src)
}
func (m *ValidateVolumeCapabilitiesResponse) XXX_Size() int {
	return xxx_messageInfo_ValidateVolumeCapabilitiesResponse.Size(m)
}
func (m *ValidateVolumeCapabilitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateVolumeCapabilitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateVolumeCapabilitiesResponse proto.InternalMessageInfo

func (m *ValidateVolumeCapabilitiesResponse) GetConfirmed() *ValidateVolumeCapabilitiesResponse_Confirmed {
	if m != nil {
		return m.Confirmed
	}
	return nil
}

func (m *ValidateVolumeCapabilitiesResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ValidateVolumeCapabilitiesResponse_Confirmed struct {
	// Volume context validated by the plugin.
	// This field is OPTIONAL.
	VolumeContext map[string]string `protobuf:"bytes,1,rep,name=volume_context,json=volumeContext,proto3" json:"volume_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Volume capabilities supported by the plugin.
	// This field is REQUIRED.
	VolumeCapabilities []*VolumeCapability `protobuf:"bytes,2,rep,name=volume_capabilities,json=volumeCapabilities,proto3" json:"volume_capabilities,omitempty"`
	// The volume creation parameters validated by the plugin.
	// This field is OPTIONAL.
	Parameters map[string]string `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The volume creation mutable_parameters validated by the plugin.
	// This field is OPTIONAL.
	MutableParameters    map[string]string `protobuf:"bytes,4,rep,name=mutable_parameters,json=mutableParameters,proto3" json:"mutable_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ValidateVolumeCapabilitiesResponse_Confirmed) Reset() {
	*m = ValidateVolumeCapabilitiesResponse_Confirmed{}
}
func (m *ValidateVolumeCapabilitiesResponse_Confirmed) String() string {
	return proto.CompactTextString(m)
}
func (*ValidateVolumeCapabilitiesResponse_Confirmed) ProtoMessage() {}
func (*ValidateVolumeCapabilitiesResponse_Confirmed) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{22, 0}
}

func (m *ValidateVolumeCapabilitiesResponse_Confirmed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateVolumeCapabilitiesResponse_Confirmed.Unmarshal(m, b)
}
func (m *ValidateVolumeCapabilitiesResponse_Confirmed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateVolumeCapabilitiesResponse_Confirmed.Marshal(b, m, deterministic)
}
func (m *ValidateVolumeCapabilitiesResponse_Confirmed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateVolumeCapabilitiesResponse_Confirmed.Merge(m, src)
}
func (m *ValidateVolumeCapabilitiesResponse_Confirmed) XXX_Size() int {
	return xxx_messageInfo_ValidateVolumeCapabilitiesResponse_Confirmed.Size(m)
}
func (m *ValidateVolumeCapabilitiesResponse_Confirmed) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateVolumeCapabilitiesResponse_Confirmed.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateVolumeCapabilitiesResponse_Confirmed proto.InternalMessageInfo

func (m *ValidateVolumeCapabilitiesResponse_Confirmed) GetVolumeContext() map[string]string {
	if m != nil {
		return m.VolumeContext
	}
	return nil
}

func (m *ValidateVolumeCapabilitiesResponse_Confirmed) GetVolumeCapabilities() []*VolumeCapability {
	if m != nil {
		return m.VolumeCapabilities
	}
	return nil
}

func (m *ValidateVolumeCapabilitiesResponse_Confirmed) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *ValidateVolumeCapabilitiesResponse_Confirmed) GetMutableParameters() map[string]string {
	if m != nil {
		return m.MutableParameters
	}
	return nil
}

type ListVolumesRequest struct {
	// If specified (non-zero value), the Plugin MUST NOT return more
	// entries than this number in the response. If the actual number of
	// entries is more than this number, the Plugin MUST set `next_token`
	// in the response which can be used to get the next page of entries
	// in the subsequent `ListVolumes` call. This field is OPTIONAL. If
	// not specified (zero value), it means there is no restriction on the
	// number of entries that can be returned.
	// The value of this field MUST NOT be negative.
	MaxEntries int32 `protobuf:"varint,1,opt,name=max_entries,json=maxEntries,proto3" json:"max_entries,omitempty"`
	// A token to specify where to start paginating. Set this field to
	// `next_token` returned by a previous `ListVolumes` call to get the
	// next page of entries. This field is OPTIONAL.
	// An empty string is equal to an unspecified field value.
	StartingToken        string   `protobuf:"bytes,2,opt,name=starting_token,json=startingToken,proto3" json:"starting_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListVolumesRequest) Reset()         { *m = ListVolumesRequest{} }
func (m *ListVolumesRequest) String() string { return proto.CompactTextString(m) }
func (*ListVolumesRequest) ProtoMessage()    {}
func (*ListVolumesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{23}
}

func (m *ListVolumesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVolumesRequest.Unmarshal(m, b)
}
func (m *ListVolumesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVolumesRequest.Marshal(b, m, deterministic)
}
func (m *ListVolumesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVolumesRequest.Merge(m, src)
}
func (m *ListVolumesRequest) XXX_Size() int {
	return xxx_messageInfo_ListVolumesRequest.Size(m)
}
func (m *ListVolumesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVolumesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListVolumesRequest proto.InternalMessageInfo

func (m *ListVolumesRequest) GetMaxEntries() int32 {
	if m != nil {
		return m.MaxEntries
	}
	return 0
}

func (m *ListVolumesRequest) GetStartingToken() string {
	if m != nil {
		return m.StartingToken
	}
	return ""
}

type ListVolumesResponse struct {
	Entries []*ListVolumesResponse_Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	// This token allows you to get the next page of entries for
	// `ListVolumes` request. If the number of entries is larger than
	// `max_entries`, use the `next_token` as a value for the
	// `starting_token` field in the next `ListVolumes` request. This
	// field is OPTIONAL.
	// An empty string is equal to an unspecified field value.
	NextToken            string   `protobuf:"bytes,2,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListVolumesResponse) Reset()         { *m = ListVolumesResponse{} }
func (m *ListVolumesResponse) String() string { return proto.CompactTextString(m) }
func (*ListVolumesResponse) ProtoMessage()    {}
func (*ListVolumesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{24}
}

func (m *ListVolumesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVolumesResponse.Unmarshal(m, b)
}
func (m *ListVolumesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVolumesResponse.Marshal(b, m, deterministic)
}
func (m *ListVolumesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVolumesResponse.Merge(m, src)
}
func (m *ListVolumesResponse) XXX_Size() int {
	return xxx_messageInfo_ListVolumesResponse.Size(m)
}
func (m *ListVolumesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVolumesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListVolumesResponse proto.InternalMessageInfo

func (m *ListVolumesResponse) GetEntries() []*ListVolumesResponse_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *ListVolumesResponse) GetNextToken() string {
	if m != nil {
		return m.NextToken
	}
	return ""
}

type ListVolumesResponse_VolumeStatus struct {
	// A list of all `node_id` of nodes that the volume in this entry
	// is controller published on.
	// This field is OPTIONAL. If it is not specified and the SP has
	// the LIST_VOLUMES_PUBLISHED_NODES controller capability, the CO
	// MAY assume the volume is not controller published to any nodes.
	// If the field is not specified and the SP does not have the
	// LIST_VOLUMES_PUBLISHED_NODES controller capability, the CO MUST
	// not interpret this field.
	// published_node_ids MAY include nodes not published to or
	// reported by the SP. The CO MUST be resilient to that.
	PublishedNodeIds []string `protobuf:"bytes,1,rep,name=published_node_ids,json=publishedNodeIds,proto3" json:"published_node_ids,omitempty"`
	// Information about the current condition of the volume.
	// This field is OPTIONAL.
	// This field MUST be specified if the
	// VOLUME_CONDITION controller capability is supported.
	VolumeCondition      *VolumeCondition `protobuf:"bytes,2,opt,name=volume_condition,json=volumeCondition,proto3" json:"volume_condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListVolumesResponse_VolumeStatus) Reset()         { *m = ListVolumesResponse_VolumeStatus{} }
func (m *ListVolumesResponse_VolumeStatus) String() string { return proto.CompactTextString(m) }
func (*ListVolumesResponse_VolumeStatus) ProtoMessage()    {}
func (*ListVolumesResponse_VolumeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{24, 0}
}

func (m *ListVolumesResponse_VolumeStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVolumesResponse_VolumeStatus.Unmarshal(m, b)
}
func (m *ListVolumesResponse_VolumeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVolumesResponse_VolumeStatus.Marshal(b, m, deterministic)
}
func (m *ListVolumesResponse_VolumeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVolumesResponse_VolumeStatus.Merge(m, src)
}
func (m *ListVolumesResponse_VolumeStatus) XXX_Size() int {
	return xxx_messageInfo_ListVolumesResponse_VolumeStatus.Size(m)
}
func (m *ListVolumesResponse_VolumeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVolumesResponse_VolumeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ListVolumesResponse_VolumeStatus proto.InternalMessageInfo

func (m *ListVolumesResponse_VolumeStatus) GetPublishedNodeIds() []string {
	if m != nil {
		return m.PublishedNodeIds
	}
	return nil
}

func (m *ListVolumesResponse_VolumeStatus) GetVolumeCondition() *VolumeCondition {
	if m != nil {
		return m.VolumeCondition
	}
	return nil
}

type ListVolumesResponse_Entry struct {
	// This field is REQUIRED
	Volume *Volume `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
	// This field is OPTIONAL. This field MUST be specified if the
	// LIST_VOLUMES_PUBLISHED_NODES controller capability is
	// supported.
	Status               *ListVolumesResponse_VolumeStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ListVolumesResponse_Entry) Reset()         { *m = ListVolumesResponse_Entry{} }
func (m *ListVolumesResponse_Entry) String() string { return proto.CompactTextString(m) }
func (*ListVolumesResponse_Entry) ProtoMessage()    {}
func (*ListVolumesResponse_Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{24, 1}
}

func (m *ListVolumesResponse_Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListVolumesResponse_Entry.Unmarshal(m, b)
}
func (m *ListVolumesResponse_Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListVolumesResponse_Entry.Marshal(b, m, deterministic)
}
func (m *ListVolumesResponse_Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListVolumesResponse_Entry.Merge(m, src)
}
func (m *ListVolumesResponse_Entry) XXX_Size() int {
	return xxx_messageInfo_ListVolumesResponse_Entry.Size(m)
}
func (m *ListVolumesResponse_Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_ListVolumesResponse_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_ListVolumesResponse_Entry proto.InternalMessageInfo

func (m *ListVolumesResponse_Entry) GetVolume() *Volume {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *ListVolumesResponse_Entry) GetStatus() *ListVolumesResponse_VolumeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type ControllerGetVolumeRequest struct {
	// The ID of the volume to fetch current volume information for.
	// This field is REQUIRED.
	VolumeId             string   `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControllerGetVolumeRequest) Reset()         { *m = ControllerGetVolumeRequest{} }
func (m *ControllerGetVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*ControllerGetVolumeRequest) ProtoMessage()    {}
func (*ControllerGetVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{25}
}

func (m *ControllerGetVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerGetVolumeRequest.Unmarshal(m, b)
}
func (m *ControllerGetVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerGetVolumeRequest.Marshal(b, m, deterministic)
}
func (m *ControllerGetVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerGetVolumeRequest.Merge(m, src)
}
func (m *ControllerGetVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_ControllerGetVolumeRequest.Size(m)
}
func (m *ControllerGetVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerGetVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerGetVolumeRequest proto.InternalMessageInfo

func (m *ControllerGetVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

type ControllerGetVolumeResponse struct {
	// This field is REQUIRED
	Volume *Volume `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
	// This field is REQUIRED.
	Status               *ControllerGetVolumeResponse_VolumeStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *ControllerGetVolumeResponse) Reset()         { *m = ControllerGetVolumeResponse{} }
func (m *ControllerGetVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*ControllerGetVolumeResponse) ProtoMessage()    {}
func (*ControllerGetVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{26}
}

func (m *ControllerGetVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerGetVolumeResponse.Unmarshal(m, b)
}
func (m *ControllerGetVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerGetVolumeResponse.Marshal(b, m, deterministic)
}
func (m *ControllerGetVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerGetVolumeResponse.Merge(m, src)
}
func (m *ControllerGetVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_ControllerGetVolumeResponse.Size(m)
}
func (m *ControllerGetVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerGetVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerGetVolumeResponse proto.InternalMessageInfo

func (m *ControllerGetVolumeResponse) GetVolume() *Volume {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *ControllerGetVolumeResponse) GetStatus() *ControllerGetVolumeResponse_VolumeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type ControllerGetVolumeResponse_VolumeStatus struct {
	// A list of all the `node_id` of nodes that this volume is
	// controller published on.
	// This field is OPTIONAL.
	// This field MUST be specified if the LIST_VOLUMES_PUBLISHED_NODES
	// controller capability is supported.
	// published_node_ids MAY include nodes not published to or
	// reported by the SP. The CO MUST be resilient to that.
	PublishedNodeIds []string `protobuf:"bytes,1,rep,name=published_node_ids,json=publishedNodeIds,proto3" json:"published_node_ids,omitempty"`
	// Information about the current condition of the volume.
	// This field is OPTIONAL.
	// This field MUST be specified if the
	// VOLUME_CONDITION controller capability is supported.
	VolumeCondition      *VolumeCondition `protobuf:"bytes,2,opt,name=volume_condition,json=volumeCondition,proto3" json:"volume_condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ControllerGetVolumeResponse_VolumeStatus) Reset() {
	*m = ControllerGetVolumeResponse_VolumeStatus{}
}
func (m *ControllerGetVolumeResponse_VolumeStatus) String() string { return proto.CompactTextString(m) }
func (*ControllerGetVolumeResponse_VolumeStatus) ProtoMessage()    {}
func (*ControllerGetVolumeResponse_VolumeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{26, 0}
}

func (m *ControllerGetVolumeResponse_VolumeStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerGetVolumeResponse_VolumeStatus.Unmarshal(m, b)
}
func (m *ControllerGetVolumeResponse_VolumeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerGetVolumeResponse_VolumeStatus.Marshal(b, m, deterministic)
}
func (m *ControllerGetVolumeResponse_VolumeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerGetVolumeResponse_VolumeStatus.Merge(m, src)
}
func (m *ControllerGetVolumeResponse_VolumeStatus) XXX_Size() int {
	return xxx_messageInfo_ControllerGetVolumeResponse_VolumeStatus.Size(m)
}
func (m *ControllerGetVolumeResponse_VolumeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerGetVolumeResponse_VolumeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerGetVolumeResponse_VolumeStatus proto.InternalMessageInfo

func (m *ControllerGetVolumeResponse_VolumeStatus) GetPublishedNodeIds() []string {
	if m != nil {
		return m.PublishedNodeIds
	}
	return nil
}

func (m *ControllerGetVolumeResponse_VolumeStatus) GetVolumeCondition() *VolumeCondition {
	if m != nil {
		return m.VolumeCondition
	}
	return nil
}

type ControllerModifyVolumeRequest struct {
	// Contains identity information for the existing volume.
	// This field is REQUIRED.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Secrets required by plugin to complete modify volume request.
	// This field is OPTIONAL. Refer to the `Secrets Requirements`
	// section on how to use this field.
	Secrets map[string]string `protobuf:"bytes,2,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Plugin specific volume attributes to mutate, passed in as
	// opaque key-value pairs.
	// This field is REQUIRED. The Plugin is responsible for
	// parsing and validating these parameters. COs will treat these
	// as opaque. The CO SHOULD specify the intended values of all mutable
	// parameters it intends to modify. SPs MUST NOT modify volumes based
	// on the absence of keys, only keys that are specified should result
	// in modifications to the volume.
	MutableParameters    map[string]string `protobuf:"bytes,3,rep,name=mutable_parameters,json=mutableParameters,proto3" json:"mutable_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ControllerModifyVolumeRequest) Reset()         { *m = ControllerModifyVolumeRequest{} }
func (m *ControllerModifyVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*ControllerModifyVolumeRequest) ProtoMessage()    {}
func (*ControllerModifyVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{27}
}

func (m *ControllerModifyVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerModifyVolumeRequest.Unmarshal(m, b)
}
func (m *ControllerModifyVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerModifyVolumeRequest.Marshal(b, m, deterministic)
}
func (m *ControllerModifyVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerModifyVolumeRequest.Merge(m, src)
}
func (m *ControllerModifyVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_ControllerModifyVolumeRequest.Size(m)
}
func (m *ControllerModifyVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerModifyVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerModifyVolumeRequest proto.InternalMessageInfo

func (m *ControllerModifyVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *ControllerModifyVolumeRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *ControllerModifyVolumeRequest) GetMutableParameters() map[string]string {
	if m != nil {
		return m.MutableParameters
	}
	return nil
}

type ControllerModifyVolumeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControllerModifyVolumeResponse) Reset()         { *m = ControllerModifyVolumeResponse{} }
func (m *ControllerModifyVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*ControllerModifyVolumeResponse) ProtoMessage()    {}
func (*ControllerModifyVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{28}
}

func (m *ControllerModifyVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerModifyVolumeResponse.Unmarshal(m, b)
}
func (m *ControllerModifyVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerModifyVolumeResponse.Marshal(b, m, deterministic)
}
func (m *ControllerModifyVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerModifyVolumeResponse.Merge(m, src)
}
func (m *ControllerModifyVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_ControllerModifyVolumeResponse.Size(m)
}
func (m *ControllerModifyVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerModifyVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerModifyVolumeResponse proto.InternalMessageInfo

type GetCapacityRequest struct {
	// If specified, the Plugin SHALL report the capacity of the storage
	// that can be used to provision volumes that satisfy ALL of the
	// specified `volume_capabilities`. These are the same
	// `volume_capabilities` the CO will use in `CreateVolumeRequest`.
	// This field is OPTIONAL.
	VolumeCapabilities []*VolumeCapability `protobuf:"bytes,1,rep,name=volume_capabilities,json=volumeCapabilities,proto3" json:"volume_capabilities,omitempty"`
	// If specified, the Plugin SHALL report the capacity of the storage
	// that can be used to provision volumes with the given Plugin
	// specific `parameters`. These are the same `parameters` the CO will
	// use in `CreateVolumeRequest`. This field is OPTIONAL.
	Parameters map[string]string `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If specified, the Plugin SHALL report the capacity of the storage
	// that can be used to provision volumes that in the specified
	// `accessible_topology`. This is the same as the
	// `accessible_topology` the CO returns in a `CreateVolumeResponse`.
	// This field is OPTIONAL. This field SHALL NOT be set unless the
	// plugin advertises the VOLUME_ACCESSIBILITY_CONSTRAINTS capability.
	AccessibleTopology   *Topology `protobuf:"bytes,3,opt,name=accessible_topology,json=accessibleTopology,proto3" json:"accessible_topology,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetCapacityRequest) Reset()         { *m = GetCapacityRequest{} }
func (m *GetCapacityRequest) String() string { return proto.CompactTextString(m) }
func (*GetCapacityRequest) ProtoMessage()    {}
func (*GetCapacityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{29}
}

func (m *GetCapacityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCapacityRequest.Unmarshal(m, b)
}
func (m *GetCapacityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCapacityRequest.Marshal(b, m, deterministic)
}
func (m *GetCapacityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCapacityRequest.Merge(m, src)
}
func (m *GetCapacityRequest) XXX_Size() int {
	return xxx_messageInfo_GetCapacityRequest.Size(m)
}
func (m *GetCapacityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCapacityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCapacityRequest proto.InternalMessageInfo

func (m *GetCapacityRequest) GetVolumeCapabilities() []*VolumeCapability {
	if m != nil {
		return m.VolumeCapabilities
	}
	return nil
}

func (m *GetCapacityRequest) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *GetCapacityRequest) GetAccessibleTopology() *Topology {
	if m != nil {
		return m.AccessibleTopology
	}
	return nil
}

type GetCapacityResponse struct {
	// The available capacity, in bytes, of the storage that can be used
	// to provision volumes. If `volume_capabilities` or `parameters` is
	// specified in the request, the Plugin SHALL take those into
	// consideration when calculating the available capacity of the
	// storage. This field is REQUIRED.
	// The value of this field MUST NOT be negative.
	AvailableCapacity int64 `protobuf:"varint,1,opt,name=available_capacity,json=availableCapacity,proto3" json:"available_capacity,omitempty"`
	// The largest size that may be used in a
	// CreateVolumeRequest.capacity_range.required_bytes field
	// to create a volume with the same parameters as those in
	// GetCapacityRequest.
	//
	// If `volume_capabilities` or `parameters` is
	// specified in the request, the Plugin SHALL take those into
	// consideration when calculating the minimum volume size of the
	// storage.
	//
	// This field is OPTIONAL. MUST NOT be negative.
	// The Plugin SHOULD provide a value for this field if it has
	// a maximum size for individual volumes and leave it unset
	// otherwise. COs MAY use it to make decision about
	// where to create volumes.
	MaximumVolumeSize *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=maximum_volume_size,json=maximumVolumeSize,proto3" json:"maximum_volume_size,omitempty"`
	// The smallest size that may be used in a
	// CreateVolumeRequest.capacity_range.limit_bytes field
	// to create a volume with the same parameters as those in
	// GetCapacityRequest.
	//
	// If `volume_capabilities` or `parameters` is
	// specified in the request, the Plugin SHALL take those into
	// consideration when calculating the maximum volume size of the
	// storage.
	//
	// This field is OPTIONAL. MUST NOT be negative.
	// The Plugin SHOULD provide a value for this field if it has
	// a minimum size for individual volumes and leave it unset
	// otherwise. COs MAY use it to make decision about
	// where to create volumes.
	MinimumVolumeSize    *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=minimum_volume_size,json=minimumVolumeSize,proto3" json:"minimum_volume_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GetCapacityResponse) Reset()         { *m = GetCapacityResponse{} }
func (m *GetCapacityResponse) String() string { return proto.CompactTextString(m) }
func (*GetCapacityResponse) ProtoMessage()    {}
func (*GetCapacityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{30}
}

func (m *GetCapacityResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCapacityResponse.Unmarshal(m, b)
}
func (m *GetCapacityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCapacityResponse.Marshal(b, m, deterministic)
}
func (m *GetCapacityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCapacityResponse.Merge(m, src)
}
func (m *GetCapacityResponse) XXX_Size() int {
	return xxx_messageInfo_GetCapacityResponse.Size(m)
}
func (m *GetCapacityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCapacityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCapacityResponse proto.InternalMessageInfo

func (m *GetCapacityResponse) GetAvailableCapacity() int64 {
	if m != nil {
		return m.AvailableCapacity
	}
	return 0
}

func (m *GetCapacityResponse) GetMaximumVolumeSize() *wrapperspb.Int64Value {
	if m != nil {
		return m.MaximumVolumeSize
	}
	return nil
}

func (m *GetCapacityResponse) GetMinimumVolumeSize() *wrapperspb.Int64Value {
	if m != nil {
		return m.MinimumVolumeSize
	}
	return nil
}

type ControllerGetCapabilitiesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControllerGetCapabilitiesRequest) Reset()         { *m = ControllerGetCapabilitiesRequest{} }
func (m *ControllerGetCapabilitiesRequest) String() string { return proto.CompactTextString(m) }
func (*ControllerGetCapabilitiesRequest) ProtoMessage()    {}
func (*ControllerGetCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{31}
}

func (m *ControllerGetCapabilitiesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerGetCapabilitiesRequest.Unmarshal(m, b)
}
func (m *ControllerGetCapabilitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerGetCapabilitiesRequest.Marshal(b, m, deterministic)
}
func (m *ControllerGetCapabilitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerGetCapabilitiesRequest.Merge(m, src)
}
func (m *ControllerGetCapabilitiesRequest) XXX_Size() int {
	return xxx_messageInfo_ControllerGetCapabilitiesRequest.Size(m)
}
func (m *ControllerGetCapabilitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerGetCapabilitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerGetCapabilitiesRequest proto.InternalMessageInfo

type ControllerGetCapabilitiesResponse struct {
	// All the capabilities that the controller service supports. This
	// field is OPTIONAL.
	Capabilities         []*ControllerServiceCapability `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ControllerGetCapabilitiesResponse) Reset()         { *m = ControllerGetCapabilitiesResponse{} }
func (m *ControllerGetCapabilitiesResponse) String() string { return proto.CompactTextString(m) }
func (*ControllerGetCapabilitiesResponse) ProtoMessage()    {}
func (*ControllerGetCapabilitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{32}
}

func (m *ControllerGetCapabilitiesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerGetCapabilitiesResponse.Unmarshal(m, b)
}
func (m *ControllerGetCapabilitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerGetCapabilitiesResponse.Marshal(b, m, deterministic)
}
func (m *ControllerGetCapabilitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerGetCapabilitiesResponse.Merge(m, src)
}
func (m *ControllerGetCapabilitiesResponse) XXX_Size() int {
	return xxx_messageInfo_ControllerGetCapabilitiesResponse.Size(m)
}
func (m *ControllerGetCapabilitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerGetCapabilitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerGetCapabilitiesResponse proto.InternalMessageInfo

func (m *ControllerGetCapabilitiesResponse) GetCapabilities() []*ControllerServiceCapability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

// Specifies a capability of the controller service.
type ControllerServiceCapability struct {
	// Types that are valid to be assigned to Type:
	//
	//	*ControllerServiceCapability_Rpc
	Type                 isControllerServiceCapability_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *ControllerServiceCapability) Reset()         { *m = ControllerServiceCapability{} }
func (m *ControllerServiceCapability) String() string { return proto.CompactTextString(m) }
func (*ControllerServiceCapability) ProtoMessage()    {}
func (*ControllerServiceCapability) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{33}
}

func (m *ControllerServiceCapability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerServiceCapability.Unmarshal(m, b)
}
func (m *ControllerServiceCapability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerServiceCapability.Marshal(b, m, deterministic)
}
func (m *ControllerServiceCapability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerServiceCapability.Merge(m, src)
}
func (m *ControllerServiceCapability) XXX_Size() int {
	return xxx_messageInfo_ControllerServiceCapability.Size(m)
}
func (m *ControllerServiceCapability) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerServiceCapability.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerServiceCapability proto.InternalMessageInfo

type isControllerServiceCapability_Type interface {
	isControllerServiceCapability_Type()
}

type ControllerServiceCapability_Rpc struct {
	Rpc *ControllerServiceCapability_RPC `protobuf:"bytes,1,opt,name=rpc,proto3,oneof"`
}

func (*ControllerServiceCapability_Rpc) isControllerServiceCapability_Type() {}

func (m *ControllerServiceCapability) GetType() isControllerServiceCapability_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ControllerServiceCapability) GetRpc() *ControllerServiceCapability_RPC {
	if x, ok := m.GetType().(*ControllerServiceCapability_Rpc); ok {
		return x.Rpc
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ControllerServiceCapability) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ControllerServiceCapability_Rpc)(nil),
	}
}

type ControllerServiceCapability_RPC struct {
	Type                 ControllerServiceCapability_RPC_Type `protobuf:"varint,1,opt,name=type,proto3,enum=csi.v1.ControllerServiceCapability_RPC_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ControllerServiceCapability_RPC) Reset()         { *m = ControllerServiceCapability_RPC{} }
func (m *ControllerServiceCapability_RPC) String() string { return proto.CompactTextString(m) }
func (*ControllerServiceCapability_RPC) ProtoMessage()    {}
func (*ControllerServiceCapability_RPC) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{33, 0}
}

func (m *ControllerServiceCapability_RPC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerServiceCapability_RPC.Unmarshal(m, b)
}
func (m *ControllerServiceCapability_RPC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerServiceCapability_RPC.Marshal(b, m, deterministic)
}
func (m *ControllerServiceCapability_RPC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerServiceCapability_RPC.Merge(m, src)
}
func (m *ControllerServiceCapability_RPC) XXX_Size() int {
	return xxx_messageInfo_ControllerServiceCapability_RPC.Size(m)
}
func (m *ControllerServiceCapability_RPC) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerServiceCapability_RPC.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerServiceCapability_RPC proto.InternalMessageInfo

func (m *ControllerServiceCapability_RPC) GetType() ControllerServiceCapability_RPC_Type {
	if m != nil {
		return m.Type
	}
	return ControllerServiceCapability_RPC_UNKNOWN
}

type CreateSnapshotRequest struct {
	// The ID of the source volume to be snapshotted.
	// This field is REQUIRED.
	SourceVolumeId string `protobuf:"bytes,1,opt,name=source_volume_id,json=sourceVolumeId,proto3" json:"source_volume_id,omitempty"`
	// The suggested name for the snapshot. This field is REQUIRED for
	// idempotency.
	// Any Unicode string that conforms to the length limit is allowed
	// except those containing the following banned characters:
	// U+0000-U+0008, U+000B, U+000C, U+000E-U+001F, U+007F-U+009F.
	// (These are control characters other than commonly used whitespace.)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Secrets required by plugin to complete snapshot creation request.
	// This field is OPTIONAL. Refer to the `Secrets Requirements`
	// section on how to use this field.
	Secrets map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Plugin specific parameters passed in as opaque key-value pairs.
	// This field is OPTIONAL. The Plugin is responsible for parsing and
	// validating these parameters. COs will treat these as opaque.
	// Use cases for opaque parameters:
	//   - Specify a policy to automatically clean up the snapshot.
	//   - Specify an expiration date for the snapshot.
	//   - Specify whether the snapshot is readonly or read/write.
	//   - Specify if the snapshot should be replicated to some place.
	//   - Specify primary or secondary for replication systems that
	//     support snapshotting only on primary.
	Parameters           map[string]string `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateSnapshotRequest) Reset()         { *m = CreateSnapshotRequest{} }
func (m *CreateSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*CreateSnapshotRequest) ProtoMessage()    {}
func (*CreateSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{34}
}

func (m *CreateSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateSnapshotRequest.Unmarshal(m, b)
}
func (m *CreateSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateSnapshotRequest.Marshal(b, m, deterministic)
}
func (m *CreateSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSnapshotRequest.Merge(m, src)
}
func (m *CreateSnapshotRequest) XXX_Size() int {
	return xxx_messageInfo_CreateSnapshotRequest.Size(m)
}
func (m *CreateSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSnapshotRequest proto.InternalMessageInfo

func (m *CreateSnapshotRequest) GetSourceVolumeId() string {
	if m != nil {
		return m.SourceVolumeId
	}
	return ""
}

func (m *CreateSnapshotRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateSnapshotRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *CreateSnapshotRequest) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type CreateSnapshotResponse struct {
	// Contains all attributes of the newly created snapshot that are
	// relevant to the CO along with information required by the Plugin
	// to uniquely identify the snapshot. This field is REQUIRED.
	Snapshot             *Snapshot `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateSnapshotResponse) Reset()         { *m = CreateSnapshotResponse{} }
func (m *CreateSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*CreateSnapshotResponse) ProtoMessage()    {}
func (*CreateSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{35}
}

func (m *CreateSnapshotResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateSnapshotResponse.Unmarshal(m, b)
}
func (m *CreateSnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateSnapshotResponse.Marshal(b, m, deterministic)
}
func (m *CreateSnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSnapshotResponse.Merge(m, src)
}
func (m *CreateSnapshotResponse) XXX_Size() int {
	return xxx_messageInfo_CreateSnapshotResponse.Size(m)
}
func (m *CreateSnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSnapshotResponse proto.InternalMessageInfo

func (m *CreateSnapshotResponse) GetSnapshot() *Snapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

// Information about a specific snapshot.
type Snapshot struct {
	// This is the complete size of the snapshot in bytes. The purpose of
	// this field is to give CO guidance on how much space is needed to
	// create a volume from this snapshot. The size of the volume MUST NOT
	// be less than the size of the source snapshot. This field is
	// OPTIONAL. If this field is not set, it indicates that this size is
	// unknown. The value of this field MUST NOT be negative and a size of
	// zero means it is unspecified.
	SizeBytes int64 `protobuf:"varint,1,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// The identifier for this snapshot, generated by the plugin.
	// This field is REQUIRED.
	// This field MUST contain enough information to uniquely identify
	// this specific snapshot vs all other snapshots supported by this
	// plugin.
	// This field SHALL be used by the CO in subsequent calls to refer to
	// this snapshot.
	// The SP is NOT responsible for global uniqueness of snapshot_id
	// across multiple SPs.
	SnapshotId string `protobuf:"bytes,2,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	// Identity information for the source volume. Note that creating a
	// snapshot from a snapshot is not supported here so the source has to
	// be a volume. This field is REQUIRED.
	SourceVolumeId string `protobuf:"bytes,3,opt,name=source_volume_id,json=sourceVolumeId,proto3" json:"source_volume_id,omitempty"`
	// Timestamp when the point-in-time snapshot is taken on the storage
	// system. This field is REQUIRED.
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// Indicates if a snapshot is ready to use as a
	// `volume_content_source` in a `CreateVolumeRequest`. The default
	// value is false. This field is REQUIRED.
	ReadyToUse bool `protobuf:"varint,5,opt,name=ready_to_use,json=readyToUse,proto3" json:"ready_to_use,omitempty"`
	// The ID of the volume group snapshot that this snapshot is part of.
	// It uniquely identifies the group snapshot on the storage system.
	// This field is OPTIONAL.
	// If this snapshot is a member of a volume group snapshot, and it
	// MUST NOT be deleted as a stand alone snapshot, then the SP
	// MUST provide the ID of the volume group snapshot in this field.
	// If provided, CO MUST use this field in subsequent volume group
	// snapshot operations to indicate that this snapshot is part of the
	// specified group snapshot.
	// If not provided, CO SHALL treat the snapshot as independent,
	// and SP SHALL allow it to be deleted separately.
	// If this message is inside a VolumeGroupSnapshot message, the value
	// MUST be the same as the group_snapshot_id in that message.
	GroupSnapshotId      string   `protobuf:"bytes,6,opt,name=group_snapshot_id,json=groupSnapshotId,proto3" json:"group_snapshot_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Snapshot) Reset()         { *m = Snapshot{} }
func (m *Snapshot) String() string { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()    {}
func (*Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{36}
}

func (m *Snapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Snapshot.Unmarshal(m, b)
}
func (m *Snapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Snapshot.Marshal(b, m, deterministic)
}
func (m *Snapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snapshot.Merge(m, src)
}
func (m *Snapshot) XXX_Size() int {
	return xxx_messageInfo_Snapshot.Size(m)
}
func (m *Snapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_Snapshot.DiscardUnknown(m)
}

var xxx_messageInfo_Snapshot proto.InternalMessageInfo

func (m *Snapshot) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

func (m *Snapshot) GetSnapshotId() string {
	if m != nil {
		return m.SnapshotId
	}
	return ""
}

func (m *Snapshot) GetSourceVolumeId() string {
	if m != nil {
		return m.SourceVolumeId
	}
	return ""
}

func (m *Snapshot) GetCreationTime() *timestamppb.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *Snapshot) GetReadyToUse() bool {
	if m != nil {
		return m.ReadyToUse
	}
	return false
}

func (m *Snapshot) GetGroupSnapshotId() string {
	if m != nil {
		return m.GroupSnapshotId
	}
	return ""
}

type DeleteSnapshotRequest struct {
	// The ID of the snapshot to be deleted.
	// This field is REQUIRED.
	SnapshotId string `protobuf:"bytes,1,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	// Secrets required by plugin to complete snapshot deletion request.
	// This field is OPTIONAL. Refer to the `Secrets Requirements`
	// section on how to use this field.
	Secrets              map[string]string `protobuf:"bytes,2,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DeleteSnapshotRequest) Reset()         { *m = DeleteSnapshotRequest{} }
func (m *DeleteSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteSnapshotRequest) ProtoMessage()    {}
func (*DeleteSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{37}
}

func (m *DeleteSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteSnapshotRequest.Unmarshal(m, b)
}
func (m *DeleteSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteSnapshotRequest.Marshal(b, m, deterministic)
}
func (m *DeleteSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSnapshotRequest.Merge(m, src)
}
func (m *DeleteSnapshotRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteSnapshotRequest.Size(m)
}
func (m *DeleteSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSnapshotRequest proto.InternalMessageInfo

func (m *DeleteSnapshotRequest) GetSnapshotId() string {
	if m != nil {
		return m.SnapshotId
	}
	return ""
}

func (m *DeleteSnapshotRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

type DeleteSnapshotResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSnapshotResponse) Reset()         { *m = DeleteSnapshotResponse{} }
func (m *DeleteSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteSnapshotResponse) ProtoMessage()    {}
func (*DeleteSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{38}
}

func (m *DeleteSnapshotResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteSnapshotResponse.Unmarshal(m, b)
}
func (m *DeleteSnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteSnapshotResponse.Marshal(b, m, deterministic)
}
func (m *DeleteSnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSnapshotResponse.Merge(m, src)
}
func (m *DeleteSnapshotResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteSnapshotResponse.Size(m)
}
func (m *DeleteSnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSnapshotResponse proto.InternalMessageInfo

// List all snapshots on the storage system regardless of how they were
// created.
type ListSnapshotsRequest struct {
	// If specified (non-zero value), the Plugin MUST NOT return more
	// entries than this number in the response. If the actual number of
	// entries is more than this number, the Plugin MUST set `next_token`
	// in the response which can be used to get the next page of entries
	// in the subsequent `ListSnapshots` call. This field is OPTIONAL. If
	// not specified (zero value), it means there is no restriction on the
	// number of entries that can be returned.
	// The value of this field MUST NOT be negative.
	MaxEntries int32 `protobuf:"varint,1,opt,name=max_entries,json=maxEntries,proto3" json:"max_entries,omitempty"`
	// A token to specify where to start paginating. Set this field to
	// `next_token` returned by a previous `ListSnapshots` call to get the
	// next page of entries. This field is OPTIONAL.
	// An empty string is equal to an unspecified field value.
	StartingToken string `protobuf:"bytes,2,opt,name=starting_token,json=startingToken,proto3" json:"starting_token,omitempty"`
	// Identity information for the source volume. This field is OPTIONAL.
	// It can be used to list snapshots by volume.
	SourceVolumeId string `protobuf:"bytes,3,opt,name=source_volume_id,json=sourceVolumeId,proto3" json:"source_volume_id,omitempty"`
	// Identity information for a specific snapshot. This field is
	// OPTIONAL. It can be used to list only a specific snapshot.
	// ListSnapshots will return with current snapshot information
	// and will not block if the snapshot is being processed after
	// it is cut.
	SnapshotId string `protobuf:"bytes,4,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	// Secrets required by plugin to complete ListSnapshot request.
	// This field is OPTIONAL. Refer to the `Secrets Requirements`
	// section on how to use this field.
	Secrets              map[string]string `protobuf:"bytes,5,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListSnapshotsRequest) Reset()         { *m = ListSnapshotsRequest{} }
func (m *ListSnapshotsRequest) String() string { return proto.CompactTextString(m) }
func (*ListSnapshotsRequest) ProtoMessage()    {}
func (*ListSnapshotsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{39}
}

func (m *ListSnapshotsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSnapshotsRequest.Unmarshal(m, b)
}
func (m *ListSnapshotsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSnapshotsRequest.Marshal(b, m, deterministic)
}
func (m *ListSnapshotsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSnapshotsRequest.Merge(m, src)
}
func (m *ListSnapshotsRequest) XXX_Size() int {
	return xxx_messageInfo_ListSnapshotsRequest.Size(m)
}
func (m *ListSnapshotsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSnapshotsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSnapshotsRequest proto.InternalMessageInfo

func (m *ListSnapshotsRequest) GetMaxEntries() int32 {
	if m != nil {
		return m.MaxEntries
	}
	return 0
}

func (m *ListSnapshotsRequest) GetStartingToken() string {
	if m != nil {
		return m.StartingToken
	}
	return ""
}

func (m *ListSnapshotsRequest) GetSourceVolumeId() string {
	if m != nil {
		return m.SourceVolumeId
	}
	return ""
}

func (m *ListSnapshotsRequest) GetSnapshotId() string {
	if m != nil {
		return m.SnapshotId
	}
	return ""
}

func (m *ListSnapshotsRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

type ListSnapshotsResponse struct {
	Entries []*ListSnapshotsResponse_Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	// This token allows you to get the next page of entries for
	// `ListSnapshots` request. If the number of entries is larger than
	// `max_entries`, use the `next_token` as a value for the
	// `starting_token` field in the next `ListSnapshots` request. This
	// field is OPTIONAL.
	// An empty string is equal to an unspecified field value.
	NextToken            string   `protobuf:"bytes,2,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSnapshotsResponse) Reset()         { *m = ListSnapshotsResponse{} }
func (m *ListSnapshotsResponse) String() string { return proto.CompactTextString(m) }
func (*ListSnapshotsResponse) ProtoMessage()    {}
func (*ListSnapshotsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{40}
}

func (m *ListSnapshotsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSnapshotsResponse.Unmarshal(m, b)
}
func (m *ListSnapshotsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSnapshotsResponse.Marshal(b, m, deterministic)
}
func (m *ListSnapshotsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSnapshotsResponse.Merge(m, src)
}
func (m *ListSnapshotsResponse) XXX_Size() int {
	return xxx_messageInfo_ListSnapshotsResponse.Size(m)
}
func (m *ListSnapshotsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSnapshotsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSnapshotsResponse proto.InternalMessageInfo

func (m *ListSnapshotsResponse) GetEntries() []*ListSnapshotsResponse_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *ListSnapshotsResponse) GetNextToken() string {
	if m != nil {
		return m.NextToken
	}
	return ""
}

type ListSnapshotsResponse_Entry struct {
	Snapshot             *Snapshot `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListSnapshotsResponse_Entry) Reset()         { *m = ListSnapshotsResponse_Entry{} }
func (m *ListSnapshotsResponse_Entry) String() string { return proto.CompactTextString(m) }
func (*ListSnapshotsResponse_Entry) ProtoMessage()    {}
func (*ListSnapshotsResponse_Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{40, 0}
}

func (m *ListSnapshotsResponse_Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSnapshotsResponse_Entry.Unmarshal(m, b)
}
func (m *ListSnapshotsResponse_Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSnapshotsResponse_Entry.Marshal(b, m, deterministic)
}
func (m *ListSnapshotsResponse_Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSnapshotsResponse_Entry.Merge(m, src)
}
func (m *ListSnapshotsResponse_Entry) XXX_Size() int {
	return xxx_messageInfo_ListSnapshotsResponse_Entry.Size(m)
}
func (m *ListSnapshotsResponse_Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSnapshotsResponse_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_ListSnapshotsResponse_Entry proto.InternalMessageInfo

func (m *ListSnapshotsResponse_Entry) GetSnapshot() *Snapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

type ControllerExpandVolumeRequest struct {
	// The ID of the volume to expand. This field is REQUIRED.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// This allows CO to specify the capacity requirements of the volume
	// after expansion. This field is REQUIRED.
	CapacityRange *CapacityRange `protobuf:"bytes,2,opt,name=capacity_range,json=capacityRange,proto3" json:"capacity_range,omitempty"`
	// Secrets required by the plugin for expanding the volume.
	// This field is OPTIONAL.
	Secrets map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Volume capability describing how the CO intends to use this volume.
	// This allows SP to determine if volume is being used as a block
	// device or mounted file system. For example - if volume is
	// being used as a block device - the SP MAY set
	// node_expansion_required to false in ControllerExpandVolumeResponse
	// to skip invocation of NodeExpandVolume on the node by the CO.
	// This is an OPTIONAL field.
	VolumeCapability     *VolumeCapability `protobuf:"bytes,4,opt,name=volume_capability,json=volumeCapability,proto3" json:"volume_capability,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ControllerExpandVolumeRequest) Reset()         { *m = ControllerExpandVolumeRequest{} }
func (m *ControllerExpandVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*ControllerExpandVolumeRequest) ProtoMessage()    {}
func (*ControllerExpandVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{41}
}

func (m *ControllerExpandVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerExpandVolumeRequest.Unmarshal(m, b)
}
func (m *ControllerExpandVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerExpandVolumeRequest.Marshal(b, m, deterministic)
}
func (m *ControllerExpandVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerExpandVolumeRequest.Merge(m, src)
}
func (m *ControllerExpandVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_ControllerExpandVolumeRequest.Size(m)
}
func (m *ControllerExpandVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerExpandVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerExpandVolumeRequest proto.InternalMessageInfo

func (m *ControllerExpandVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *ControllerExpandVolumeRequest) GetCapacityRange() *CapacityRange {
	if m != nil {
		return m.CapacityRange
	}
	return nil
}

func (m *ControllerExpandVolumeRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *ControllerExpandVolumeRequest) GetVolumeCapability() *VolumeCapability {
	if m != nil {
		return m.VolumeCapability
	}
	return nil
}

type ControllerExpandVolumeResponse struct {
	// Capacity of volume after expansion. This field is REQUIRED.
	CapacityBytes int64 `protobuf:"varint,1,opt,name=capacity_bytes,json=capacityBytes,proto3" json:"capacity_bytes,omitempty"`
	// Whether node expansion is required for the volume. When true
	// the CO MUST make NodeExpandVolume RPC call on the node. This field
	// is REQUIRED.
	NodeExpansionRequired bool     `protobuf:"varint,2,opt,name=node_expansion_required,json=nodeExpansionRequired,proto3" json:"node_expansion_required,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ControllerExpandVolumeResponse) Reset()         { *m = ControllerExpandVolumeResponse{} }
func (m *ControllerExpandVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*ControllerExpandVolumeResponse) ProtoMessage()    {}
func (*ControllerExpandVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{42}
}

func (m *ControllerExpandVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerExpandVolumeResponse.Unmarshal(m, b)
}
func (m *ControllerExpandVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerExpandVolumeResponse.Marshal(b, m, deterministic)
}
func (m *ControllerExpandVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerExpandVolumeResponse.Merge(m, src)
}
func (m *ControllerExpandVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_ControllerExpandVolumeResponse.Size(m)
}
func (m *ControllerExpandVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerExpandVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerExpandVolumeResponse proto.InternalMessageInfo

func (m *ControllerExpandVolumeResponse) GetCapacityBytes() int64 {
	if m != nil {
		return m.CapacityBytes
	}
	return 0
}

func (m *ControllerExpandVolumeResponse) GetNodeExpansionRequired() bool {
	if m != nil {
		return m.NodeExpansionRequired
	}
	return false
}

type NodeStageVolumeRequest struct {
	// The ID of the volume to publish. This field is REQUIRED.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// The CO SHALL set this field to the value returned by
	// `ControllerPublishVolume` if the corresponding Controller Plugin
	// has `PUBLISH_UNPUBLISH_VOLUME` controller capability, and SHALL be
	// left unset if the corresponding Controller Plugin does not have
	// this capability. This is an OPTIONAL field.
	PublishContext map[string]string `protobuf:"bytes,2,rep,name=publish_context,json=publishContext,proto3" json:"publish_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The path to which the volume MAY be staged. It MUST be an
	// absolute path in the root filesystem of the process serving this
	// request, and MUST be a directory. The CO SHALL ensure that there
	// is only one `staging_target_path` per volume. The CO SHALL ensure
	// that the path is directory and that the process serving the
	// request has `read` and `write` permission to that directory. The
	// CO SHALL be responsible for creating the directory if it does not
	// exist.
	// This is a REQUIRED field.
	// This field overrides the general CSI size limit.
	// SP SHOULD support the maximum path length allowed by the operating
	// system/filesystem, but, at a minimum, SP MUST accept a max path
	// length of at least 128 bytes.
	StagingTargetPath string `protobuf:"bytes,3,opt,name=staging_target_path,json=stagingTargetPath,proto3" json:"staging_target_path,omitempty"`
	// Volume capability describing how the CO intends to use this volume.
	// SP MUST ensure the CO can use the staged volume as described.
	// Otherwise SP MUST return the appropriate gRPC error code.
	// This is a REQUIRED field.
	VolumeCapability *VolumeCapability `protobuf:"bytes,4,opt,name=volume_capability,json=volumeCapability,proto3" json:"volume_capability,omitempty"`
	// Secrets required by plugin to complete node stage volume request.
	// This field is OPTIONAL. Refer to the `Secrets Requirements`
	// section on how to use this field.
	Secrets map[string]string `protobuf:"bytes,5,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Volume context as returned by SP in
	// CreateVolumeResponse.Volume.volume_context.
	// This field is OPTIONAL and MUST match the volume_context of the
	// volume identified by `volume_id`.
	VolumeContext        map[string]string `protobuf:"bytes,6,rep,name=volume_context,json=volumeContext,proto3" json:"volume_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NodeStageVolumeRequest) Reset()         { *m = NodeStageVolumeRequest{} }
func (m *NodeStageVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*NodeStageVolumeRequest) ProtoMessage()    {}
func (*NodeStageVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{43}
}

func (m *NodeStageVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeStageVolumeRequest.Unmarshal(m, b)
}
func (m *NodeStageVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeStageVolumeRequest.Marshal(b, m, deterministic)
}
func (m *NodeStageVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStageVolumeRequest.Merge(m, src)
}
func (m *NodeStageVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_NodeStageVolumeRequest.Size(m)
}
func (m *NodeStageVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStageVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStageVolumeRequest proto.InternalMessageInfo

func (m *NodeStageVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *NodeStageVolumeRequest) GetPublishContext() map[string]string {
	if m != nil {
		return m.PublishContext
	}
	return nil
}

func (m *NodeStageVolumeRequest) GetStagingTargetPath() string {
	if m != nil {
		return m.StagingTargetPath
	}
	return ""
}

func (m *NodeStageVolumeRequest) GetVolumeCapability() *VolumeCapability {
	if m != nil {
		return m.VolumeCapability
	}
	return nil
}

func (m *NodeStageVolumeRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *NodeStageVolumeRequest) GetVolumeContext() map[string]string {
	if m != nil {
		return m.VolumeContext
	}
	return nil
}

type NodeStageVolumeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeStageVolumeResponse) Reset()         { *m = NodeStageVolumeResponse{} }
func (m *NodeStageVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*NodeStageVolumeResponse) ProtoMessage()    {}
func (*NodeStageVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{44}
}

func (m *NodeStageVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeStageVolumeResponse.Unmarshal(m, b)
}
func (m *NodeStageVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeStageVolumeResponse.Marshal(b, m, deterministic)
}
func (m *NodeStageVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStageVolumeResponse.Merge(m, src)
}
func (m *NodeStageVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_NodeStageVolumeResponse.Size(m)
}
func (m *NodeStageVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStageVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStageVolumeResponse proto.InternalMessageInfo

type NodeUnstageVolumeRequest struct {
	// The ID of the volume. This field is REQUIRED.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// The path at which the volume was staged. It MUST be an absolute
	// path in the root filesystem of the process serving this request.
	// This is a REQUIRED field.
	// This field overrides the general CSI size limit.
	// SP SHOULD support the maximum path length allowed by the operating
	// system/filesystem, but, at a minimum, SP MUST accept a max path
	// length of at least 128 bytes.
	StagingTargetPath    string   `protobuf:"bytes,2,opt,name=staging_target_path,json=stagingTargetPath,proto3" json:"staging_target_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeUnstageVolumeRequest) Reset()         { *m = NodeUnstageVolumeRequest{} }
func (m *NodeUnstageVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*NodeUnstageVolumeRequest) ProtoMessage()    {}
func (*NodeUnstageVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{45}
}

func (m *NodeUnstageVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeUnstageVolumeRequest.Unmarshal(m, b)
}
func (m *NodeUnstageVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeUnstageVolumeRequest.Marshal(b, m, deterministic)
}
func (m *NodeUnstageVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeUnstageVolumeRequest.Merge(m, src)
}
func (m *NodeUnstageVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_NodeUnstageVolumeRequest.Size(m)
}
func (m *NodeUnstageVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeUnstageVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeUnstageVolumeRequest proto.InternalMessageInfo

func (m *NodeUnstageVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *NodeUnstageVolumeRequest) GetStagingTargetPath() string {
	if m != nil {
		return m.StagingTargetPath
	}
	return ""
}

type NodeUnstageVolumeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeUnstageVolumeResponse) Reset()         { *m = NodeUnstageVolumeResponse{} }
func (m *NodeUnstageVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*NodeUnstageVolumeResponse) ProtoMessage()    {}
func (*NodeUnstageVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{46}
}

func (m *NodeUnstageVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeUnstageVolumeResponse.Unmarshal(m, b)
}
func (m *NodeUnstageVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeUnstageVolumeResponse.Marshal(b, m, deterministic)
}
func (m *NodeUnstageVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeUnstageVolumeResponse.Merge(m, src)
}
func (m *NodeUnstageVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_NodeUnstageVolumeResponse.Size(m)
}
func (m *NodeUnstageVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeUnstageVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodeUnstageVolumeResponse proto.InternalMessageInfo

type NodePublishVolumeRequest struct {
	// The ID of the volume to publish. This field is REQUIRED.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// The CO SHALL set this field to the value returned by
	// `ControllerPublishVolume` if the corresponding Controller Plugin
	// has `PUBLISH_UNPUBLISH_VOLUME` controller capability, and SHALL be
	// left unset if the corresponding Controller Plugin does not have
	// this capability. This is an OPTIONAL field.
	PublishContext map[string]string `protobuf:"bytes,2,rep,name=publish_context,json=publishContext,proto3" json:"publish_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The path to which the volume was staged by `NodeStageVolume`.
	// It MUST be an absolute path in the root filesystem of the process
	// serving this request.
	// It MUST be set if the Node Plugin implements the
	// `STAGE_UNSTAGE_VOLUME` node capability.
	// This is an OPTIONAL field.
	// This field overrides the general CSI size limit.
	// SP SHOULD support the maximum path length allowed by the operating
	// system/filesystem, but, at a minimum, SP MUST accept a max path
	// length of at least 128 bytes.
	StagingTargetPath string `protobuf:"bytes,3,opt,name=staging_target_path,json=stagingTargetPath,proto3" json:"staging_target_path,omitempty"`
	// The path to which the volume will be published. It MUST be an
	// absolute path in the root filesystem of the process serving this
	// request. The CO SHALL ensure uniqueness of target_path per volume.
	// The CO SHALL ensure that the parent directory of this path exists
	// and that the process serving the request has `read` and `write`
	// permissions to that parent directory.
	// For volumes with an access type of block, the SP SHALL place the
	// block device at target_path.
	// For volumes with an access type of mount, the SP SHALL place the
	// mounted directory at target_path.
	// Creation of target_path is the responsibility of the SP.
	// This is a REQUIRED field.
	// This field overrides the general CSI size limit.
	// SP SHOULD support the maximum path length allowed by the operating
	// system/filesystem, but, at a minimum, SP MUST accept a max path
	// length of at least 128 bytes.
	TargetPath string `protobuf:"bytes,4,opt,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
	// Volume capability describing how the CO intends to use this volume.
	// SP MUST ensure the CO can use the published volume as described.
	// Otherwise SP MUST return the appropriate gRPC error code.
	// This is a REQUIRED field.
	VolumeCapability *VolumeCapability `protobuf:"bytes,5,opt,name=volume_capability,json=volumeCapability,proto3" json:"volume_capability,omitempty"`
	// Indicates SP MUST publish the volume in readonly mode.
	// This field is REQUIRED.
	Readonly bool `protobuf:"varint,6,opt,name=readonly,proto3" json:"readonly,omitempty"`
	// Secrets required by plugin to complete node publish volume request.
	// This field is OPTIONAL. Refer to the `Secrets Requirements`
	// section on how to use this field.
	Secrets map[string]string `protobuf:"bytes,7,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Volume context as returned by SP in
	// CreateVolumeResponse.Volume.volume_context.
	// This field is OPTIONAL and MUST match the volume_context of the
	// volume identified by `volume_id`.
	VolumeContext        map[string]string `protobuf:"bytes,8,rep,name=volume_context,json=volumeContext,proto3" json:"volume_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NodePublishVolumeRequest) Reset()         { *m = NodePublishVolumeRequest{} }
func (m *NodePublishVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*NodePublishVolumeRequest) ProtoMessage()    {}
func (*NodePublishVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{47}
}

func (m *NodePublishVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodePublishVolumeRequest.Unmarshal(m, b)
}
func (m *NodePublishVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodePublishVolumeRequest.Marshal(b, m, deterministic)
}
func (m *NodePublishVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodePublishVolumeRequest.Merge(m, src)
}
func (m *NodePublishVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_NodePublishVolumeRequest.Size(m)
}
func (m *NodePublishVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodePublishVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodePublishVolumeRequest proto.InternalMessageInfo

func (m *NodePublishVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *NodePublishVolumeRequest) GetPublishContext() map[string]string {
	if m != nil {
		return m.PublishContext
	}
	return nil
}

func (m *NodePublishVolumeRequest) GetStagingTargetPath() string {
	if m != nil {
		return m.StagingTargetPath
	}
	return ""
}

func (m *NodePublishVolumeRequest) GetTargetPath() string {
	if m != nil {
		return m.TargetPath
	}
	return ""
}

func (m *NodePublishVolumeRequest) GetVolumeCapability() *VolumeCapability {
	if m != nil {
		return m.VolumeCapability
	}
	return nil
}

func (m *NodePublishVolumeRequest) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

func (m *NodePublishVolumeRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *NodePublishVolumeRequest) GetVolumeContext() map[string]string {
	if m != nil {
		return m.VolumeContext
	}
	return nil
}

type NodePublishVolumeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodePublishVolumeResponse) Reset()         { *m = NodePublishVolumeResponse{} }
func (m *NodePublishVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*NodePublishVolumeResponse) ProtoMessage()    {}
func (*NodePublishVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{48}
}

func (m *NodePublishVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodePublishVolumeResponse.Unmarshal(m, b)
}
func (m *NodePublishVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodePublishVolumeResponse.Marshal(b, m, deterministic)
}
func (m *NodePublishVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodePublishVolumeResponse.Merge(m, src)
}
func (m *NodePublishVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_NodePublishVolumeResponse.Size(m)
}
func (m *NodePublishVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodePublishVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodePublishVolumeResponse proto.InternalMessageInfo

type NodeUnpublishVolumeRequest struct {
	// The ID of the volume. This field is REQUIRED.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// The path at which the volume was published. It MUST be an absolute
	// path in the root filesystem of the process serving this request.
	// The SP MUST delete the file or directory it created at this path.
	// This is a REQUIRED field.
	// This field overrides the general CSI size limit.
	// SP SHOULD support the maximum path length allowed by the operating
	// system/filesystem, but, at a minimum, SP MUST accept a max path
	// length of at least 128 bytes.
	TargetPath           string   `protobuf:"bytes,2,opt,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeUnpublishVolumeRequest) Reset()         { *m = NodeUnpublishVolumeRequest{} }
func (m *NodeUnpublishVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*NodeUnpublishVolumeRequest) ProtoMessage()    {}
func (*NodeUnpublishVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{49}
}

func (m *NodeUnpublishVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeUnpublishVolumeRequest.Unmarshal(m, b)
}
func (m *NodeUnpublishVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeUnpublishVolumeRequest.Marshal(b, m, deterministic)
}
func (m *NodeUnpublishVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeUnpublishVolumeRequest.Merge(m, src)
}
func (m *NodeUnpublishVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_NodeUnpublishVolumeRequest.Size(m)
}
func (m *NodeUnpublishVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeUnpublishVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeUnpublishVolumeRequest proto.InternalMessageInfo

func (m *NodeUnpublishVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *NodeUnpublishVolumeRequest) GetTargetPath() string {
	if m != nil {
		return m.TargetPath
	}
	return ""
}

type NodeUnpublishVolumeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeUnpublishVolumeResponse) Reset()         { *m = NodeUnpublishVolumeResponse{} }
func (m *NodeUnpublishVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*NodeUnpublishVolumeResponse) ProtoMessage()    {}
func (*NodeUnpublishVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{50}
}

func (m *NodeUnpublishVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeUnpublishVolumeResponse.Unmarshal(m, b)
}
func (m *NodeUnpublishVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeUnpublishVolumeResponse.Marshal(b, m, deterministic)
}
func (m *NodeUnpublishVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeUnpublishVolumeResponse.Merge(m, src)
}
func (m *NodeUnpublishVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_NodeUnpublishVolumeResponse.Size(m)
}
func (m *NodeUnpublishVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeUnpublishVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodeUnpublishVolumeResponse proto.InternalMessageInfo

type NodeGetVolumeStatsRequest struct {
	// The ID of the volume. This field is REQUIRED.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// It can be any valid path where volume was previously
	// staged or published.
	// It MUST be an absolute path in the root filesystem of
	// the process serving this request.
	// This is a REQUIRED field.
	// This field overrides the general CSI size limit.
	// SP SHOULD support the maximum path length allowed by the operating
	// system/filesystem, but, at a minimum, SP MUST accept a max path
	// length of at least 128 bytes.
	VolumePath string `protobuf:"bytes,2,opt,name=volume_path,json=volumePath,proto3" json:"volume_path,omitempty"`
	// The path where the volume is staged, if the plugin has the
	// STAGE_UNSTAGE_VOLUME capability, otherwise empty.
	// If not empty, it MUST be an absolute path in the root
	// filesystem of the process serving this request.
	// This field is OPTIONAL.
	// This field overrides the general CSI size limit.
	// SP SHOULD support the maximum path length allowed by the operating
	// system/filesystem, but, at a minimum, SP MUST accept a max path
	// length of at least 128 bytes.
	StagingTargetPath    string   `protobuf:"bytes,3,opt,name=staging_target_path,json=stagingTargetPath,proto3" json:"staging_target_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeGetVolumeStatsRequest) Reset()         { *m = NodeGetVolumeStatsRequest{} }
func (m *NodeGetVolumeStatsRequest) String() string { return proto.CompactTextString(m) }
func (*NodeGetVolumeStatsRequest) ProtoMessage()    {}
func (*NodeGetVolumeStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{51}
}

func (m *NodeGetVolumeStatsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeGetVolumeStatsRequest.Unmarshal(m, b)
}
func (m *NodeGetVolumeStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeGetVolumeStatsRequest.Marshal(b, m, deterministic)
}
func (m *NodeGetVolumeStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeGetVolumeStatsRequest.Merge(m, src)
}
func (m *NodeGetVolumeStatsRequest) XXX_Size() int {
	return xxx_messageInfo_NodeGetVolumeStatsRequest.Size(m)
}
func (m *NodeGetVolumeStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeGetVolumeStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeGetVolumeStatsRequest proto.InternalMessageInfo

func (m *NodeGetVolumeStatsRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *NodeGetVolumeStatsRequest) GetVolumePath() string {
	if m != nil {
		return m.VolumePath
	}
	return ""
}

func (m *NodeGetVolumeStatsRequest) GetStagingTargetPath() string {
	if m != nil {
		return m.StagingTargetPath
	}
	return ""
}

type NodeGetVolumeStatsResponse struct {
	// This field is OPTIONAL.
	Usage []*VolumeUsage `protobuf:"bytes,1,rep,name=usage,proto3" json:"usage,omitempty"`
	// Information about the current condition of the volume.
	// This field is OPTIONAL.
	// This field MUST be specified if the VOLUME_CONDITION node
	// capability is supported.
	VolumeCondition      *VolumeCondition `protobuf:"bytes,2,opt,name=volume_condition,json=volumeCondition,proto3" json:"volume_condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NodeGetVolumeStatsResponse) Reset()         { *m = NodeGetVolumeStatsResponse{} }
func (m *NodeGetVolumeStatsResponse) String() string { return proto.CompactTextString(m) }
func (*NodeGetVolumeStatsResponse) ProtoMessage()    {}
func (*NodeGetVolumeStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{52}
}

func (m *NodeGetVolumeStatsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeGetVolumeStatsResponse.Unmarshal(m, b)
}
func (m *NodeGetVolumeStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeGetVolumeStatsResponse.Marshal(b, m, deterministic)
}
func (m *NodeGetVolumeStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeGetVolumeStatsResponse.Merge(m, src)
}
func (m *NodeGetVolumeStatsResponse) XXX_Size() int {
	return xxx_messageInfo_NodeGetVolumeStatsResponse.Size(m)
}
func (m *NodeGetVolumeStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeGetVolumeStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodeGetVolumeStatsResponse proto.InternalMessageInfo

func (m *NodeGetVolumeStatsResponse) GetUsage() []*VolumeUsage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *NodeGetVolumeStatsResponse) GetVolumeCondition() *VolumeCondition {
	if m != nil {
		return m.VolumeCondition
	}
	return nil
}

type VolumeUsage struct {
	// The available capacity in specified Unit. This field is OPTIONAL.
	// The value of this field MUST NOT be negative.
	Available int64 `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	// The total capacity in specified Unit. This field is REQUIRED.
	// The value of this field MUST NOT be negative.
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// The used capacity in specified Unit. This field is OPTIONAL.
	// The value of this field MUST NOT be negative.
	Used int64 `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
	// Units by which values are measured. This field is REQUIRED.
	Unit                 VolumeUsage_Unit `protobuf:"varint,4,opt,name=unit,proto3,enum=csi.v1.VolumeUsage_Unit" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *VolumeUsage) Reset()         { *m = VolumeUsage{} }
func (m *VolumeUsage) String() string { return proto.CompactTextString(m) }
func (*VolumeUsage) ProtoMessage()    {}
func (*VolumeUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{53}
}

func (m *VolumeUsage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeUsage.Unmarshal(m, b)
}
func (m *VolumeUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeUsage.Marshal(b, m, deterministic)
}
func (m *VolumeUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeUsage.Merge(m, src)
}
func (m *VolumeUsage) XXX_Size() int {
	return xxx_messageInfo_VolumeUsage.Size(m)
}
func (m *VolumeUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeUsage.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeUsage proto.InternalMessageInfo

func (m *VolumeUsage) GetAvailable() int64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *VolumeUsage) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *VolumeUsage) GetUsed() int64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *VolumeUsage) GetUnit() VolumeUsage_Unit {
	if m != nil {
		return m.Unit
	}
	return VolumeUsage_UNKNOWN
}

// VolumeCondition represents the current condition of a volume.
type VolumeCondition struct {
	// Normal volumes are available for use and operating optimally.
	// An abnormal volume does not meet these criteria.
	// This field is REQUIRED.
	Abnormal bool `protobuf:"varint,1,opt,name=abnormal,proto3" json:"abnormal,omitempty"`
	// The message describing the condition of the volume.
	// This field is REQUIRED.
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeCondition) Reset()         { *m = VolumeCondition{} }
func (m *VolumeCondition) String() string { return proto.CompactTextString(m) }
func (*VolumeCondition) ProtoMessage()    {}
func (*VolumeCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{54}
}

func (m *VolumeCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeCondition.Unmarshal(m, b)
}
func (m *VolumeCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeCondition.Marshal(b, m, deterministic)
}
func (m *VolumeCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeCondition.Merge(m, src)
}
func (m *VolumeCondition) XXX_Size() int {
	return xxx_messageInfo_VolumeCondition.Size(m)
}
func (m *VolumeCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeCondition.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeCondition proto.InternalMessageInfo

func (m *VolumeCondition) GetAbnormal() bool {
	if m != nil {
		return m.Abnormal
	}
	return false
}

func (m *VolumeCondition) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type NodeGetCapabilitiesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeGetCapabilitiesRequest) Reset()         { *m = NodeGetCapabilitiesRequest{} }
func (m *NodeGetCapabilitiesRequest) String() string { return proto.CompactTextString(m) }
func (*NodeGetCapabilitiesRequest) ProtoMessage()    {}
func (*NodeGetCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{55}
}

func (m *NodeGetCapabilitiesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeGetCapabilitiesRequest.Unmarshal(m, b)
}
func (m *NodeGetCapabilitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeGetCapabilitiesRequest.Marshal(b, m, deterministic)
}
func (m *NodeGetCapabilitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeGetCapabilitiesRequest.Merge(m, src)
}
func (m *NodeGetCapabilitiesRequest) XXX_Size() int {
	return xxx_messageInfo_NodeGetCapabilitiesRequest.Size(m)
}
func (m *NodeGetCapabilitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeGetCapabilitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeGetCapabilitiesRequest proto.InternalMessageInfo

type NodeGetCapabilitiesResponse struct {
	// All the capabilities that the node service supports. This field
	// is OPTIONAL.
	Capabilities         []*NodeServiceCapability `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *NodeGetCapabilitiesResponse) Reset()         { *m = NodeGetCapabilitiesResponse{} }
func (m *NodeGetCapabilitiesResponse) String() string { return proto.CompactTextString(m) }
func (*NodeGetCapabilitiesResponse) ProtoMessage()    {}
func (*NodeGetCapabilitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{56}
}

func (m *NodeGetCapabilitiesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeGetCapabilitiesResponse.Unmarshal(m, b)
}
func (m *NodeGetCapabilitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeGetCapabilitiesResponse.Marshal(b, m, deterministic)
}
func (m *NodeGetCapabilitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeGetCapabilitiesResponse.Merge(m, src)
}
func (m *NodeGetCapabilitiesResponse) XXX_Size() int {
	return xxx_messageInfo_NodeGetCapabilitiesResponse.Size(m)
}
func (m *NodeGetCapabilitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeGetCapabilitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodeGetCapabilitiesResponse proto.InternalMessageInfo

func (m *NodeGetCapabilitiesResponse) GetCapabilities() []*NodeServiceCapability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

// Specifies a capability of the node service.
type NodeServiceCapability struct {
	// Types that are valid to be assigned to Type:
	//
	//	*NodeServiceCapability_Rpc
	Type                 isNodeServiceCapability_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *NodeServiceCapability) Reset()         { *m = NodeServiceCapability{} }
func (m *NodeServiceCapability) String() string { return proto.CompactTextString(m) }
func (*NodeServiceCapability) ProtoMessage()    {}
func (*NodeServiceCapability) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{57}
}

func (m *NodeServiceCapability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeServiceCapability.Unmarshal(m, b)
}
func (m *NodeServiceCapability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeServiceCapability.Marshal(b, m, deterministic)
}
func (m *NodeServiceCapability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeServiceCapability.Merge(m, src)
}
func (m *NodeServiceCapability) XXX_Size() int {
	return xxx_messageInfo_NodeServiceCapability.Size(m)
}
func (m *NodeServiceCapability) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeServiceCapability.DiscardUnknown(m)
}

var xxx_messageInfo_NodeServiceCapability proto.InternalMessageInfo

type isNodeServiceCapability_Type interface {
	isNodeServiceCapability_Type()
}

type NodeServiceCapability_Rpc struct {
	Rpc *NodeServiceCapability_RPC `protobuf:"bytes,1,opt,name=rpc,proto3,oneof"`
}

func (*NodeServiceCapability_Rpc) isNodeServiceCapability_Type() {}

func (m *NodeServiceCapability) GetType() isNodeServiceCapability_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *NodeServiceCapability) GetRpc() *NodeServiceCapability_RPC {
	if x, ok := m.GetType().(*NodeServiceCapability_Rpc); ok {
		return x.Rpc
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NodeServiceCapability) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NodeServiceCapability_Rpc)(nil),
	}
}

type NodeServiceCapability_RPC struct {
	Type                 NodeServiceCapability_RPC_Type `protobuf:"varint,1,opt,name=type,proto3,enum=csi.v1.NodeServiceCapability_RPC_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *NodeServiceCapability_RPC) Reset()         { *m = NodeServiceCapability_RPC{} }
func (m *NodeServiceCapability_RPC) String() string { return proto.CompactTextString(m) }
func (*NodeServiceCapability_RPC) ProtoMessage()    {}
func (*NodeServiceCapability_RPC) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{57, 0}
}

func (m *NodeServiceCapability_RPC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeServiceCapability_RPC.Unmarshal(m, b)
}
func (m *NodeServiceCapability_RPC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeServiceCapability_RPC.Marshal(b, m, deterministic)
}
func (m *NodeServiceCapability_RPC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeServiceCapability_RPC.Merge(m, src)
}
func (m *NodeServiceCapability_RPC) XXX_Size() int {
	return xxx_messageInfo_NodeServiceCapability_RPC.Size(m)
}
func (m *NodeServiceCapability_RPC) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeServiceCapability_RPC.DiscardUnknown(m)
}

var xxx_messageInfo_NodeServiceCapability_RPC proto.InternalMessageInfo

func (m *NodeServiceCapability_RPC) GetType() NodeServiceCapability_RPC_Type {
	if m != nil {
		return m.Type
	}
	return NodeServiceCapability_RPC_UNKNOWN
}

type NodeGetInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeGetInfoRequest) Reset()         { *m = NodeGetInfoRequest{} }
func (m *NodeGetInfoRequest) String() string { return proto.CompactTextString(m) }
func (*NodeGetInfoRequest) ProtoMessage()    {}
func (*NodeGetInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{58}
}

func (m *NodeGetInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeGetInfoRequest.Unmarshal(m, b)
}
func (m *NodeGetInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeGetInfoRequest.Marshal(b, m, deterministic)
}
func (m *NodeGetInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeGetInfoRequest.Merge(m, src)
}
func (m *NodeGetInfoRequest) XXX_Size() int {
	return xxx_messageInfo_NodeGetInfoRequest.Size(m)
}
func (m *NodeGetInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeGetInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeGetInfoRequest proto.InternalMessageInfo

type NodeGetInfoResponse struct {
	// The identifier of the node as understood by the SP.
	// This field is REQUIRED.
	// This field MUST contain enough information to uniquely identify
	// this specific node vs all other nodes supported by this plugin.
	// This field SHALL be used by the CO in subsequent calls, including
	// `ControllerPublishVolume`, to refer to this node.
	// The SP is NOT responsible for global uniqueness of node_id across
	// multiple SPs.
	// This field overrides the general CSI size limit.
	// The size of this field SHALL NOT exceed 256 bytes. The general
	// CSI size limit, 128 byte, is RECOMMENDED for best backwards
	// compatibility.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Maximum number of volumes that controller can publish to the node.
	// If value is not set or zero CO SHALL decide how many volumes of
	// this type can be published by the controller to the node. The
	// plugin MUST NOT set negative values here.
	// This field is OPTIONAL.
	MaxVolumesPerNode int64 `protobuf:"varint,2,opt,name=max_volumes_per_node,json=maxVolumesPerNode,proto3" json:"max_volumes_per_node,omitempty"`
	// Specifies where (regions, zones, racks, etc.) the node is
	// accessible from.
	// A plugin that returns this field MUST also set the
	// VOLUME_ACCESSIBILITY_CONSTRAINTS plugin capability.
	// COs MAY use this information along with the topology information
	// returned in CreateVolumeResponse to ensure that a given volume is
	// accessible from a given node when scheduling workloads.
	// This field is OPTIONAL. If it is not specified, the CO MAY assume
	// the node is not subject to any topological constraint, and MAY
	// schedule workloads that reference any volume V, such that there are
	// no topological constraints declared for V.
	//
	// Example 1:
	//
	//	accessible_topology =
	//	  {"region": "R1", "zone": "Z2"}
	//
	// Indicates the node exists within the "region" "R1" and the "zone"
	// "Z2".
	AccessibleTopology   *Topology `protobuf:"bytes,3,opt,name=accessible_topology,json=accessibleTopology,proto3" json:"accessible_topology,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NodeGetInfoResponse) Reset()         { *m = NodeGetInfoResponse{} }
func (m *NodeGetInfoResponse) String() string { return proto.CompactTextString(m) }
func (*NodeGetInfoResponse) ProtoMessage()    {}
func (*NodeGetInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{59}
}

func (m *NodeGetInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeGetInfoResponse.Unmarshal(m, b)
}
func (m *NodeGetInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeGetInfoResponse.Marshal(b, m, deterministic)
}
func (m *NodeGetInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeGetInfoResponse.Merge(m, src)
}
func (m *NodeGetInfoResponse) XXX_Size() int {
	return xxx_messageInfo_NodeGetInfoResponse.Size(m)
}
func (m *NodeGetInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeGetInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodeGetInfoResponse proto.InternalMessageInfo

func (m *NodeGetInfoResponse) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *NodeGetInfoResponse) GetMaxVolumesPerNode() int64 {
	if m != nil {
		return m.MaxVolumesPerNode
	}
	return 0
}

func (m *NodeGetInfoResponse) GetAccessibleTopology() *Topology {
	if m != nil {
		return m.AccessibleTopology
	}
	return nil
}

type NodeExpandVolumeRequest struct {
	// The ID of the volume. This field is REQUIRED.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// The path on which volume is available. This field is REQUIRED.
	// This field overrides the general CSI size limit.
	// SP SHOULD support the maximum path length allowed by the operating
	// system/filesystem, but, at a minimum, SP MUST accept a max path
	// length of at least 128 bytes.
	VolumePath string `protobuf:"bytes,2,opt,name=volume_path,json=volumePath,proto3" json:"volume_path,omitempty"`
	// This allows CO to specify the capacity requirements of the volume
	// after expansion. If capacity_range is omitted then a plugin MAY
	// inspect the file system of the volume to determine the maximum
	// capacity to which the volume can be expanded. In such cases a
	// plugin MAY expand the volume to its maximum capacity.
	// This field is OPTIONAL.
	CapacityRange *CapacityRange `protobuf:"bytes,3,opt,name=capacity_range,json=capacityRange,proto3" json:"capacity_range,omitempty"`
	// The path where the volume is staged, if the plugin has the
	// STAGE_UNSTAGE_VOLUME capability, otherwise empty.
	// If not empty, it MUST be an absolute path in the root
	// filesystem of the process serving this request.
	// This field is OPTIONAL.
	// This field overrides the general CSI size limit.
	// SP SHOULD support the maximum path length allowed by the operating
	// system/filesystem, but, at a minimum, SP MUST accept a max path
	// length of at least 128 bytes.
	StagingTargetPath string `protobuf:"bytes,4,opt,name=staging_target_path,json=stagingTargetPath,proto3" json:"staging_target_path,omitempty"`
	// Volume capability describing how the CO intends to use this volume.
	// This allows SP to determine if volume is being used as a block
	// device or mounted file system. For example - if volume is being
	// used as a block device the SP MAY choose to skip expanding the
	// filesystem in NodeExpandVolume implementation but still perform
	// rest of the housekeeping needed for expanding the volume. If
	// volume_capability is omitted the SP MAY determine
	// access_type from given volume_path for the volume and perform
	// node expansion. This is an OPTIONAL field.
	VolumeCapability *VolumeCapability `protobuf:"bytes,5,opt,name=volume_capability,json=volumeCapability,proto3" json:"volume_capability,omitempty"`
	// Secrets required by plugin to complete node expand volume request.
	// This field is OPTIONAL. Refer to the `Secrets Requirements`
	// section on how to use this field.
	Secrets              map[string]string `protobuf:"bytes,6,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NodeExpandVolumeRequest) Reset()         { *m = NodeExpandVolumeRequest{} }
func (m *NodeExpandVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*NodeExpandVolumeRequest) ProtoMessage()    {}
func (*NodeExpandVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{60}
}

func (m *NodeExpandVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeExpandVolumeRequest.Unmarshal(m, b)
}
func (m *NodeExpandVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeExpandVolumeRequest.Marshal(b, m, deterministic)
}
func (m *NodeExpandVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeExpandVolumeRequest.Merge(m, src)
}
func (m *NodeExpandVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_NodeExpandVolumeRequest.Size(m)
}
func (m *NodeExpandVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeExpandVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeExpandVolumeRequest proto.InternalMessageInfo

func (m *NodeExpandVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *NodeExpandVolumeRequest) GetVolumePath() string {
	if m != nil {
		return m.VolumePath
	}
	return ""
}

func (m *NodeExpandVolumeRequest) GetCapacityRange() *CapacityRange {
	if m != nil {
		return m.CapacityRange
	}
	return nil
}

func (m *NodeExpandVolumeRequest) GetStagingTargetPath() string {
	if m != nil {
		return m.StagingTargetPath
	}
	return ""
}

func (m *NodeExpandVolumeRequest) GetVolumeCapability() *VolumeCapability {
	if m != nil {
		return m.VolumeCapability
	}
	return nil
}

func (m *NodeExpandVolumeRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

type NodeExpandVolumeResponse struct {
	// The capacity of the volume in bytes. This field is OPTIONAL.
	CapacityBytes        int64    `protobuf:"varint,1,opt,name=capacity_bytes,json=capacityBytes,proto3" json:"capacity_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeExpandVolumeResponse) Reset()         { *m = NodeExpandVolumeResponse{} }
func (m *NodeExpandVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*NodeExpandVolumeResponse) ProtoMessage()    {}
func (*NodeExpandVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{61}
}

func (m *NodeExpandVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeExpandVolumeResponse.Unmarshal(m, b)
}
func (m *NodeExpandVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeExpandVolumeResponse.Marshal(b, m, deterministic)
}
func (m *NodeExpandVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeExpandVolumeResponse.Merge(m, src)
}
func (m *NodeExpandVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_NodeExpandVolumeResponse.Size(m)
}
func (m *NodeExpandVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeExpandVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodeExpandVolumeResponse proto.InternalMessageInfo

func (m *NodeExpandVolumeResponse) GetCapacityBytes() int64 {
	if m != nil {
		return m.CapacityBytes
	}
	return 0
}

type GroupControllerGetCapabilitiesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupControllerGetCapabilitiesRequest) Reset()         { *m = GroupControllerGetCapabilitiesRequest{} }
func (m *GroupControllerGetCapabilitiesRequest) String() string { return proto.CompactTextString(m) }
func (*GroupControllerGetCapabilitiesRequest) ProtoMessage()    {}
func (*GroupControllerGetCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{62}
}

func (m *GroupControllerGetCapabilitiesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupControllerGetCapabilitiesRequest.Unmarshal(m, b)
}
func (m *GroupControllerGetCapabilitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupControllerGetCapabilitiesRequest.Marshal(b, m, deterministic)
}
func (m *GroupControllerGetCapabilitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupControllerGetCapabilitiesRequest.Merge(m, src)
}
func (m *GroupControllerGetCapabilitiesRequest) XXX_Size() int {
	return xxx_messageInfo_GroupControllerGetCapabilitiesRequest.Size(m)
}
func (m *GroupControllerGetCapabilitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupControllerGetCapabilitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GroupControllerGetCapabilitiesRequest proto.InternalMessageInfo

type GroupControllerGetCapabilitiesResponse struct {
	// All the capabilities that the group controller service supports.
	// This field is OPTIONAL.
	Capabilities         []*GroupControllerServiceCapability `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *GroupControllerGetCapabilitiesResponse) Reset() {
	*m = GroupControllerGetCapabilitiesResponse{}
}
func (m *GroupControllerGetCapabilitiesResponse) String() string { return proto.CompactTextString(m) }
func (*GroupControllerGetCapabilitiesResponse) ProtoMessage()    {}
func (*GroupControllerGetCapabilitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{63}
}

func (m *GroupControllerGetCapabilitiesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupControllerGetCapabilitiesResponse.Unmarshal(m, b)
}
func (m *GroupControllerGetCapabilitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupControllerGetCapabilitiesResponse.Marshal(b, m, deterministic)
}
func (m *GroupControllerGetCapabilitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupControllerGetCapabilitiesResponse.Merge(m, src)
}
func (m *GroupControllerGetCapabilitiesResponse) XXX_Size() int {
	return xxx_messageInfo_GroupControllerGetCapabilitiesResponse.Size(m)
}
func (m *GroupControllerGetCapabilitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupControllerGetCapabilitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GroupControllerGetCapabilitiesResponse proto.InternalMessageInfo

func (m *GroupControllerGetCapabilitiesResponse) GetCapabilities() []*GroupControllerServiceCapability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

// Specifies a capability of the group controller service.
type GroupControllerServiceCapability struct {
	// Types that are valid to be assigned to Type:
	//
	//	*GroupControllerServiceCapability_Rpc
	Type                 isGroupControllerServiceCapability_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *GroupControllerServiceCapability) Reset()         { *m = GroupControllerServiceCapability{} }
func (m *GroupControllerServiceCapability) String() string { return proto.CompactTextString(m) }
func (*GroupControllerServiceCapability) ProtoMessage()    {}
func (*GroupControllerServiceCapability) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{64}
}

func (m *GroupControllerServiceCapability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupControllerServiceCapability.Unmarshal(m, b)
}
func (m *GroupControllerServiceCapability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupControllerServiceCapability.Marshal(b, m, deterministic)
}
func (m *GroupControllerServiceCapability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupControllerServiceCapability.Merge(m, src)
}
func (m *GroupControllerServiceCapability) XXX_Size() int {
	return xxx_messageInfo_GroupControllerServiceCapability.Size(m)
}
func (m *GroupControllerServiceCapability) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupControllerServiceCapability.DiscardUnknown(m)
}

var xxx_messageInfo_GroupControllerServiceCapability proto.InternalMessageInfo

type isGroupControllerServiceCapability_Type interface {
	isGroupControllerServiceCapability_Type()
}

type GroupControllerServiceCapability_Rpc struct {
	Rpc *GroupControllerServiceCapability_RPC `protobuf:"bytes,1,opt,name=rpc,proto3,oneof"`
}

func (*GroupControllerServiceCapability_Rpc) isGroupControllerServiceCapability_Type() {}

func (m *GroupControllerServiceCapability) GetType() isGroupControllerServiceCapability_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *GroupControllerServiceCapability) GetRpc() *GroupControllerServiceCapability_RPC {
	if x, ok := m.GetType().(*GroupControllerServiceCapability_Rpc); ok {
		return x.Rpc
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GroupControllerServiceCapability) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GroupControllerServiceCapability_Rpc)(nil),
	}
}

type GroupControllerServiceCapability_RPC struct {
	Type                 GroupControllerServiceCapability_RPC_Type `protobuf:"varint,1,opt,name=type,proto3,enum=csi.v1.GroupControllerServiceCapability_RPC_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *GroupControllerServiceCapability_RPC) Reset()         { *m = GroupControllerServiceCapability_RPC{} }
func (m *GroupControllerServiceCapability_RPC) String() string { return proto.CompactTextString(m) }
func (*GroupControllerServiceCapability_RPC) ProtoMessage()    {}
func (*GroupControllerServiceCapability_RPC) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{64, 0}
}

func (m *GroupControllerServiceCapability_RPC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupControllerServiceCapability_RPC.Unmarshal(m, b)
}
func (m *GroupControllerServiceCapability_RPC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupControllerServiceCapability_RPC.Marshal(b, m, deterministic)
}
func (m *GroupControllerServiceCapability_RPC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupControllerServiceCapability_RPC.Merge(m, src)
}
func (m *GroupControllerServiceCapability_RPC) XXX_Size() int {
	return xxx_messageInfo_GroupControllerServiceCapability_RPC.Size(m)
}
func (m *GroupControllerServiceCapability_RPC) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupControllerServiceCapability_RPC.DiscardUnknown(m)
}

var xxx_messageInfo_GroupControllerServiceCapability_RPC proto.InternalMessageInfo

func (m *GroupControllerServiceCapability_RPC) GetType() GroupControllerServiceCapability_RPC_Type {
	if m != nil {
		return m.Type
	}
	return GroupControllerServiceCapability_RPC_UNKNOWN
}

type CreateVolumeGroupSnapshotRequest struct {
	// The suggested name for the group snapshot. This field is REQUIRED
	// for idempotency.
	// Any Unicode string that conforms to the length limit is allowed
	// except those containing the following banned characters:
	// U+0000-U+0008, U+000B, U+000C, U+000E-U+001F, U+007F-U+009F.
	// (These are control characters other than commonly used whitespace.)
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// volume IDs of the source volumes to be snapshotted together.
	// This field is REQUIRED.
	SourceVolumeIds []string `protobuf:"bytes,2,rep,name=source_volume_ids,json=sourceVolumeIds,proto3" json:"source_volume_ids,omitempty"`
	// Secrets required by plugin to complete
	// ControllerCreateVolumeGroupSnapshot request.
	// This field is OPTIONAL. Refer to the `Secrets Requirements`
	// section on how to use this field.
	// The secrets provided in this field SHOULD be the same for
	// all group snapshot operations on the same group snapshot.
	Secrets map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Plugin specific parameters passed in as opaque key-value pairs.
	// This field is OPTIONAL. The Plugin is responsible for parsing and
	// validating these parameters. COs will treat these as opaque.
	Parameters           map[string]string `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateVolumeGroupSnapshotRequest) Reset()         { *m = CreateVolumeGroupSnapshotRequest{} }
func (m *CreateVolumeGroupSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*CreateVolumeGroupSnapshotRequest) ProtoMessage()    {}
func (*CreateVolumeGroupSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{65}
}

func (m *CreateVolumeGroupSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVolumeGroupSnapshotRequest.Unmarshal(m, b)
}
func (m *CreateVolumeGroupSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVolumeGroupSnapshotRequest.Marshal(b, m, deterministic)
}
func (m *CreateVolumeGroupSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVolumeGroupSnapshotRequest.Merge(m, src)
}
func (m *CreateVolumeGroupSnapshotRequest) XXX_Size() int {
	return xxx_messageInfo_CreateVolumeGroupSnapshotRequest.Size(m)
}
func (m *CreateVolumeGroupSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVolumeGroupSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVolumeGroupSnapshotRequest proto.InternalMessageInfo

func (m *CreateVolumeGroupSnapshotRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateVolumeGroupSnapshotRequest) GetSourceVolumeIds() []string {
	if m != nil {
		return m.SourceVolumeIds
	}
	return nil
}

func (m *CreateVolumeGroupSnapshotRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *CreateVolumeGroupSnapshotRequest) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type CreateVolumeGroupSnapshotResponse struct {
	// Contains all attributes of the newly created group snapshot.
	// This field is REQUIRED.
	GroupSnapshot        *VolumeGroupSnapshot `protobuf:"bytes,1,opt,name=group_snapshot,json=groupSnapshot,proto3" json:"group_snapshot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CreateVolumeGroupSnapshotResponse) Reset()         { *m = CreateVolumeGroupSnapshotResponse{} }
func (m *CreateVolumeGroupSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*CreateVolumeGroupSnapshotResponse) ProtoMessage()    {}
func (*CreateVolumeGroupSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{66}
}

func (m *CreateVolumeGroupSnapshotResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVolumeGroupSnapshotResponse.Unmarshal(m, b)
}
func (m *CreateVolumeGroupSnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVolumeGroupSnapshotResponse.Marshal(b, m, deterministic)
}
func (m *CreateVolumeGroupSnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVolumeGroupSnapshotResponse.Merge(m, src)
}
func (m *CreateVolumeGroupSnapshotResponse) XXX_Size() int {
	return xxx_messageInfo_CreateVolumeGroupSnapshotResponse.Size(m)
}
func (m *CreateVolumeGroupSnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVolumeGroupSnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVolumeGroupSnapshotResponse proto.InternalMessageInfo

func (m *CreateVolumeGroupSnapshotResponse) GetGroupSnapshot() *VolumeGroupSnapshot {
	if m != nil {
		return m.GroupSnapshot
	}
	return nil
}

type VolumeGroupSnapshot struct {
	// The identifier for this group snapshot, generated by the plugin.
	// This field MUST contain enough information to uniquely identify
	// this specific snapshot vs all other group snapshots supported by
	// this plugin.
	// This field SHALL be used by the CO in subsequent calls to refer to
	// this group snapshot.
	// The SP is NOT responsible for global uniqueness of
	// group_snapshot_id across multiple SPs.
	// This field is REQUIRED.
	GroupSnapshotId string `protobuf:"bytes,1,opt,name=group_snapshot_id,json=groupSnapshotId,proto3" json:"group_snapshot_id,omitempty"`
	// A list of snapshots belonging to this group.
	// This field is REQUIRED.
	Snapshots []*Snapshot `protobuf:"bytes,2,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
	// Timestamp of when the volume group snapshot was taken.
	// This field is REQUIRED.
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// Indicates if all individual snapshots in the group snapshot
	// are ready to use as a `volume_content_source` in a
	// `CreateVolumeRequest`. The default value is false.
	// If any snapshot in the list of snapshots in this message have
	// ready_to_use set to false, the SP MUST set this field to false.
	// If all of the snapshots in the list of snapshots in this message
	// have ready_to_use set to true, the SP SHOULD set this field to
	// true.
	// This field is REQUIRED.
	ReadyToUse           bool     `protobuf:"varint,4,opt,name=ready_to_use,json=readyToUse,proto3" json:"ready_to_use,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeGroupSnapshot) Reset()         { *m = VolumeGroupSnapshot{} }
func (m *VolumeGroupSnapshot) String() string { return proto.CompactTextString(m) }
func (*VolumeGroupSnapshot) ProtoMessage()    {}
func (*VolumeGroupSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{67}
}

func (m *VolumeGroupSnapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeGroupSnapshot.Unmarshal(m, b)
}
func (m *VolumeGroupSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeGroupSnapshot.Marshal(b, m, deterministic)
}
func (m *VolumeGroupSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeGroupSnapshot.Merge(m, src)
}
func (m *VolumeGroupSnapshot) XXX_Size() int {
	return xxx_messageInfo_VolumeGroupSnapshot.Size(m)
}
func (m *VolumeGroupSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeGroupSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeGroupSnapshot proto.InternalMessageInfo

func (m *VolumeGroupSnapshot) GetGroupSnapshotId() string {
	if m != nil {
		return m.GroupSnapshotId
	}
	return ""
}

func (m *VolumeGroupSnapshot) GetSnapshots() []*Snapshot {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

func (m *VolumeGroupSnapshot) GetCreationTime() *timestamppb.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *VolumeGroupSnapshot) GetReadyToUse() bool {
	if m != nil {
		return m.ReadyToUse
	}
	return false
}

type DeleteVolumeGroupSnapshotRequest struct {
	// The ID of the group snapshot to be deleted.
	// This field is REQUIRED.
	GroupSnapshotId string `protobuf:"bytes,1,opt,name=group_snapshot_id,json=groupSnapshotId,proto3" json:"group_snapshot_id,omitempty"`
	// A list of snapshot IDs that are part of this group snapshot.
	// If SP does not need to rely on this field to delete the snapshots
	// in the group, it SHOULD check this field and report an error
	// if it has the ability to detect a mismatch.
	// Some SPs require this list to delete the snapshots in the group.
	// If SP needs to use this field to delete the snapshots in the
	// group, it MUST report an error if it has the ability to detect
	// a mismatch.
	// This field is REQUIRED.
	SnapshotIds []string `protobuf:"bytes,2,rep,name=snapshot_ids,json=snapshotIds,proto3" json:"snapshot_ids,omitempty"`
	// Secrets required by plugin to complete group snapshot deletion
	// request.
	// This field is OPTIONAL. Refer to the `Secrets Requirements`
	// section on how to use this field.
	// The secrets provided in this field SHOULD be the same for
	// all group snapshot operations on the same group snapshot.
	Secrets              map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DeleteVolumeGroupSnapshotRequest) Reset()         { *m = DeleteVolumeGroupSnapshotRequest{} }
func (m *DeleteVolumeGroupSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteVolumeGroupSnapshotRequest) ProtoMessage()    {}
func (*DeleteVolumeGroupSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{68}
}

func (m *DeleteVolumeGroupSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteVolumeGroupSnapshotRequest.Unmarshal(m, b)
}
func (m *DeleteVolumeGroupSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteVolumeGroupSnapshotRequest.Marshal(b, m, deterministic)
}
func (m *DeleteVolumeGroupSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteVolumeGroupSnapshotRequest.Merge(m, src)
}
func (m *DeleteVolumeGroupSnapshotRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteVolumeGroupSnapshotRequest.Size(m)
}
func (m *DeleteVolumeGroupSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteVolumeGroupSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteVolumeGroupSnapshotRequest proto.InternalMessageInfo

func (m *DeleteVolumeGroupSnapshotRequest) GetGroupSnapshotId() string {
	if m != nil {
		return m.GroupSnapshotId
	}
	return ""
}

func (m *DeleteVolumeGroupSnapshotRequest) GetSnapshotIds() []string {
	if m != nil {
		return m.SnapshotIds
	}
	return nil
}

func (m *DeleteVolumeGroupSnapshotRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

type DeleteVolumeGroupSnapshotResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteVolumeGroupSnapshotResponse) Reset()         { *m = DeleteVolumeGroupSnapshotResponse{} }
func (m *DeleteVolumeGroupSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteVolumeGroupSnapshotResponse) ProtoMessage()    {}
func (*DeleteVolumeGroupSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{69}
}

func (m *DeleteVolumeGroupSnapshotResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteVolumeGroupSnapshotResponse.Unmarshal(m, b)
}
func (m *DeleteVolumeGroupSnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteVolumeGroupSnapshotResponse.Marshal(b, m, deterministic)
}
func (m *DeleteVolumeGroupSnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteVolumeGroupSnapshotResponse.Merge(m, src)
}
func (m *DeleteVolumeGroupSnapshotResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteVolumeGroupSnapshotResponse.Size(m)
}
func (m *DeleteVolumeGroupSnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteVolumeGroupSnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteVolumeGroupSnapshotResponse proto.InternalMessageInfo

type GetVolumeGroupSnapshotRequest struct {
	// The ID of the group snapshot to fetch current group snapshot
	// information for.
	// This field is REQUIRED.
	GroupSnapshotId string `protobuf:"bytes,1,opt,name=group_snapshot_id,json=groupSnapshotId,proto3" json:"group_snapshot_id,omitempty"`
	// A list of snapshot IDs that are part of this group snapshot.
	// If SP does not need to rely on this field to get the snapshots
	// in the group, it SHOULD check this field and report an error
	// if it has the ability to detect a mismatch.
	// Some SPs require this list to get the snapshots in the group.
	// If SP needs to use this field to get the snapshots in the
	// group, it MUST report an error if it has the ability to detect
	// a mismatch.
	// This field is REQUIRED.
	SnapshotIds []string `protobuf:"bytes,2,rep,name=snapshot_ids,json=snapshotIds,proto3" json:"snapshot_ids,omitempty"`
	// Secrets required by plugin to complete
	// GetVolumeGroupSnapshot request.
	// This field is OPTIONAL. Refer to the `Secrets Requirements`
	// section on how to use this field.
	// The secrets provided in this field SHOULD be the same for
	// all group snapshot operations on the same group snapshot.
	Secrets              map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetVolumeGroupSnapshotRequest) Reset()         { *m = GetVolumeGroupSnapshotRequest{} }
func (m *GetVolumeGroupSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*GetVolumeGroupSnapshotRequest) ProtoMessage()    {}
func (*GetVolumeGroupSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{70}
}

func (m *GetVolumeGroupSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVolumeGroupSnapshotRequest.Unmarshal(m, b)
}
func (m *GetVolumeGroupSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVolumeGroupSnapshotRequest.Marshal(b, m, deterministic)
}
func (m *GetVolumeGroupSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVolumeGroupSnapshotRequest.Merge(m, src)
}
func (m *GetVolumeGroupSnapshotRequest) XXX_Size() int {
	return xxx_messageInfo_GetVolumeGroupSnapshotRequest.Size(m)
}
func (m *GetVolumeGroupSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVolumeGroupSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVolumeGroupSnapshotRequest proto.InternalMessageInfo

func (m *GetVolumeGroupSnapshotRequest) GetGroupSnapshotId() string {
	if m != nil {
		return m.GroupSnapshotId
	}
	return ""
}

func (m *GetVolumeGroupSnapshotRequest) GetSnapshotIds() []string {
	if m != nil {
		return m.SnapshotIds
	}
	return nil
}

func (m *GetVolumeGroupSnapshotRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

type GetVolumeGroupSnapshotResponse struct {
	// This field is REQUIRED
	GroupSnapshot        *VolumeGroupSnapshot `protobuf:"bytes,1,opt,name=group_snapshot,json=groupSnapshot,proto3" json:"group_snapshot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetVolumeGroupSnapshotResponse) Reset()         { *m = GetVolumeGroupSnapshotResponse{} }
func (m *GetVolumeGroupSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*GetVolumeGroupSnapshotResponse) ProtoMessage()    {}
func (*GetVolumeGroupSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{71}
}

func (m *GetVolumeGroupSnapshotResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVolumeGroupSnapshotResponse.Unmarshal(m, b)
}
func (m *GetVolumeGroupSnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVolumeGroupSnapshotResponse.Marshal(b, m, deterministic)
}
func (m *GetVolumeGroupSnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVolumeGroupSnapshotResponse.Merge(m, src)
}
func (m *GetVolumeGroupSnapshotResponse) XXX_Size() int {
	return xxx_messageInfo_GetVolumeGroupSnapshotResponse.Size(m)
}
func (m *GetVolumeGroupSnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVolumeGroupSnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVolumeGroupSnapshotResponse proto.InternalMessageInfo

func (m *GetVolumeGroupSnapshotResponse) GetGroupSnapshot() *VolumeGroupSnapshot {
	if m != nil {
		return m.GroupSnapshot
	}
	return nil
}

// BlockMetadata specifies a data range.
type BlockMetadata struct {
	// This is the zero based byte position in the volume or snapshot,
	// measured from the start of the object.
	// This field is REQUIRED.
	ByteOffset int64 `protobuf:"varint,1,opt,name=byte_offset,json=byteOffset,proto3" json:"byte_offset,omitempty"`
	// This is the size of the data range.
	// size_bytes MUST be greater than zero.
	// This field is REQUIRED.
	SizeBytes            int64    `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockMetadata) Reset()         { *m = BlockMetadata{} }
func (m *BlockMetadata) String() string { return proto.CompactTextString(m) }
func (*BlockMetadata) ProtoMessage()    {}
func (*BlockMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{72}
}

func (m *BlockMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockMetadata.Unmarshal(m, b)
}
func (m *BlockMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockMetadata.Marshal(b, m, deterministic)
}
func (m *BlockMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockMetadata.Merge(m, src)
}
func (m *BlockMetadata) XXX_Size() int {
	return xxx_messageInfo_BlockMetadata.Size(m)
}
func (m *BlockMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_BlockMetadata proto.InternalMessageInfo

func (m *BlockMetadata) GetByteOffset() int64 {
	if m != nil {
		return m.ByteOffset
	}
	return 0
}

func (m *BlockMetadata) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

// The GetMetadataAllocatedRequest message is used to solicit metadata
// on the allocated blocks of a snapshot: i.e. this identifies the
// data ranges that have valid data as they were the target of some
// previous write operation on the volume.
type GetMetadataAllocatedRequest struct {
	// This is the identifier of the snapshot.
	// This field is REQUIRED.
	SnapshotId string `protobuf:"bytes,1,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	// This indicates the zero based starting byte position in the volume
	// snapshot from which the result should be computed.
	// It is intended to be used to continue a previously interrupted
	// call.
	// The CO SHOULD specify this value to be the offset of the byte
	// position immediately after the last byte of the last data range
	// received, if continuing an interrupted operation, or zero if not.
	// The SP MUST ensure that the returned response stream does not
	// contain BlockMetadata tuples that end before the requested
	// starting_offset: i.e. if S is the requested starting_offset, and
	// B0 is block_metadata[0] of the first message in the response
	// stream, then (S < B0.byte_offset + B0.size_bytes) must be true.
	// This field is REQUIRED.
	StartingOffset int64 `protobuf:"varint,2,opt,name=starting_offset,json=startingOffset,proto3" json:"starting_offset,omitempty"`
	// This is an optional parameter, and if non-zero it specifies the
	// maximum number of tuples to be returned in each
	// GetMetadataAllocatedResponse message returned by the RPC stream.
	// The plugin will determine an appropriate value if 0, and is
	// always free to send less than the requested value.
	// This field is OPTIONAL.
	MaxResults int32 `protobuf:"varint,3,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
	// Secrets required by plugin to complete the request.
	// This field is OPTIONAL. Refer to the `Secrets Requirements`
	// section on how to use this field.
	Secrets              map[string]string `protobuf:"bytes,4,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetMetadataAllocatedRequest) Reset()         { *m = GetMetadataAllocatedRequest{} }
func (m *GetMetadataAllocatedRequest) String() string { return proto.CompactTextString(m) }
func (*GetMetadataAllocatedRequest) ProtoMessage()    {}
func (*GetMetadataAllocatedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{73}
}

func (m *GetMetadataAllocatedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMetadataAllocatedRequest.Unmarshal(m, b)
}
func (m *GetMetadataAllocatedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMetadataAllocatedRequest.Marshal(b, m, deterministic)
}
func (m *GetMetadataAllocatedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetadataAllocatedRequest.Merge(m, src)
}
func (m *GetMetadataAllocatedRequest) XXX_Size() int {
	return xxx_messageInfo_GetMetadataAllocatedRequest.Size(m)
}
func (m *GetMetadataAllocatedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetadataAllocatedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetadataAllocatedRequest proto.InternalMessageInfo

func (m *GetMetadataAllocatedRequest) GetSnapshotId() string {
	if m != nil {
		return m.SnapshotId
	}
	return ""
}

func (m *GetMetadataAllocatedRequest) GetStartingOffset() int64 {
	if m != nil {
		return m.StartingOffset
	}
	return 0
}

func (m *GetMetadataAllocatedRequest) GetMaxResults() int32 {
	if m != nil {
		return m.MaxResults
	}
	return 0
}

func (m *GetMetadataAllocatedRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

// GetMetadataAllocatedResponse messages are returned in a gRPC stream.
// Cumulatively, they provide information on the allocated data
// ranges in the snapshot.
type GetMetadataAllocatedResponse struct {
	// This specifies the style used in the BlockMetadata sequence.
	// This value must be the same in all such messages returned by
	// the stream.
	// If block_metadata_type is FIXED_LENGTH, then the size_bytes field
	// of each message in the block_metadata list MUST be constant.
	// This field is REQUIRED.
	BlockMetadataType BlockMetadataType `protobuf:"varint,1,opt,name=block_metadata_type,json=blockMetadataType,proto3,enum=csi.v1.BlockMetadataType" json:"block_metadata_type,omitempty"`
	// This returns the capacity of the underlying volume in bytes.
	// This value must be the same in all such messages returned by
	// the stream.
	// This field is REQUIRED.
	VolumeCapacityBytes int64 `protobuf:"varint,2,opt,name=volume_capacity_bytes,json=volumeCapacityBytes,proto3" json:"volume_capacity_bytes,omitempty"`
	// This is a list of data range tuples.
	// If the value of max_results in the GetMetadataAllocatedRequest
	// message is greater than zero, then the number of entries in this
	// list MUST be less than or equal to that value.
	// The SP MUST respect the value of starting_offset in the request.
	// The byte_offset fields of adjacent BlockMetadata messages
	// MUST be strictly increasing and messages MUST NOT overlap:
	// i.e. for any two BlockMetadata messages, A and B, if A is returned
	// before B, then (A.byte_offset + A.size_bytes <= B.byte_offset)
	// MUST be true.
	// This MUST also be true if A and B are from block_metadata lists in
	// different GetMetadataAllocatedResponse messages in the gRPC stream.
	// This field is OPTIONAL.
	BlockMetadata        []*BlockMetadata `protobuf:"bytes,3,rep,name=block_metadata,json=blockMetadata,proto3" json:"block_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetMetadataAllocatedResponse) Reset()         { *m = GetMetadataAllocatedResponse{} }
func (m *GetMetadataAllocatedResponse) String() string { return proto.CompactTextString(m) }
func (*GetMetadataAllocatedResponse) ProtoMessage()    {}
func (*GetMetadataAllocatedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{74}
}

func (m *GetMetadataAllocatedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMetadataAllocatedResponse.Unmarshal(m, b)
}
func (m *GetMetadataAllocatedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMetadataAllocatedResponse.Marshal(b, m, deterministic)
}
func (m *GetMetadataAllocatedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetadataAllocatedResponse.Merge(m, src)
}
func (m *GetMetadataAllocatedResponse) XXX_Size() int {
	return xxx_messageInfo_GetMetadataAllocatedResponse.Size(m)
}
func (m *GetMetadataAllocatedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetadataAllocatedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetadataAllocatedResponse proto.InternalMessageInfo

func (m *GetMetadataAllocatedResponse) GetBlockMetadataType() BlockMetadataType {
	if m != nil {
		return m.BlockMetadataType
	}
	return BlockMetadataType_UNKNOWN
}

func (m *GetMetadataAllocatedResponse) GetVolumeCapacityBytes() int64 {
	if m != nil {
		return m.VolumeCapacityBytes
	}
	return 0
}

func (m *GetMetadataAllocatedResponse) GetBlockMetadata() []*BlockMetadata {
	if m != nil {
		return m.BlockMetadata
	}
	return nil
}

// The GetMetadataDeltaRequest message is used to solicit metadata on
// the data ranges that have changed between two snapshots.
type GetMetadataDeltaRequest struct {
	// This is the identifier of the snapshot against which changes
	// are to be computed.
	// This field is REQUIRED.
	BaseSnapshotId string `protobuf:"bytes,1,opt,name=base_snapshot_id,json=baseSnapshotId,proto3" json:"base_snapshot_id,omitempty"`
	// This is the identifier of a second snapshot in the same volume,
	// created after the base snapshot.
	// This field is REQUIRED.
	TargetSnapshotId string `protobuf:"bytes,2,opt,name=target_snapshot_id,json=targetSnapshotId,proto3" json:"target_snapshot_id,omitempty"`
	// This indicates the zero based starting byte position in the volume
	// snapshot from which the result should be computed.
	// It is intended to be used to continue a previously interrupted
	// call.
	// The CO SHOULD specify this value to be the offset of the byte
	// position immediately after the last byte of the last data range
	// received, if continuing an interrupted operation, or zero if not.
	// The SP MUST ensure that the returned response stream does not
	// contain BlockMetadata tuples that end before the requested
	// starting_offset: i.e. if S is the requested starting_offset, and
	// B0 is block_metadata[0] of the first message in the response
	// stream, then (S < B0.byte_offset + B0.size_bytes) must be true.
	// This field is REQUIRED.
	StartingOffset int64 `protobuf:"varint,3,opt,name=starting_offset,json=startingOffset,proto3" json:"starting_offset,omitempty"`
	// This is an optional parameter, and if non-zero it specifies the
	// maximum number of tuples to be returned in each
	// GetMetadataDeltaResponse message returned by the RPC stream.
	// The plugin will determine an appropriate value if 0, and is
	// always free to send less than the requested value.
	// This field is OPTIONAL.
	MaxResults int32 `protobuf:"varint,4,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
	// Secrets required by plugin to complete the request.
	// This field is OPTIONAL. Refer to the `Secrets Requirements`
	// section on how to use this field.
	Secrets              map[string]string `protobuf:"bytes,5,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetMetadataDeltaRequest) Reset()         { *m = GetMetadataDeltaRequest{} }
func (m *GetMetadataDeltaRequest) String() string { return proto.CompactTextString(m) }
func (*GetMetadataDeltaRequest) ProtoMessage()    {}
func (*GetMetadataDeltaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{75}
}

func (m *GetMetadataDeltaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMetadataDeltaRequest.Unmarshal(m, b)
}
func (m *GetMetadataDeltaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMetadataDeltaRequest.Marshal(b, m, deterministic)
}
func (m *GetMetadataDeltaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetadataDeltaRequest.Merge(m, src)
}
func (m *GetMetadataDeltaRequest) XXX_Size() int {
	return xxx_messageInfo_GetMetadataDeltaRequest.Size(m)
}
func (m *GetMetadataDeltaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetadataDeltaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetadataDeltaRequest proto.InternalMessageInfo

func (m *GetMetadataDeltaRequest) GetBaseSnapshotId() string {
	if m != nil {
		return m.BaseSnapshotId
	}
	return ""
}

func (m *GetMetadataDeltaRequest) GetTargetSnapshotId() string {
	if m != nil {
		return m.TargetSnapshotId
	}
	return ""
}

func (m *GetMetadataDeltaRequest) GetStartingOffset() int64 {
	if m != nil {
		return m.StartingOffset
	}
	return 0
}

func (m *GetMetadataDeltaRequest) GetMaxResults() int32 {
	if m != nil {
		return m.MaxResults
	}
	return 0
}

func (m *GetMetadataDeltaRequest) GetSecrets() map[string]string {
	if m != nil {
		return m.Secrets
	}
	return nil
}

// GetMetadataDeltaResponse messages are returned in a gRPC stream.
// Cumulatively, they provide information on the data ranges that
// have changed between the base and target snapshots specified
// in the GetMetadataDeltaRequest message.
type GetMetadataDeltaResponse struct {
	// This specifies the style used in the BlockMetadata sequence.
	// This value must be the same in all such messages returned by
	// the stream.
	// If block_metadata_type is FIXED_LENGTH, then the size_bytes field
	// of each message in the block_metadata list MUST be constant.
	// This field is REQUIRED.
	BlockMetadataType BlockMetadataType `protobuf:"varint,1,opt,name=block_metadata_type,json=blockMetadataType,proto3,enum=csi.v1.BlockMetadataType" json:"block_metadata_type,omitempty"`
	// This returns the capacity of the underlying volume in bytes.
	// This value must be the same in all such messages returned by
	// the stream.
	// This field is REQUIRED.
	VolumeCapacityBytes int64 `protobuf:"varint,2,opt,name=volume_capacity_bytes,json=volumeCapacityBytes,proto3" json:"volume_capacity_bytes,omitempty"`
	// This is a list of data range tuples.
	// If the value of max_results in the GetMetadataDeltaRequest message
	// is greater than zero, then the number of entries in this list MUST
	// be less than or equal to that value.
	// The SP MUST respect the value of starting_offset in the request.
	// The byte_offset fields of adjacent BlockMetadata messages
	// MUST be strictly increasing and messages MUST NOT overlap:
	// i.e. for any two BlockMetadata messages, A and B, if A is returned
	// before B, then (A.byte_offset + A.size_bytes <= B.byte_offset)
	// MUST be true.
	// This MUST also be true if A and B are from block_metadata lists in
	// different GetMetadataDeltaResponse messages in the gRPC stream.
	// This field is OPTIONAL.
	BlockMetadata        []*BlockMetadata `protobuf:"bytes,3,rep,name=block_metadata,json=blockMetadata,proto3" json:"block_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetMetadataDeltaResponse) Reset()         { *m = GetMetadataDeltaResponse{} }
func (m *GetMetadataDeltaResponse) String() string { return proto.CompactTextString(m) }
func (*GetMetadataDeltaResponse) ProtoMessage()    {}
func (*GetMetadataDeltaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e099a7ef79268152, []int{76}
}

func (m *GetMetadataDeltaResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMetadataDeltaResponse.Unmarshal(m, b)
}
func (m *GetMetadataDeltaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMetadataDeltaResponse.Marshal(b, m, deterministic)
}
func (m *GetMetadataDeltaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetadataDeltaResponse.Merge(m, src)
}
func (m *GetMetadataDeltaResponse) XXX_Size() int {
	return xxx_messageInfo_GetMetadataDeltaResponse.Size(m)
}
func (m *GetMetadataDeltaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetadataDeltaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetadataDeltaResponse proto.InternalMessageInfo

func (m *GetMetadataDeltaResponse) GetBlockMetadataType() BlockMetadataType {
	if m != nil {
		return m.BlockMetadataType
	}
	return BlockMetadataType_UNKNOWN
}

func (m *GetMetadataDeltaResponse) GetVolumeCapacityBytes() int64 {
	if m != nil {
		return m.VolumeCapacityBytes
	}
	return 0
}

func (m *GetMetadataDeltaResponse) GetBlockMetadata() []*BlockMetadata {
	if m != nil {
		return m.BlockMetadata
	}
	return nil
}

var E_AlphaEnum = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.EnumOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1060,
	Name:          "csi.v1.alpha_enum",
	Tag:           "varint,1060,opt,name=alpha_enum",
	Filename:      "csi.proto",
}

var E_AlphaEnumValue = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1060,
	Name:          "csi.v1.alpha_enum_value",
	Tag:           "varint,1060,opt,name=alpha_enum_value",
	Filename:      "csi.proto",
}

var E_CsiSecret = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1059,
	Name:          "csi.v1.csi_secret",
	Tag:           "varint,1059,opt,name=csi_secret",
	Filename:      "csi.proto",
}

var E_AlphaField = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1060,
	Name:          "csi.v1.alpha_field",
	Tag:           "varint,1060,opt,name=alpha_field",
	Filename:      "csi.proto",
}

var E_AlphaMessage = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.MessageOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1060,
	Name:          "csi.v1.alpha_message",
	Tag:           "varint,1060,opt,name=alpha_message",
	Filename:      "csi.proto",
}

var E_AlphaMethod = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.MethodOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1060,
	Name:          "csi.v1.alpha_method",
	Tag:           "varint,1060,opt,name=alpha_method",
	Filename:      "csi.proto",
}

var E_AlphaService = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1060,
	Name:          "csi.v1.alpha_service",
	Tag:           "varint,1060,opt,name=alpha_service",
	Filename:      "csi.proto",
}

func init() {
	proto.RegisterEnum("csi.v1.BlockMetadataType", BlockMetadataType_name, BlockMetadataType_value)
	proto.RegisterEnum("csi.v1.PluginCapability_Service_Type", PluginCapability_Service_Type_name, PluginCapability_Service_Type_value)
	proto.RegisterEnum("csi.v1.PluginCapability_VolumeExpansion_Type", PluginCapability_VolumeExpansion_Type_name, PluginCapability_VolumeExpansion_Type_value)
	proto.RegisterEnum("csi.v1.VolumeCapability_AccessMode_Mode", VolumeCapability_AccessMode_Mode_name, VolumeCapability_AccessMode_Mode_value)
	proto.RegisterEnum("csi.v1.ControllerServiceCapability_RPC_Type", ControllerServiceCapability_RPC_Type_name, ControllerServiceCapability_RPC_Type_value)
	proto.RegisterEnum("csi.v1.VolumeUsage_Unit", VolumeUsage_Unit_name, VolumeUsage_Unit_value)
	proto.RegisterEnum("csi.v1.NodeServiceCapability_RPC_Type", NodeServiceCapability_RPC_Type_name, NodeServiceCapability_RPC_Type_value)
	proto.RegisterEnum("csi.v1.GroupControllerServiceCapability_RPC_Type", GroupControllerServiceCapability_RPC_Type_name, GroupControllerServiceCapability_RPC_Type_value)
	proto.RegisterType((*GetPluginInfoRequest)(nil), "csi.v1.GetPluginInfoRequest")
	proto.RegisterType((*GetPluginInfoResponse)(nil), "csi.v1.GetPluginInfoResponse")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.GetPluginInfoResponse.ManifestEntry")
	proto.RegisterType((*GetPluginCapabilitiesRequest)(nil), "csi.v1.GetPluginCapabilitiesRequest")
	proto.RegisterType((*GetPluginCapabilitiesResponse)(nil), "csi.v1.GetPluginCapabilitiesResponse")
	proto.RegisterType((*PluginCapability)(nil), "csi.v1.PluginCapability")
	proto.RegisterType((*PluginCapability_Service)(nil), "csi.v1.PluginCapability.Service")
	proto.RegisterType((*PluginCapability_VolumeExpansion)(nil), "csi.v1.PluginCapability.VolumeExpansion")
	proto.RegisterType((*ProbeRequest)(nil), "csi.v1.ProbeRequest")
	proto.RegisterType((*ProbeResponse)(nil), "csi.v1.ProbeResponse")
	proto.RegisterType((*CreateVolumeRequest)(nil), "csi.v1.CreateVolumeRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.CreateVolumeRequest.MutableParametersEntry")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.CreateVolumeRequest.ParametersEntry")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.CreateVolumeRequest.SecretsEntry")
	proto.RegisterType((*VolumeContentSource)(nil), "csi.v1.VolumeContentSource")
	proto.RegisterType((*VolumeContentSource_SnapshotSource)(nil), "csi.v1.VolumeContentSource.SnapshotSource")
	proto.RegisterType((*VolumeContentSource_VolumeSource)(nil), "csi.v1.VolumeContentSource.VolumeSource")
	proto.RegisterType((*CreateVolumeResponse)(nil), "csi.v1.CreateVolumeResponse")
	proto.RegisterType((*VolumeCapability)(nil), "csi.v1.VolumeCapability")
	proto.RegisterType((*VolumeCapability_BlockVolume)(nil), "csi.v1.VolumeCapability.BlockVolume")
	proto.RegisterType((*VolumeCapability_MountVolume)(nil), "csi.v1.VolumeCapability.MountVolume")
	proto.RegisterType((*VolumeCapability_AccessMode)(nil), "csi.v1.VolumeCapability.AccessMode")
	proto.RegisterType((*CapacityRange)(nil), "csi.v1.CapacityRange")
	proto.RegisterType((*Volume)(nil), "csi.v1.Volume")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.Volume.VolumeContextEntry")
	proto.RegisterType((*TopologyRequirement)(nil), "csi.v1.TopologyRequirement")
	proto.RegisterType((*Topology)(nil), "csi.v1.Topology")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.Topology.SegmentsEntry")
	proto.RegisterType((*DeleteVolumeRequest)(nil), "csi.v1.DeleteVolumeRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.DeleteVolumeRequest.SecretsEntry")
	proto.RegisterType((*DeleteVolumeResponse)(nil), "csi.v1.DeleteVolumeResponse")
	proto.RegisterType((*ControllerPublishVolumeRequest)(nil), "csi.v1.ControllerPublishVolumeRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.ControllerPublishVolumeRequest.SecretsEntry")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.ControllerPublishVolumeRequest.VolumeContextEntry")
	proto.RegisterType((*ControllerPublishVolumeResponse)(nil), "csi.v1.ControllerPublishVolumeResponse")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.ControllerPublishVolumeResponse.PublishContextEntry")
	proto.RegisterType((*ControllerUnpublishVolumeRequest)(nil), "csi.v1.ControllerUnpublishVolumeRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.ControllerUnpublishVolumeRequest.SecretsEntry")
	proto.RegisterType((*ControllerUnpublishVolumeResponse)(nil), "csi.v1.ControllerUnpublishVolumeResponse")
	proto.RegisterType((*ValidateVolumeCapabilitiesRequest)(nil), "csi.v1.ValidateVolumeCapabilitiesRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.ValidateVolumeCapabilitiesRequest.MutableParametersEntry")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.ValidateVolumeCapabilitiesRequest.ParametersEntry")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.ValidateVolumeCapabilitiesRequest.SecretsEntry")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.ValidateVolumeCapabilitiesRequest.VolumeContextEntry")
	proto.RegisterType((*ValidateVolumeCapabilitiesResponse)(nil), "csi.v1.ValidateVolumeCapabilitiesResponse")
	proto.RegisterType((*ValidateVolumeCapabilitiesResponse_Confirmed)(nil), "csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed.MutableParametersEntry")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed.ParametersEntry")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.ValidateVolumeCapabilitiesResponse.Confirmed.VolumeContextEntry")
	proto.RegisterType((*ListVolumesRequest)(nil), "csi.v1.ListVolumesRequest")
	proto.RegisterType((*ListVolumesResponse)(nil), "csi.v1.ListVolumesResponse")
	proto.RegisterType((*ListVolumesResponse_VolumeStatus)(nil), "csi.v1.ListVolumesResponse.VolumeStatus")
	proto.RegisterType((*ListVolumesResponse_Entry)(nil), "csi.v1.ListVolumesResponse.Entry")
	proto.RegisterType((*ControllerGetVolumeRequest)(nil), "csi.v1.ControllerGetVolumeRequest")
	proto.RegisterType((*ControllerGetVolumeResponse)(nil), "csi.v1.ControllerGetVolumeResponse")
	proto.RegisterType((*ControllerGetVolumeResponse_VolumeStatus)(nil), "csi.v1.ControllerGetVolumeResponse.VolumeStatus")
	proto.RegisterType((*ControllerModifyVolumeRequest)(nil), "csi.v1.ControllerModifyVolumeRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.ControllerModifyVolumeRequest.MutableParametersEntry")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.ControllerModifyVolumeRequest.SecretsEntry")
	proto.RegisterType((*ControllerModifyVolumeResponse)(nil), "csi.v1.ControllerModifyVolumeResponse")
	proto.RegisterType((*GetCapacityRequest)(nil), "csi.v1.GetCapacityRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.GetCapacityRequest.ParametersEntry")
	proto.RegisterType((*GetCapacityResponse)(nil), "csi.v1.GetCapacityResponse")
	proto.RegisterType((*ControllerGetCapabilitiesRequest)(nil), "csi.v1.ControllerGetCapabilitiesRequest")
	proto.RegisterType((*ControllerGetCapabilitiesResponse)(nil), "csi.v1.ControllerGetCapabilitiesResponse")
	proto.RegisterType((*ControllerServiceCapability)(nil), "csi.v1.ControllerServiceCapability")
	proto.RegisterType((*ControllerServiceCapability_RPC)(nil), "csi.v1.ControllerServiceCapability.RPC")
	proto.RegisterType((*CreateSnapshotRequest)(nil), "csi.v1.CreateSnapshotRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.CreateSnapshotRequest.ParametersEntry")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.CreateSnapshotRequest.SecretsEntry")
	proto.RegisterType((*CreateSnapshotResponse)(nil), "csi.v1.CreateSnapshotResponse")
	proto.RegisterType((*Snapshot)(nil), "csi.v1.Snapshot")
	proto.RegisterType((*DeleteSnapshotRequest)(nil), "csi.v1.DeleteSnapshotRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.DeleteSnapshotRequest.SecretsEntry")
	proto.RegisterType((*DeleteSnapshotResponse)(nil), "csi.v1.DeleteSnapshotResponse")
	proto.RegisterType((*ListSnapshotsRequest)(nil), "csi.v1.ListSnapshotsRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.ListSnapshotsRequest.SecretsEntry")
	proto.RegisterType((*ListSnapshotsResponse)(nil), "csi.v1.ListSnapshotsResponse")
	proto.RegisterType((*ListSnapshotsResponse_Entry)(nil), "csi.v1.ListSnapshotsResponse.Entry")
	proto.RegisterType((*ControllerExpandVolumeRequest)(nil), "csi.v1.ControllerExpandVolumeRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.ControllerExpandVolumeRequest.SecretsEntry")
	proto.RegisterType((*ControllerExpandVolumeResponse)(nil), "csi.v1.ControllerExpandVolumeResponse")
	proto.RegisterType((*NodeStageVolumeRequest)(nil), "csi.v1.NodeStageVolumeRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.NodeStageVolumeRequest.PublishContextEntry")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.NodeStageVolumeRequest.SecretsEntry")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.NodeStageVolumeRequest.VolumeContextEntry")
	proto.RegisterType((*NodeStageVolumeResponse)(nil), "csi.v1.NodeStageVolumeResponse")
	proto.RegisterType((*NodeUnstageVolumeRequest)(nil), "csi.v1.NodeUnstageVolumeRequest")
	proto.RegisterType((*NodeUnstageVolumeResponse)(nil), "csi.v1.NodeUnstageVolumeResponse")
	proto.RegisterType((*NodePublishVolumeRequest)(nil), "csi.v1.NodePublishVolumeRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.NodePublishVolumeRequest.PublishContextEntry")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.NodePublishVolumeRequest.SecretsEntry")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.NodePublishVolumeRequest.VolumeContextEntry")
	proto.RegisterType((*NodePublishVolumeResponse)(nil), "csi.v1.NodePublishVolumeResponse")
	proto.RegisterType((*NodeUnpublishVolumeRequest)(nil), "csi.v1.NodeUnpublishVolumeRequest")
	proto.RegisterType((*NodeUnpublishVolumeResponse)(nil), "csi.v1.NodeUnpublishVolumeResponse")
	proto.RegisterType((*NodeGetVolumeStatsRequest)(nil), "csi.v1.NodeGetVolumeStatsRequest")
	proto.RegisterType((*NodeGetVolumeStatsResponse)(nil), "csi.v1.NodeGetVolumeStatsResponse")
	proto.RegisterType((*VolumeUsage)(nil), "csi.v1.VolumeUsage")
	proto.RegisterType((*VolumeCondition)(nil), "csi.v1.VolumeCondition")
	proto.RegisterType((*NodeGetCapabilitiesRequest)(nil), "csi.v1.NodeGetCapabilitiesRequest")
	proto.RegisterType((*NodeGetCapabilitiesResponse)(nil), "csi.v1.NodeGetCapabilitiesResponse")
	proto.RegisterType((*NodeServiceCapability)(nil), "csi.v1.NodeServiceCapability")
	proto.RegisterType((*NodeServiceCapability_RPC)(nil), "csi.v1.NodeServiceCapability.RPC")
	proto.RegisterType((*NodeGetInfoRequest)(nil), "csi.v1.NodeGetInfoRequest")
	proto.RegisterType((*NodeGetInfoResponse)(nil), "csi.v1.NodeGetInfoResponse")
	proto.RegisterType((*NodeExpandVolumeRequest)(nil), "csi.v1.NodeExpandVolumeRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.NodeExpandVolumeRequest.SecretsEntry")
	proto.RegisterType((*NodeExpandVolumeResponse)(nil), "csi.v1.NodeExpandVolumeResponse")
	proto.RegisterType((*GroupControllerGetCapabilitiesRequest)(nil), "csi.v1.GroupControllerGetCapabilitiesRequest")
	proto.RegisterType((*GroupControllerGetCapabilitiesResponse)(nil), "csi.v1.GroupControllerGetCapabilitiesResponse")
	proto.RegisterType((*GroupControllerServiceCapability)(nil), "csi.v1.GroupControllerServiceCapability")
	proto.RegisterType((*GroupControllerServiceCapability_RPC)(nil), "csi.v1.GroupControllerServiceCapability.RPC")
	proto.RegisterType((*CreateVolumeGroupSnapshotRequest)(nil), "csi.v1.CreateVolumeGroupSnapshotRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.CreateVolumeGroupSnapshotRequest.ParametersEntry")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.CreateVolumeGroupSnapshotRequest.SecretsEntry")
	proto.RegisterType((*CreateVolumeGroupSnapshotResponse)(nil), "csi.v1.CreateVolumeGroupSnapshotResponse")
	proto.RegisterType((*VolumeGroupSnapshot)(nil), "csi.v1.VolumeGroupSnapshot")
	proto.RegisterType((*DeleteVolumeGroupSnapshotRequest)(nil), "csi.v1.DeleteVolumeGroupSnapshotRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.DeleteVolumeGroupSnapshotRequest.SecretsEntry")
	proto.RegisterType((*DeleteVolumeGroupSnapshotResponse)(nil), "csi.v1.DeleteVolumeGroupSnapshotResponse")
	proto.RegisterType((*GetVolumeGroupSnapshotRequest)(nil), "csi.v1.GetVolumeGroupSnapshotRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.GetVolumeGroupSnapshotRequest.SecretsEntry")
	proto.RegisterType((*GetVolumeGroupSnapshotResponse)(nil), "csi.v1.GetVolumeGroupSnapshotResponse")
	proto.RegisterType((*BlockMetadata)(nil), "csi.v1.BlockMetadata")
	proto.RegisterType((*GetMetadataAllocatedRequest)(nil), "csi.v1.GetMetadataAllocatedRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.GetMetadataAllocatedRequest.SecretsEntry")
	proto.RegisterType((*GetMetadataAllocatedResponse)(nil), "csi.v1.GetMetadataAllocatedResponse")
	proto.RegisterType((*GetMetadataDeltaRequest)(nil), "csi.v1.GetMetadataDeltaRequest")
	proto.RegisterMapType((map[string]string)(nil), "csi.v1.GetMetadataDeltaRequest.SecretsEntry")
	proto.RegisterType((*GetMetadataDeltaResponse)(nil), "csi.v1.GetMetadataDeltaResponse")
	proto.RegisterExtension(E_AlphaEnum)
	proto.RegisterExtension(E_AlphaEnumValue)
	proto.RegisterExtension(E_CsiSecret)
	proto.RegisterExtension(E_AlphaField)
	proto.RegisterExtension(E_AlphaMessage)
	proto.RegisterExtension(E_AlphaMethod)
	proto.RegisterExtension(E_AlphaService)
}

func init() {
	proto.RegisterFile("csi.proto", fileDescriptor_e099a7ef79268152)
}

var fileDescriptor_e099a7ef79268152 = []byte{
	// 4666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x3c, 0x4d, 0x6c, 0x23, 0x59,
	0x5a, 0x29, 0xdb, 0x71, 0x92, 0x2f, 0x7f, 0xce, 0xcb, 0x4f, 0xbb, 0x2b, 0xfd, 0x93, 0x54, 0x4f,
	0xcf, 0x64, 0x7a, 0xd2, 0xee, 0x9e, 0xec, 0x4c, 0x6b, 0x26, 0xd3, 0xb3, 0xdb, 0x76, 0xe2, 0x4e,
	0xbc, 0xed, 0xd8, 0x99, 0xb2, 0xd3, 0x33, 0xdd, 0x30, 0xaa, 0xa9, 0xd8, 0x2f, 0xe9, 0xd2, 0xd8,
	0x2e, 0x8f, 0xab, 0x1c, 0x3a, 0xcb, 0x61, 0x61, 0x57, 0x88, 0x5d, 0x71, 0x41, 0x20, 0x60, 0x24,
	0x24, 0x58, 0x01, 0xc7, 0x45, 0x2b, 0x84, 0x10, 0x07, 0x0e, 0x5c, 0xb8, 0xc0, 0x89, 0x1b, 0x2c,
	0x1c, 0xf6, 0x80, 0x04, 0xd2, 0x0a, 0xa4, 0x3d, 0x20, 0x0e, 0x9c, 0x50, 0xbd, 0xf7, 0xea, 0xff,
	0x55, 0xd9, 0xee, 0x74, 0xb3, 0x2c, 0x7b, 0x8a, 0xeb, 0xbd, 0xef, 0x7d, 0xdf, 0xf7, 0x7e, 0xbe,
	0xff, 0xf7, 0x02, 0x53, 0x0d, 0x43, 0xcb, 0x75, 0x7b, 0xba, 0xa9, 0xa3, 0xb4, 0xf5, 0xf3, 0xec,
	0x6d, 0x71, 0xed, 0x54, 0xd7, 0x4f, 0x5b, 0xf8, 0x0e, 0x69, 0x3d, 0xee, 0x9f, 0xdc, 0x69, 0x62,
	0xa3, 0xd1, 0xd3, 0xba, 0xa6, 0xde, 0xa3, 0x90, 0xe2, 0xf5, 0x20, 0x84, 0xa9, 0xb5, 0xb1, 0x61,
	0xaa, 0xed, 0x2e, 0x03, 0xb8, 0x16, 0x04, 0xf8, 0xa5, 0x9e, 0xda, 0xed, 0xe2, 0x9e, 0x41, 0xfb,
	0xa5, 0x15, 0x58, 0xda, 0xc3, 0xe6, 0x61, 0xab, 0x7f, 0xaa, 0x75, 0x4a, 0x9d, 0x13, 0x5d, 0xc6,
	0x5f, 0xf4, 0xb1, 0x61, 0x4a, 0xff, 0x28, 0xc0, 0x72, 0xa0, 0xc3, 0xe8, 0xea, 0x1d, 0x03, 0x23,
	0x04, 0xa9, 0x8e, 0xda, 0xc6, 0x59, 0x61, 0x4d, 0xd8, 0x98, 0x92, 0xc9, 0x6f, 0x74, 0x13, 0xe6,
	0xce, 0x70, 0xa7, 0xa9, 0xf7, 0x94, 0x33, 0xdc, 0x33, 0x34, 0xbd, 0x93, 0x4d, 0x90, 0xde, 0x59,
	0xda, 0xfa, 0x98, 0x36, 0xa2, 0x3d, 0x98, 0x6c, 0xab, 0x1d, 0xed, 0x04, 0x1b, 0x66, 0x36, 0xb9,
	0x96, 0xdc, 0x98, 0xde, 0x7a, 0x2b, 0x47, 0xa7, 0x9a, 0xe3, 0xd2, 0xca, 0x1d, 0x30, 0xe8, 0x62,
	0xc7, 0xec, 0x9d, 0xcb, 0xce, 0x60, 0xf1, 0x03, 0x98, 0xf5, 0x75, 0xa1, 0x0c, 0x24, 0x3f, 0xc7,
	0xe7, 0x8c, 0x27, 0xeb, 0x27, 0x5a, 0x82, 0xf1, 0x33, 0xb5, 0xd5, 0xc7, 0x8c, 0x13, 0xfa, 0xb1,
	0x9d, 0x78, 0x4f, 0x90, 0xae, 0xc1, 0x15, 0x87, 0xda, 0x8e, 0xda, 0x55, 0x8f, 0xb5, 0x96, 0x66,
	0x6a, 0xd8, 0xb0, 0xa7, 0xfe, 0x29, 0x5c, 0x8d, 0xe8, 0x67, 0x2b, 0x70, 0x1f, 0x66, 0x1a, 0x9e,
	0xf6, 0xac, 0x40, 0xa6, 0x92, 0xb5, 0xa7, 0x12, 0x18, 0x79, 0x2e, 0xfb, 0xa0, 0xa5, 0xdf, 0x4d,
	0x41, 0x26, 0x08, 0x82, 0xee, 0xc3, 0x84, 0x81, 0x7b, 0x67, 0x5a, 0x83, 0xae, 0xeb, 0xf4, 0xd6,
	0x5a, 0x14, 0xb6, 0x5c, 0x8d, 0xc2, 0xed, 0x8f, 0xc9, 0xf6, 0x10, 0x74, 0x04, 0x99, 0x33, 0xbd,
	0xd5, 0x6f, 0x63, 0x05, 0x3f, 0xef, 0xaa, 0x1d, 0x67, 0x03, 0xa6, 0xb7, 0x36, 0x22, 0xd1, 0x3c,
	0x26, 0x03, 0x8a, 0x36, 0xfc, 0xfe, 0x98, 0x3c, 0x7f, 0xe6, 0x6f, 0x12, 0x7f, 0x24, 0xc0, 0x04,
	0xa3, 0x86, 0xde, 0x87, 0x94, 0x79, 0xde, 0xa5, 0xdc, 0xcd, 0x6d, 0xdd, 0x1c, 0xc4, 0x5d, 0xae,
	0x7e, 0xde, 0xc5, 0x32, 0x19, 0x22, 0x7d, 0x29, 0x40, 0xca, 0xfa, 0x44, 0xd3, 0x30, 0x71, 0x54,
	0x79, 0x54, 0xa9, 0x7e, 0x5c, 0xc9, 0x8c, 0xa1, 0x15, 0x40, 0x3b, 0xd5, 0x4a, 0x5d, 0xae, 0x96,
	0xcb, 0x45, 0x59, 0xa9, 0x15, 0xe5, 0xc7, 0xa5, 0x9d, 0x62, 0x46, 0x40, 0xaf, 0xc1, 0xda, 0xe3,
	0x6a, 0xf9, 0xe8, 0xa0, 0xa8, 0xe4, 0x77, 0x76, 0x8a, 0xb5, 0x5a, 0xa9, 0x50, 0x2a, 0x97, 0xea,
	0x4f, 0x94, 0x9d, 0x6a, 0xa5, 0x56, 0x97, 0xf3, 0xa5, 0x4a, 0xbd, 0x96, 0x49, 0xa0, 0x75, 0xc8,
	0xee, 0xc9, 0xd5, 0xa3, 0x43, 0x85, 0x83, 0x23, 0x29, 0x26, 0xbf, 0x57, 0x10, 0x90, 0x04, 0x97,
	0x6b, 0x95, 0xfc, 0x61, 0x6d, 0xbf, 0x5a, 0x57, 0x0e, 0x8a, 0xf5, 0xfc, 0x6e, 0xbe, 0x9e, 0x77,
	0x60, 0x52, 0x04, 0x46, 0xfc, 0x96, 0x00, 0xf3, 0x81, 0x85, 0x40, 0x79, 0xdf, 0x4c, 0x6f, 0x0f,
	0xbb, 0x80, 0xde, 0x19, 0x6f, 0xf2, 0x26, 0x0c, 0x90, 0xae, 0x56, 0xca, 0xa5, 0x8a, 0x35, 0xc9,
	0x69, 0x98, 0xa8, 0x3e, 0x7c, 0x48, 0x3e, 0x12, 0x85, 0x34, 0x25, 0x28, 0xcd, 0xc1, 0xcc, 0x61,
	0x4f, 0x3f, 0xc6, 0xf6, 0x39, 0xcc, 0xc3, 0x2c, 0xfb, 0x66, 0xe7, 0xee, 0x2e, 0x8c, 0xf7, 0xb0,
	0xda, 0x3c, 0x67, 0x47, 0x44, 0xcc, 0x51, 0xd9, 0xce, 0xd9, 0xb2, 0x9d, 0x2b, 0xe8, 0x7a, 0xeb,
	0xb1, 0x75, 0xce, 0x65, 0x0a, 0x28, 0xfd, 0x41, 0x1a, 0x16, 0x77, 0x7a, 0x58, 0x35, 0x31, 0xe5,
	0x96, 0xa1, 0xe6, 0xca, 0xf0, 0x7d, 0x98, 0xb3, 0xce, 0x69, 0x43, 0x33, 0xcf, 0x95, 0x9e, 0xda,
	0x39, 0xc5, 0xec, 0x08, 0x2d, 0xdb, 0x2b, 0xb0, 0xc3, 0x7a, 0x65, 0xab, 0x53, 0x9e, 0x6d, 0x78,
	0x3f, 0x51, 0x09, 0x16, 0xd9, 0x11, 0xf4, 0x89, 0x46, 0xd2, 0x2f, 0x1a, 0x94, 0x0b, 0x8f, 0x68,
	0xa0, 0x33, 0x7f, 0x8b, 0x86, 0x0d, 0xf4, 0x08, 0xa0, 0xab, 0xf6, 0xd4, 0x36, 0x36, 0x71, 0xcf,
	0xc8, 0xa6, 0xfc, 0x7a, 0x82, 0x33, 0x9b, 0xdc, 0xa1, 0x03, 0x4d, 0xf5, 0x84, 0x67, 0x38, 0xda,
	0xb3, 0x04, 0xab, 0xd1, 0xc3, 0xa6, 0x91, 0x1d, 0x27, 0x98, 0x36, 0xe2, 0x30, 0xd5, 0x28, 0x28,
	0x41, 0x53, 0x48, 0x7e, 0x59, 0x10, 0x64, 0x7b, 0x34, 0xaa, 0xc2, 0xb2, 0x3d, 0x41, 0xbd, 0x63,
	0xe2, 0x8e, 0xa9, 0x18, 0x7a, 0xbf, 0xd7, 0xc0, 0xd9, 0x34, 0x59, 0xa5, 0xd5, 0xc0, 0x14, 0x29,
	0x4c, 0x8d, 0x80, 0xc8, 0x6c, 0x69, 0x7c, 0x8d, 0xe8, 0x29, 0x88, 0x6a, 0xa3, 0x81, 0x0d, 0x43,
	0xa3, 0x6b, 0xa1, 0xf4, 0xf0, 0x17, 0x7d, 0xad, 0x87, 0xdb, 0xb8, 0x63, 0x1a, 0xd9, 0x09, 0x3f,
	0xd6, 0xba, 0xde, 0xd5, 0x5b, 0xfa, 0xe9, 0xb9, 0xec, 0xc2, 0xc8, 0x97, 0x7d, 0xc3, 0x3d, 0x3d,
	0x06, 0x3a, 0x01, 0xd4, 0xee, 0x9b, 0xea, 0x71, 0x0b, 0x2b, 0x9e, 0xa5, 0x9c, 0x24, 0x0b, 0xb0,
	0x15, 0xb7, 0x00, 0x07, 0x74, 0x54, 0x60, 0x45, 0x0b, 0x96, 0xb0, 0xc8, 0x0b, 0xed, 0x60, 0xa7,
	0xf8, 0x21, 0xcc, 0x07, 0x40, 0x47, 0xd1, 0xc4, 0xe2, 0x36, 0xcc, 0x78, 0x57, 0x7c, 0xa4, 0xb1,
	0xbb, 0xb0, 0xc2, 0x67, 0x76, 0x24, 0x5b, 0xf0, 0x1b, 0x09, 0x58, 0xe4, 0xec, 0x18, 0xda, 0x87,
	0x49, 0xa3, 0xa3, 0x76, 0x8d, 0x67, 0xba, 0xc9, 0xa4, 0xed, 0x56, 0xcc, 0x06, 0xe7, 0x6a, 0x0c,
	0x96, 0x7e, 0xee, 0x8f, 0xc9, 0xce, 0x68, 0x54, 0x80, 0x34, 0xdd, 0xfd, 0xa0, 0x46, 0xe6, 0xe1,
	0xa1, 0x6d, 0x0e, 0x16, 0x36, 0x52, 0x7c, 0x1b, 0xe6, 0xfc, 0x14, 0xd0, 0x75, 0x98, 0xb6, 0x29,
	0x28, 0x5a, 0x93, 0xcd, 0x15, 0xec, 0xa6, 0x52, 0x53, 0x7c, 0x0b, 0x66, 0xbc, 0xc8, 0xd0, 0x2a,
	0x4c, 0xb1, 0xe3, 0xeb, 0x80, 0x4f, 0xd2, 0x86, 0x52, 0xd3, 0xd1, 0x40, 0x5f, 0x85, 0x25, 0xff,
	0xa1, 0x60, 0x8a, 0xe7, 0x75, 0x67, 0x0e, 0x74, 0x2d, 0xe6, 0xfc, 0x73, 0xb0, 0xf9, 0x94, 0xfe,
	0x70, 0x1c, 0x32, 0x41, 0x11, 0x47, 0xf7, 0x61, 0xfc, 0xb8, 0xa5, 0x37, 0x3e, 0x67, 0x63, 0x5f,
	0x8b, 0xd2, 0x05, 0xb9, 0x82, 0x05, 0x45, 0x5b, 0xf7, 0xc7, 0x64, 0x3a, 0xc8, 0x1a, 0xdd, 0xd6,
	0xfb, 0x1d, 0x93, 0xad, 0x5e, 0xf4, 0xe8, 0x03, 0x0b, 0xca, 0x1d, 0x4d, 0x06, 0xa1, 0x5d, 0x98,
	0xa6, 0x42, 0xa2, 0xb4, 0xf5, 0x26, 0xce, 0x26, 0x09, 0x8e, 0x1b, 0x91, 0x38, 0xf2, 0x04, 0xf6,
	0x40, 0x6f, 0x62, 0x19, 0x54, 0xe7, 0xb7, 0x38, 0x0b, 0xd3, 0x1e, 0xde, 0xc4, 0x3e, 0x4c, 0x7b,
	0x88, 0xa1, 0x4b, 0x30, 0x71, 0x62, 0x28, 0x8e, 0xc9, 0x98, 0x92, 0xd3, 0x27, 0x06, 0xd1, 0xfe,
	0xd7, 0x61, 0x9a, 0x70, 0xa1, 0x9c, 0xb4, 0xd4, 0x53, 0x23, 0x9b, 0x58, 0x4b, 0x5a, 0x7b, 0x44,
	0x9a, 0x1e, 0x5a, 0x2d, 0x68, 0x13, 0x98, 0xfa, 0x53, 0x28, 0xdc, 0x69, 0x4f, 0xef, 0x77, 0x09,
	0x93, 0x53, 0x32, 0x33, 0xe8, 0x84, 0xd0, 0x9e, 0xd5, 0x2e, 0xfe, 0x79, 0x02, 0xc0, 0x65, 0x10,
	0xdd, 0x87, 0x14, 0x99, 0x13, 0x35, 0x53, 0x1b, 0x43, 0xcc, 0x29, 0x47, 0x26, 0x46, 0x46, 0x49,
	0xff, 0x2a, 0x40, 0x8a, 0xa0, 0x09, 0xda, 0xe4, 0x5a, 0xa9, 0xb2, 0x57, 0x2e, 0x2a, 0x95, 0xea,
	0x6e, 0x51, 0xf9, 0x58, 0x2e, 0xd5, 0x8b, 0x72, 0x46, 0x40, 0xab, 0x70, 0xc9, 0xdb, 0x2e, 0x17,
	0xf3, 0xbb, 0x45, 0x59, 0xa9, 0x56, 0xca, 0x4f, 0x32, 0x09, 0x24, 0xc2, 0xca, 0xc1, 0x51, 0xb9,
	0x5e, 0x0a, 0xf7, 0x25, 0xd1, 0x15, 0xc8, 0x7a, 0xfa, 0x18, 0x0e, 0x86, 0x36, 0x65, 0xa1, 0xf5,
	0xf4, 0xd2, 0x9f, 0xac, 0x73, 0x9c, 0x98, 0x6f, 0x0f, 0x4d, 0xff, 0xd8, 0x34, 0x35, 0xf1, 0xeb,
	0x90, 0xf5, 0xc2, 0xf8, 0x30, 0x4c, 0x10, 0x90, 0xc2, 0xac, 0x73, 0x02, 0xc8, 0x09, 0xff, 0x18,
	0x66, 0x7d, 0x66, 0xcc, 0xf2, 0x5c, 0x99, 0xde, 0x6d, 0x2a, 0xc7, 0xe7, 0x26, 0xf1, 0xe6, 0x84,
	0x8d, 0xa4, 0x3c, 0x6b, 0xb7, 0x16, 0xac, 0x46, 0x6b, 0x2f, 0x5b, 0x5a, 0x5b, 0x33, 0x19, 0x4c,
	0x82, 0xc0, 0x00, 0x69, 0x22, 0x00, 0xd2, 0x8f, 0x12, 0x90, 0x66, 0x07, 0xe2, 0xa6, 0xc7, 0x90,
	0xfa, 0x50, 0xda, 0xad, 0x14, 0xa5, 0x4f, 0x22, 0x13, 0x7e, 0x89, 0x44, 0xfb, 0x30, 0xe7, 0xb5,
	0x36, 0xcf, 0x6d, 0x7f, 0x79, 0xdd, 0xbf, 0xcf, 0x5e, 0x25, 0xf2, 0x9c, 0x79, 0xc9, 0xb3, 0x67,
	0xde, 0x36, 0x54, 0x80, 0xb9, 0x80, 0xc1, 0x4a, 0x0d, 0x36, 0x58, 0xb3, 0x0d, 0x9f, 0x36, 0xcc,
	0xc3, 0xa2, 0x6d, 0x6b, 0x5a, 0x58, 0x31, 0x99, 0x2d, 0x62, 0x06, 0x35, 0x13, 0xb2, 0x51, 0xc8,
	0x05, 0xb6, 0xdb, 0xc4, 0x07, 0x80, 0xc2, 0xbc, 0x8e, 0xa4, 0xaa, 0xfb, 0xb0, 0xc8, 0xb1, 0x82,
	0x28, 0x07, 0x53, 0x64, 0xab, 0x0c, 0xcd, 0xc4, 0xcc, 0x13, 0x0f, 0x73, 0xe4, 0x82, 0x58, 0xf0,
	0xdd, 0x1e, 0x3e, 0xc1, 0xbd, 0x1e, 0x6e, 0x12, 0x99, 0xe4, 0xc2, 0x3b, 0x20, 0xd2, 0xb7, 0x05,
	0x98, 0xb4, 0xdb, 0xd1, 0x36, 0x4c, 0x1a, 0xf8, 0x94, 0x5a, 0x68, 0x4a, 0xeb, 0x5a, 0x70, 0x6c,
	0xae, 0xc6, 0x00, 0x58, 0xcc, 0x62, 0xc3, 0x5b, 0x31, 0x8b, 0xaf, 0x6b, 0xa4, 0xc9, 0xff, 0xa5,
	0x00, 0x8b, 0xbb, 0xb8, 0x85, 0x83, 0x8e, 0x5c, 0x9c, 0x5a, 0xf7, 0xfa, 0x3e, 0x09, 0xbf, 0xef,
	0xc3, 0x41, 0x15, 0xe3, 0xfb, 0x5c, 0xc4, 0x4e, 0x5b, 0x01, 0xa6, 0x9f, 0x1a, 0xb5, 0x29, 0xd2,
	0x7f, 0x24, 0xe1, 0x9a, 0x75, 0x16, 0x7a, 0x7a, 0xab, 0x85, 0x7b, 0x87, 0xfd, 0xe3, 0x96, 0x66,
	0x3c, 0x1b, 0x61, 0x72, 0x97, 0x60, 0xa2, 0xa3, 0x37, 0x3d, 0xc2, 0x93, 0xb6, 0x3e, 0x4b, 0x4d,
	0x54, 0x84, 0x85, 0xa0, 0x27, 0x7a, 0xce, 0x34, 0x7f, 0xb4, 0x1f, 0x9a, 0x39, 0x0b, 0x9a, 0x2d,
	0x11, 0x26, 0x2d, 0x1f, 0x5a, 0xef, 0xb4, 0xce, 0x89, 0xc4, 0x4c, 0xca, 0xce, 0x37, 0x92, 0x83,
	0x4e, 0xe5, 0x57, 0x1c, 0x9f, 0x2a, 0x76, 0x46, 0x71, 0xfe, 0xe5, 0x67, 0x21, 0x89, 0x4f, 0x13,
	0xd4, 0xef, 0x0f, 0x89, 0x7a, 0xa0, 0x26, 0xb8, 0x90, 0xb7, 0x75, 0x71, 0xf1, 0xfd, 0x3b, 0x01,
	0xae, 0x47, 0x4e, 0x81, 0xf9, 0x19, 0x4d, 0x98, 0xef, 0xd2, 0x0e, 0x67, 0x11, 0xa8, 0x94, 0x7d,
	0x30, 0x70, 0x11, 0x58, 0xc2, 0x80, 0xb5, 0xfa, 0x96, 0x61, 0xae, 0xeb, 0x6b, 0x14, 0xf3, 0xb0,
	0xc8, 0x01, 0x1b, 0x69, 0x32, 0x3f, 0x16, 0x60, 0xcd, 0x65, 0xe5, 0xa8, 0xd3, 0x7d, 0x79, 0xc7,
	0xb7, 0xee, 0x9e, 0x2d, 0xaa, 0xf2, 0xdf, 0x0d, 0xcf, 0x9d, 0x4f, 0xf0, 0x55, 0x49, 0xf0, 0x0d,
	0x58, 0x8f, 0x21, 0xcd, 0xc4, 0xf9, 0xf7, 0xd3, 0xb0, 0xfe, 0x58, 0x6d, 0x69, 0x4d, 0xc7, 0x7b,
	0xe4, 0xa4, 0x56, 0xe2, 0x97, 0xa4, 0x11, 0x92, 0x00, 0xaa, 0xb5, 0xee, 0x3b, 0x52, 0x3b, 0x08,
	0xff, 0x10, 0xe6, 0xf0, 0x25, 0xc6, 0xa9, 0x4f, 0x38, 0x71, 0xea, 0xfb, 0xc3, 0xf3, 0x1a, 0x17,
	0xb5, 0x1e, 0x05, 0x15, 0xcc, 0xbd, 0xe1, 0xf1, 0xc6, 0xe8, 0x18, 0x93, 0x1b, 0x16, 0x52, 0x3d,
	0xf3, 0x60, 0x78, 0x0a, 0x23, 0x06, 0x89, 0x17, 0xd6, 0x1d, 0x3f, 0xfb, 0x61, 0xe6, 0x77, 0xd3,
	0x20, 0xc5, 0xad, 0x2b, 0xd3, 0x7f, 0x32, 0x4c, 0x35, 0xf4, 0xce, 0x89, 0xd6, 0x6b, 0xe3, 0x26,
	0x0b, 0x97, 0xde, 0x19, 0x66, 0x5b, 0x98, 0xf2, 0xdb, 0xb1, 0xc7, 0xca, 0x2e, 0x1a, 0x94, 0x85,
	0x89, 0x36, 0x36, 0x0c, 0xf5, 0xd4, 0x66, 0xcb, 0xfe, 0x14, 0xff, 0x33, 0x05, 0x53, 0xce, 0x10,
	0xd4, 0x09, 0x49, 0x1f, 0x55, 0xbd, 0x7b, 0x2f, 0xc2, 0xc0, 0x8b, 0x0b, 0x62, 0xe2, 0x05, 0x04,
	0xb1, 0xe9, 0x13, 0x44, 0x2a, 0xca, 0xbb, 0x2f, 0xc4, 0x76, 0x9c, 0x4c, 0x7e, 0x93, 0x2b, 0x3c,
	0x54, 0xec, 0x1f, 0xbd, 0x10, 0xb5, 0x9f, 0x35, 0x39, 0x7a, 0x39, 0xb2, 0xf0, 0x8b, 0x80, 0xca,
	0x9a, 0xc1, 0xa2, 0x67, 0xc7, 0x32, 0x58, 0xc1, 0xb2, 0xfa, 0x5c, 0xc1, 0x1d, 0xb3, 0xa7, 0xb1,
	0x88, 0x69, 0x5c, 0x86, 0xb6, 0xfa, 0xbc, 0x48, 0x5b, 0xac, 0xa8, 0xca, 0x30, 0xd5, 0x9e, 0xa9,
	0x75, 0x4e, 0x15, 0x53, 0xff, 0x1c, 0x3b, 0x25, 0x06, 0xbb, 0xb5, 0x6e, 0x35, 0x4a, 0xff, 0x9e,
	0x80, 0x45, 0x1f, 0x7a, 0x26, 0x5a, 0x1f, 0xc0, 0x84, 0x8b, 0xdb, 0x17, 0x49, 0x71, 0xa0, 0x73,
	0x74, 0xf7, 0xed, 0x11, 0xe8, 0x2a, 0x40, 0x07, 0x3f, 0x37, 0x7d, 0x74, 0xa7, 0xac, 0x16, 0x42,
	0x53, 0xfc, 0x35, 0xc1, 0x49, 0xb6, 0x98, 0xaa, 0xd9, 0x27, 0x81, 0x3d, 0xb3, 0x92, 0xb8, 0xa9,
	0x30, 0x33, 0x4f, 0xe9, 0x4e, 0xc9, 0x19, 0xa7, 0xa7, 0x42, 0x0c, 0xbe, 0x81, 0xf6, 0x9c, 0xec,
	0x7d, 0x43, 0xef, 0x34, 0x35, 0xd3, 0xcd, 0xde, 0x5f, 0x0a, 0xc5, 0x68, 0xb4, 0x9b, 0x1e, 0x91,
	0xf9, 0x33, 0x7f, 0xab, 0xf8, 0x05, 0x8c, 0xd3, 0xed, 0x18, 0x32, 0x5f, 0x83, 0x1e, 0x40, 0xda,
	0x20, 0x1c, 0x07, 0x73, 0x53, 0xbc, 0x35, 0xf1, 0xce, 0x50, 0x66, 0xe3, 0xa4, 0xaf, 0x82, 0xe8,
	0xfa, 0x06, 0x7b, 0xd8, 0x1c, 0xde, 0x03, 0xda, 0xb6, 0xe6, 0x20, 0xfd, 0x5e, 0x02, 0x56, 0xb9,
	0x08, 0x46, 0xcb, 0x3c, 0xa1, 0xfd, 0xc0, 0x4c, 0xee, 0x86, 0x9d, 0xa6, 0x10, 0x72, 0xee, 0x8c,
	0xc4, 0x5f, 0xb9, 0xd8, 0x66, 0x16, 0x46, 0xde, 0xcc, 0xd0, 0x3e, 0xd2, 0x95, 0xf9, 0x76, 0x12,
	0xae, 0xba, 0xcc, 0x1f, 0xe8, 0x4d, 0xed, 0xe4, 0x7c, 0x04, 0xff, 0xf2, 0xa3, 0x60, 0xec, 0xb7,
	0x15, 0x5e, 0x11, 0x0e, 0xd2, 0x38, 0xef, 0xe1, 0x73, 0xae, 0x02, 0x4c, 0xfa, 0x7d, 0xb4, 0x78,
	0xec, 0x7c, 0xf5, 0xc1, 0x53, 0x76, 0x3f, 0x75, 0x9b, 0x4d, 0x77, 0xe1, 0xa6, 0x37, 0x48, 0xf5,
	0xcf, 0x88, 0x1e, 0x22, 0x0a, 0xf6, 0xa7, 0x09, 0x40, 0x7b, 0xd8, 0x74, 0x52, 0x4b, 0x6c, 0x87,
	0x22, 0x6c, 0x9c, 0xf0, 0x02, 0x36, 0xee, 0xeb, 0x3e, 0x1b, 0x47, 0xb7, 0xf4, 0x96, 0xa7, 0x78,
	0x1a, 0x20, 0x1d, 0x6b, 0xc9, 0x22, 0xd2, 0x39, 0x34, 0x46, 0x1e, 0x2e, 0x9d, 0x73, 0x31, 0x4b,
	0x22, 0xfd, 0x8b, 0x00, 0x8b, 0x3e, 0xa6, 0x99, 0xb8, 0xdf, 0x06, 0xa4, 0x9e, 0xa9, 0x5a, 0x8b,
	0x1c, 0x32, 0x3b, 0x5d, 0xc6, 0xd2, 0x67, 0x0b, 0x4e, 0x8f, 0x3d, 0x0c, 0x3d, 0x82, 0xc5, 0xb6,
	0xfa, 0x5c, 0x6b, 0xf7, 0xdb, 0x0a, 0x5b, 0x67, 0x43, 0xfb, 0x86, 0x9d, 0x68, 0x5f, 0x0d, 0x95,
	0xc7, 0x4a, 0x1d, 0xf3, 0xde, 0x3b, 0xb4, 0x3e, 0xb6, 0xc0, 0xc6, 0x31, 0x49, 0xd7, 0xbe, 0x81,
	0xd1, 0x21, 0x2c, 0xb6, 0xb5, 0x4e, 0x08, 0x59, 0x72, 0x20, 0x32, 0xdb, 0x60, 0xd3, 0xc1, 0x2e,
	0x46, 0x49, 0xf2, 0x06, 0x89, 0x6c, 0xba, 0xc1, 0x62, 0x73, 0xcb, 0x1b, 0x5c, 0x85, 0x60, 0xd8,
	0xb2, 0xec, 0x71, 0x0b, 0xce, 0x37, 0xc2, 0x32, 0xc7, 0xaa, 0xaf, 0x71, 0xb5, 0xe7, 0xd5, 0x18,
	0x68, 0xf4, 0x01, 0x24, 0x7b, 0xdd, 0x06, 0xd3, 0xb5, 0x6f, 0x0c, 0x81, 0x3f, 0x27, 0x1f, 0xee,
	0xec, 0x8f, 0xc9, 0xd6, 0x28, 0xf1, 0xcf, 0x92, 0x90, 0x94, 0x0f, 0x77, 0xd0, 0x03, 0x5f, 0x01,
	0x75, 0x73, 0x48, 0x2c, 0xde, 0xfa, 0xe9, 0xbf, 0x25, 0x78, 0x05, 0xd4, 0x2c, 0x2c, 0xed, 0xc8,
	0xc5, 0x7c, 0xbd, 0xa8, 0xec, 0x16, 0xcb, 0xc5, 0x7a, 0x51, 0xa1, 0x75, 0xe2, 0x8c, 0x80, 0xae,
	0x40, 0xf6, 0xf0, 0xa8, 0x50, 0x2e, 0xd5, 0xf6, 0x95, 0xa3, 0x8a, 0xfd, 0x8b, 0xf5, 0x26, 0x50,
	0x06, 0x66, 0xca, 0xa5, 0x5a, 0x9d, 0x35, 0xd4, 0x32, 0x49, 0xab, 0x65, 0xaf, 0x58, 0x57, 0x76,
	0xf2, 0x87, 0xf9, 0x9d, 0x52, 0xfd, 0x49, 0x26, 0x85, 0x44, 0x58, 0xf1, 0xe3, 0xb6, 0x4b, 0xc7,
	0x99, 0x71, 0x84, 0x60, 0x8e, 0x8c, 0xb7, 0x9b, 0x6a, 0x99, 0xb4, 0x85, 0x61, 0xa7, 0x5c, 0xad,
	0x38, 0x3c, 0x4c, 0xa0, 0x25, 0xc8, 0xd8, 0x94, 0xe5, 0x62, 0x7e, 0x97, 0x24, 0xc0, 0x27, 0xd1,
	0x02, 0xcc, 0x16, 0x3f, 0x39, 0xcc, 0x57, 0x76, 0x6d, 0xc0, 0x29, 0xb4, 0x06, 0x57, 0xbc, 0xec,
	0x28, 0x6c, 0x54, 0x71, 0x97, 0x24, 0xb1, 0x6b, 0x19, 0x40, 0x97, 0x21, 0xc3, 0x4a, 0xe0, 0x3b,
	0xd5, 0xca, 0x6e, 0xa9, 0x5e, 0xaa, 0x56, 0x32, 0xd3, 0x34, 0xe3, 0xbd, 0x08, 0x60, 0x71, 0xce,
	0x90, 0xcd, 0x0c, 0x4e, 0x83, 0xcf, 0x52, 0x90, 0x15, 0x98, 0x3d, 0xa8, 0xee, 0x96, 0x1e, 0x3e,
	0xb1, 0x87, 0xce, 0xd1, 0xf4, 0xb8, 0x5d, 0xf9, 0xf9, 0x71, 0x02, 0x96, 0x69, 0xe9, 0xc7, 0x2e,
	0x34, 0xd9, 0x3a, 0x6c, 0x03, 0x32, 0x34, 0x6f, 0xac, 0x04, 0x8d, 0xcd, 0x1c, 0x6d, 0x7f, 0x6c,
	0x9b, 0x1c, 0xbb, 0xa8, 0x9c, 0xf0, 0x14, 0x95, 0x4b, 0xc1, 0x6c, 0xc6, 0x2d, 0x7f, 0xf5, 0x31,
	0x40, 0x2d, 0xce, 0xfc, 0x1c, 0x70, 0xc2, 0xed, 0xdb, 0xf1, 0xd8, 0x62, 0x94, 0xe0, 0x85, 0x0c,
	0xcc, 0x05, 0xb5, 0xdf, 0x43, 0x58, 0x09, 0xf2, 0xcb, 0x04, 0x7d, 0x33, 0x54, 0x76, 0x74, 0xd4,
	0xb1, 0x03, 0xeb, 0x40, 0x48, 0xdf, 0x49, 0xc0, 0xa4, 0xdd, 0x6c, 0xf9, 0xa8, 0x96, 0xbe, 0xf2,
	0x55, 0x1c, 0xa6, 0xac, 0x16, 0xa7, 0x80, 0xe1, 0x2d, 0x18, 0x26, 0x82, 0x05, 0x43, 0xee, 0x3e,
	0x27, 0xb9, 0xfb, 0xfc, 0x35, 0x98, 0x6d, 0x58, 0xec, 0x6b, 0x7a, 0x47, 0x31, 0xb5, 0xb6, 0x5d,
	0x50, 0x08, 0x5f, 0x47, 0xa8, 0xdb, 0x77, 0x91, 0xe4, 0x19, 0x7b, 0x80, 0xd5, 0x84, 0xd6, 0x60,
	0x86, 0x5c, 0x4f, 0x50, 0x4c, 0x5d, 0xe9, 0x1b, 0x38, 0x3b, 0x4e, 0xd2, 0xab, 0x40, 0xda, 0xea,
	0xfa, 0x91, 0x81, 0xd1, 0x1d, 0x58, 0x20, 0xc5, 0x30, 0xc5, 0xcb, 0x73, 0xda, 0xe2, 0x86, 0xb9,
	0xbe, 0xa4, 0xb7, 0xe6, 0x70, 0x2f, 0xfd, 0xb5, 0x00, 0xcb, 0x34, 0xcd, 0x1c, 0x3c, 0xbf, 0x83,
	0x2a, 0xa5, 0xde, 0x23, 0x1a, 0x30, 0xab, 0x5c, 0x84, 0xaf, 0x2a, 0xcb, 0x96, 0x85, 0x95, 0x20,
	0x3d, 0x96, 0x5a, 0xfb, 0x41, 0x02, 0x96, 0x2c, 0x87, 0xdc, 0xee, 0x78, 0xd9, 0x31, 0xd3, 0x08,
	0x5b, 0x1f, 0x58, 0xcc, 0x54, 0x68, 0x31, 0xf7, 0x83, 0x89, 0xab, 0x37, 0xbd, 0x21, 0x45, 0x70,
	0x06, 0xaf, 0x6a, 0x2d, 0xbf, 0x2f, 0xc0, 0x72, 0x80, 0x1e, 0x13, 0xb0, 0x0f, 0x83, 0x61, 0xe0,
	0x8d, 0x08, 0xfe, 0x5e, 0x28, 0x10, 0x7c, 0xd7, 0x0e, 0xc0, 0x46, 0x93, 0xe3, 0xbf, 0x4f, 0x78,
	0x5d, 0x7d, 0x72, 0xa3, 0xa8, 0x39, 0x82, 0xab, 0x7f, 0xb1, 0x8b, 0x3b, 0x1f, 0x05, 0x35, 0x34,
	0x27, 0x50, 0xe0, 0xb0, 0x14, 0xa7, 0xa9, 0xb9, 0x15, 0x98, 0xd4, 0xa8, 0x15, 0x98, 0x0b, 0x9d,
	0x80, 0x6f, 0x7a, 0xfd, 0x76, 0x3f, 0xfb, 0xec, 0x24, 0x0c, 0x59, 0xa5, 0xbd, 0x07, 0x97, 0x48,
	0xcc, 0xe7, 0x5c, 0xac, 0xb3, 0xaf, 0xe9, 0x50, 0x1d, 0x3a, 0x29, 0x2f, 0x5b, 0xdd, 0xce, 0x2d,
	0x30, 0x56, 0x99, 0x6c, 0x4a, 0x3f, 0x49, 0xc1, 0x8a, 0x15, 0x13, 0xd6, 0x4c, 0xf5, 0x74, 0x94,
	0x9a, 0xdd, 0x2f, 0x84, 0x4b, 0x20, 0x81, 0xf8, 0x8d, 0x8f, 0x75, 0x98, 0xca, 0x07, 0xca, 0xc1,
	0xa2, 0x61, 0xaa, 0xa7, 0x44, 0x1d, 0xa8, 0xbd, 0x53, 0x6c, 0x2a, 0x5d, 0xd5, 0x7c, 0xc6, 0x64,
	0x7d, 0x81, 0x75, 0xd5, 0x49, 0xcf, 0xa1, 0x6a, 0x3e, 0x7b, 0x49, 0x1b, 0x89, 0xbe, 0x1e, 0x54,
	0x0a, 0x6f, 0x0d, 0x98, 0x4b, 0xcc, 0xd9, 0xfa, 0x24, 0xa2, 0x4c, 0xf6, 0xf6, 0x00, 0x94, 0x83,
	0xcb, 0x63, 0x17, 0x2f, 0x0b, 0xfd, 0x94, 0x2b, 0x6c, 0x97, 0xe1, 0x52, 0x68, 0xf2, 0xcc, 0x84,
	0x9c, 0x42, 0xd6, 0xea, 0x3a, 0xea, 0x18, 0x23, 0x1e, 0xc7, 0x88, 0x13, 0x93, 0x88, 0x38, 0x31,
	0xd2, 0x2a, 0x5c, 0xe6, 0x10, 0x62, 0x5c, 0xfc, 0xc5, 0x38, 0x65, 0x63, 0xf4, 0x62, 0xef, 0xa7,
	0x51, 0x52, 0xf1, 0x8e, 0x77, 0xdb, 0xb9, 0x75, 0xd1, 0x57, 0x21, 0x17, 0xd7, 0x61, 0xda, 0x0b,
	0xc7, 0xcc, 0xa0, 0x39, 0x40, 0x70, 0xc6, 0x2f, 0x54, 0x83, 0x4e, 0x07, 0x6a, 0xd0, 0x65, 0x57,
	0xa8, 0x26, 0xfc, 0xbe, 0x70, 0xe4, 0x52, 0xc4, 0x88, 0xd5, 0xd3, 0x90, 0x58, 0x4d, 0xfa, 0x0b,
	0xdb, 0x91, 0x48, 0x7f, 0x0e, 0x04, 0x8b, 0x1d, 0x6a, 0x6e, 0xc5, 0x59, 0x7a, 0x0a, 0x22, 0x3d,
	0xf1, 0xa3, 0xd7, 0x80, 0x03, 0xc7, 0x28, 0x11, 0x3c, 0x46, 0xd2, 0x55, 0x58, 0xe5, 0xe2, 0x66,
	0xa4, 0xbf, 0x2b, 0x50, 0xc6, 0x9c, 0xcc, 0x66, 0xcd, 0x54, 0x4d, 0x63, 0x58, 0xd2, 0xac, 0xd3,
	0x4b, 0x9a, 0x36, 0x91, 0x13, 0x3c, 0xa2, 0x48, 0x48, 0xbf, 0x29, 0xd0, 0x75, 0x08, 0xf2, 0xc2,
	0xac, 0xed, 0x9b, 0x30, 0xde, 0x27, 0x35, 0x28, 0xea, 0x75, 0x2d, 0xfa, 0x85, 0xe0, 0xc8, 0xea,
	0x92, 0x29, 0xc4, 0x4b, 0x4b, 0x87, 0x4b, 0x3f, 0x10, 0x60, 0xda, 0x83, 0x1f, 0x5d, 0x81, 0x29,
	0x27, 0x85, 0x64, 0x07, 0x48, 0x4e, 0x83, 0xb5, 0xfd, 0xa6, 0x6e, 0xaa, 0x2d, 0x76, 0xb7, 0x8b,
	0x7e, 0x58, 0x31, 0x6d, 0xdf, 0xc0, 0xd4, 0x1d, 0x4e, 0xca, 0xe4, 0x37, 0xda, 0x84, 0x54, 0xbf,
	0xa3, 0x99, 0x44, 0xec, 0xe7, 0x82, 0xf2, 0x4c, 0x48, 0xe5, 0x8e, 0x3a, 0x9a, 0x29, 0x13, 0x28,
	0xe9, 0x16, 0xa4, 0xac, 0x2f, 0x7f, 0x2a, 0x63, 0x0a, 0xc6, 0x0b, 0x4f, 0xea, 0xc5, 0x5a, 0x46,
	0x40, 0x00, 0xe9, 0x12, 0x0d, 0xfc, 0x13, 0x52, 0xd9, 0xbe, 0x8d, 0xee, 0x4c, 0xc2, 0x52, 0x01,
	0xea, 0x71, 0x47, 0xef, 0xb5, 0xd5, 0x16, 0xe1, 0x79, 0x52, 0x76, 0xbe, 0xa3, 0x4b, 0x7b, 0x34,
	0x29, 0x79, 0xc5, 0xd9, 0x11, 0x5e, 0xe2, 0xe9, 0x33, 0x7a, 0xb6, 0xa2, 0x52, 0x4e, 0x79, 0x6e,
	0xca, 0xe9, 0xaa, 0xcf, 0xca, 0x0e, 0x48, 0x36, 0xfd, 0x6d, 0x02, 0x96, 0xb9, 0x70, 0xe8, 0x5d,
	0x6f, 0x9a, 0x69, 0x3d, 0x16, 0xa7, 0x37, 0xc1, 0xf4, 0x13, 0x81, 0x26, 0x98, 0xb6, 0x7d, 0x09,
	0xa6, 0xd7, 0x07, 0x8e, 0xf7, 0xa6, 0x96, 0xbe, 0x2f, 0x44, 0xa4, 0x96, 0x6a, 0xf5, 0xfc, 0x5e,
	0x51, 0x39, 0xaa, 0xd0, 0xbf, 0x4e, 0x6a, 0x69, 0x09, 0x32, 0x6e, 0xc2, 0x45, 0xa9, 0xd5, 0xf3,
	0xe4, 0xf9, 0x41, 0x28, 0xad, 0x93, 0xe4, 0x26, 0x6d, 0x52, 0x83, 0xf3, 0x33, 0xe3, 0x76, 0x7e,
	0x06, 0xb1, 0xd1, 0x07, 0xd5, 0xa3, 0x4a, 0x5d, 0x21, 0x8f, 0x1b, 0x32, 0x69, 0x27, 0x3f, 0xb3,
	0x04, 0x88, 0xed, 0x96, 0xf7, 0x91, 0xce, 0x1f, 0x09, 0xb0, 0xe8, 0x6b, 0x66, 0x9b, 0xe7, 0xb9,
	0x5c, 0x22, 0xf8, 0x2e, 0x97, 0xdc, 0x81, 0x25, 0x2b, 0x62, 0xa4, 0x92, 0x62, 0x28, 0x5d, 0xdc,
	0x23, 0x15, 0x0d, 0x76, 0xe6, 0x17, 0xda, 0xea, 0x73, 0x56, 0xf5, 0x39, 0xc4, 0x3d, 0x0b, 0xf1,
	0x4b, 0x48, 0x15, 0x4b, 0x5f, 0x26, 0xa9, 0x5f, 0x32, 0x72, 0x5c, 0x33, 0x50, 0x47, 0x85, 0x03,
	0x9f, 0xe4, 0x08, 0x81, 0x4f, 0x84, 0x86, 0x4b, 0x8d, 0xe4, 0x0c, 0x8f, 0x6e, 0xd3, 0x2b, 0xae,
	0xdd, 0xa6, 0x9e, 0xeb, 0xa6, 0xf7, 0xfc, 0x0e, 0x8c, 0xb4, 0xd2, 0x5f, 0x16, 0x84, 0xef, 0xbd,
	0xac, 0x38, 0x39, 0x4f, 0xfd, 0xb1, 0x0b, 0xc4, 0x47, 0xd2, 0x26, 0xdc, 0x24, 0xd7, 0x93, 0x07,
	0x25, 0xba, 0xa9, 0x4a, 0xfa, 0x65, 0x78, 0x7d, 0x10, 0x34, 0x23, 0x5f, 0xe6, 0xea, 0x1f, 0xa7,
	0x40, 0x19, 0xc0, 0x32, 0x40, 0x15, 0x51, 0xe2, 0xbf, 0x9e, 0x80, 0xb5, 0x41, 0xe3, 0xd0, 0x03,
	0xaf, 0x6a, 0xda, 0x1c, 0x96, 0x9c, 0x57, 0x4b, 0xfd, 0x36, 0xd3, 0x52, 0x45, 0x9f, 0x96, 0x7a,
	0x7b, 0x14, 0x54, 0x5e, 0x85, 0x55, 0xe4, 0xe9, 0xab, 0xbb, 0xf0, 0x86, 0x3f, 0x5d, 0xed, 0xd1,
	0x51, 0xf4, 0x5d, 0x94, 0x93, 0xbf, 0x16, 0x88, 0x82, 0xd9, 0xf6, 0x65, 0x7b, 0x7f, 0x2b, 0x09,
	0x6b, 0xde, 0x8b, 0xfe, 0x7b, 0xde, 0x6c, 0x5a, 0xdc, 0x1b, 0xa1, 0x5b, 0xb0, 0x10, 0xcc, 0x14,
	0xd9, 0x17, 0xdb, 0xe7, 0xfd, 0xa9, 0x22, 0x23, 0xee, 0x22, 0xdb, 0x00, 0xd2, 0xf1, 0xf1, 0x5f,
	0x38, 0x0b, 0xfc, 0xde, 0xd0, 0x88, 0xff, 0x6f, 0x26, 0x84, 0xe9, 0xf1, 0x6c, 0xc1, 0x7a, 0x0c,
	0xff, 0x4c, 0x2c, 0x0a, 0x30, 0xe7, 0x4f, 0x8c, 0xb2, 0x93, 0x1a, 0xb8, 0xcd, 0xed, 0x1f, 0x3c,
	0xeb, 0xcb, 0x96, 0x52, 0x6a, 0x3f, 0x14, 0xec, 0x87, 0x2f, 0x3e, 0x58, 0x6b, 0x87, 0xc3, 0x99,
	0x57, 0x3a, 0x89, 0x60, 0xd2, 0x15, 0xe5, 0x60, 0xca, 0x86, 0x32, 0x82, 0x57, 0xa9, 0x1d, 0xe2,
	0x2e, 0x48, 0x38, 0x71, 0x9c, 0xbc, 0x60, 0xe2, 0x38, 0x15, 0x4c, 0x1c, 0xd3, 0xb9, 0x7d, 0x27,
	0x01, 0x6b, 0xde, 0x3b, 0xc7, 0xdc, 0xe3, 0x3d, 0xca, 0x44, 0xd7, 0x61, 0xc6, 0x03, 0x65, 0x9f,
	0xf8, 0x69, 0x37, 0xef, 0x19, 0x77, 0xda, 0x07, 0x71, 0xf2, 0x8a, 0x92, 0xa0, 0x74, 0x29, 0x36,
	0x60, 0x3d, 0x86, 0xbe, 0xb7, 0x84, 0xfd, 0xad, 0x04, 0x79, 0xf6, 0xfa, 0xbf, 0xb7, 0x62, 0xd1,
	0x89, 0xc7, 0x58, 0x36, 0x5e, 0xe9, 0x72, 0x69, 0x70, 0x2d, 0x8a, 0xf8, 0xcb, 0x16, 0xc0, 0x2a,
	0xcc, 0x92, 0x47, 0x45, 0x07, 0xd8, 0x54, 0x9b, 0xaa, 0xa9, 0x5a, 0xee, 0x8e, 0x65, 0x67, 0x15,
	0xfd, 0xe4, 0xc4, 0xc0, 0x26, 0xb3, 0xb6, 0x60, 0x35, 0x55, 0x49, 0x4b, 0xa0, 0xc2, 0x93, 0x08,
	0x54, 0x78, 0xa4, 0xdf, 0x49, 0xc0, 0xea, 0x1e, 0x36, 0x6d, 0x7c, 0xf9, 0x56, 0x4b, 0x6f, 0xa8,
	0x26, 0x6e, 0x0e, 0x5d, 0x08, 0x79, 0x03, 0xe6, 0x9d, 0x6a, 0x01, 0x63, 0x82, 0x12, 0x71, 0x8a,
	0x08, 0x8c, 0x11, 0x56, 0x77, 0xe8, 0x61, 0xa3, 0xdf, 0x22, 0xbb, 0x67, 0xd7, 0x1d, 0x64, 0xda,
	0x82, 0xaa, 0xee, 0xd6, 0x52, 0x0d, 0x7d, 0xd7, 0xb3, 0xb5, 0x51, 0x0c, 0xbe, 0xaa, 0x62, 0xc0,
	0x3f, 0x0b, 0xe4, 0xbd, 0x37, 0x87, 0x2c, 0xdb, 0xd2, 0x12, 0x2c, 0x92, 0xb7, 0x66, 0x4a, 0x9b,
	0x81, 0x28, 0x1e, 0xbb, 0x7d, 0xd9, 0xe6, 0xdc, 0xb7, 0x59, 0xc4, 0x3e, 0x2f, 0x1c, 0x07, 0x9b,
	0xd0, 0x96, 0xfb, 0x48, 0xd4, 0xef, 0x3b, 0xd1, 0x85, 0x5c, 0x74, 0xbd, 0x41, 0x37, 0xc3, 0x7c,
	0x1f, 0xe6, 0xfc, 0xe4, 0x99, 0x38, 0x2c, 0x73, 0x29, 0xcb, 0xb3, 0x3e, 0xaa, 0xd2, 0xdf, 0x24,
	0xe0, 0x92, 0x67, 0x76, 0xbb, 0xb8, 0x65, 0xaa, 0x9e, 0xd2, 0xed, 0xb1, 0x6a, 0x60, 0x8e, 0xbc,
	0xce, 0x59, 0xed, 0x1e, 0x71, 0xdd, 0x04, 0xc4, 0x7c, 0xe0, 0x70, 0x91, 0x30, 0x43, 0x7b, 0x6a,
	0xb1, 0x07, 0x25, 0x39, 0xcc, 0x41, 0x49, 0x85, 0x0e, 0xca, 0xa3, 0x60, 0x66, 0x78, 0x93, 0x73,
	0x50, 0xbc, 0x73, 0x7a, 0x55, 0x87, 0xe4, 0x1f, 0x04, 0xc8, 0x86, 0x49, 0xfe, 0x3f, 0x38, 0x20,
	0xb7, 0xf6, 0x60, 0x21, 0xc4, 0x99, 0xdf, 0x99, 0xcc, 0xc0, 0xcc, 0xc3, 0xd2, 0x27, 0xc5, 0x5d,
	0xa5, 0x5c, 0xac, 0xec, 0xd5, 0xf7, 0x33, 0x02, 0x5a, 0x84, 0xf9, 0xc7, 0x79, 0xb9, 0x94, 0x2f,
	0x94, 0x8b, 0x76, 0x63, 0x62, 0xeb, 0xbf, 0x05, 0x98, 0x2c, 0x35, 0x71, 0xc7, 0xa4, 0x51, 0xcc,
	0xac, 0xef, 0x3f, 0x36, 0xa0, 0x2b, 0x11, 0xff, 0xc8, 0x81, 0xec, 0x9a, 0x78, 0x35, 0xf6, 0xdf,
	0x3c, 0x48, 0x63, 0xe8, 0xc4, 0xf3, 0xdf, 0x26, 0x7c, 0xf7, 0x9e, 0x5e, 0x0b, 0x8d, 0xe4, 0x04,
	0x17, 0xe2, 0xcd, 0x01, 0x50, 0x0e, 0x9d, 0x7b, 0x30, 0x4e, 0xde, 0xd4, 0xa3, 0x25, 0xe7, 0x5d,
	0xbf, 0xe7, 0xc9, 0xbd, 0xb8, 0x1c, 0x68, 0xb5, 0xc7, 0x6d, 0xfd, 0x15, 0x00, 0xb8, 0x4e, 0x3b,
	0x7a, 0x04, 0x33, 0x5e, 0x5f, 0x0d, 0xad, 0xc6, 0xbc, 0xa9, 0x16, 0xaf, 0xf0, 0x3b, 0x1d, 0x9e,
	0x1e, 0xc1, 0x8c, 0xd7, 0x46, 0xbb, 0xc8, 0x38, 0xaf, 0xb4, 0x5c, 0x64, 0xdc, 0x47, 0x55, 0x63,
	0xa8, 0x05, 0x97, 0x22, 0xde, 0xc8, 0xa0, 0xd7, 0x87, 0x7b, 0x49, 0x24, 0xbe, 0x31, 0xe4, 0x63,
	0x1b, 0x69, 0x0c, 0xf5, 0xe0, 0x72, 0xe4, 0xd3, 0x10, 0xb4, 0x31, 0xec, 0xc3, 0x15, 0xf1, 0xcd,
	0x21, 0x20, 0x1d, 0x9a, 0x7d, 0x10, 0xa3, 0x6f, 0x59, 0xa3, 0x37, 0x87, 0x7e, 0xc6, 0x20, 0xde,
	0x1a, 0xfe, 0xd2, 0xb6, 0x34, 0x86, 0xf6, 0x61, 0xda, 0x73, 0x2b, 0x16, 0x89, 0xdc, 0xab, 0xb2,
	0x14, 0xf1, 0x6a, 0xcc, 0x35, 0x5a, 0x8a, 0xc9, 0x73, 0xf7, 0xcd, 0xc5, 0x14, 0xbe, 0xc5, 0xe7,
	0x62, 0xe2, 0x5c, 0x96, 0x0b, 0x2e, 0x7f, 0x20, 0x92, 0xe6, 0x2d, 0x3f, 0x3f, 0x34, 0xe7, 0x2d,
	0x7f, 0x44, 0x58, 0x2e, 0x8d, 0xa1, 0x8f, 0x60, 0xce, 0x7f, 0x79, 0x05, 0x5d, 0x8d, 0xbd, 0x84,
	0x23, 0x5e, 0x8b, 0xea, 0xf6, 0xa2, 0xf4, 0x5f, 0x7d, 0x70, 0x51, 0x72, 0xaf, 0x60, 0xb8, 0x28,
	0x23, 0x6e, 0x4c, 0x8c, 0x59, 0xfa, 0xc9, 0x57, 0xd0, 0x77, 0xf5, 0x13, 0xef, 0x1e, 0x82, 0xab,
	0x9f, 0xb8, 0xb7, 0x00, 0xa4, 0x31, 0xa4, 0xc1, 0x0a, 0xbf, 0x9e, 0x8c, 0x6e, 0x0e, 0x55, 0x2e,
	0x17, 0x5f, 0x1f, 0x04, 0xe6, 0x90, 0x6a, 0xc0, 0x22, 0xe7, 0xd2, 0x32, 0x92, 0x62, 0x6f, 0x34,
	0x53, 0x22, 0x37, 0x86, 0xb8, 0xf5, 0x2c, 0x91, 0x7c, 0x63, 0xcb, 0x3b, 0x1f, 0xef, 0xbd, 0x56,
	0xde, 0x7c, 0x38, 0x37, 0x79, 0x79, 0xf3, 0xe1, 0x5d, 0x8f, 0x25, 0xd4, 0xb6, 0xfe, 0x2b, 0x09,
	0xf3, 0x81, 0xbc, 0x07, 0xfa, 0x55, 0x01, 0xae, 0xc5, 0xe7, 0x82, 0xd0, 0xed, 0x88, 0x9c, 0x49,
	0xc4, 0x31, 0xce, 0x0d, 0x0b, 0xee, 0x51, 0x25, 0x97, 0x23, 0x43, 0x6e, 0xb4, 0x31, 0x6c, 0x56,
	0xc1, 0x23, 0x3f, 0x83, 0xe2, 0x77, 0xba, 0xf8, 0x7d, 0xb8, 0x1c, 0x19, 0x94, 0xa1, 0x8d, 0x61,
	0xe3, 0x46, 0x97, 0xec, 0xc0, 0x08, 0xcf, 0xd9, 0x73, 0x7e, 0x70, 0x83, 0x6e, 0x0e, 0x15, 0x79,
	0xb9, 0x7b, 0x1e, 0x1f, 0x23, 0x11, 0x6a, 0x24, 0xeb, 0xb4, 0xf5, 0x43, 0x01, 0x32, 0x76, 0xb7,
	0x13, 0xe8, 0x60, 0xf2, 0x2f, 0xa7, 0x42, 0xfe, 0x38, 0xba, 0x31, 0x44, 0x90, 0x20, 0xbe, 0x16,
	0x0f, 0x64, 0x6f, 0xed, 0x5d, 0x01, 0x3d, 0x81, 0x4c, 0xd0, 0xa3, 0x43, 0xd7, 0x07, 0xb8, 0x97,
	0xe2, 0x5a, 0x34, 0x80, 0x8b, 0x9a, 0xce, 0xed, 0x9f, 0xc6, 0x21, 0x45, 0x72, 0xe4, 0x75, 0x98,
	0x0f, 0xd4, 0xdd, 0xd1, 0xb5, 0xf8, 0xdb, 0x08, 0xe2, 0xf5, 0xc8, 0x7e, 0xe7, 0x6c, 0x3e, 0x85,
	0x85, 0x50, 0x25, 0x1d, 0xad, 0x79, 0xc7, 0xf1, 0xaa, 0xf9, 0xe2, 0x7a, 0x0c, 0x44, 0x10, 0xb7,
	0xdf, 0x3d, 0x58, 0x1b, 0x54, 0xea, 0xf5, 0xe3, 0x8e, 0x72, 0x09, 0x3e, 0xa3, 0x25, 0x89, 0xa0,
	0x33, 0x20, 0xf9, 0xf9, 0xe2, 0xba, 0x01, 0x37, 0x62, 0x61, 0x1c, 0x0a, 0x9f, 0x3a, 0xb5, 0x10,
	0x4f, 0xa5, 0x11, 0xf9, 0x98, 0xe3, 0x56, 0x44, 0x45, 0x29, 0x0e, 0xc4, 0x41, 0xff, 0x31, 0x64,
	0x82, 0x49, 0x71, 0x74, 0x7d, 0x40, 0x8e, 0x5e, 0x5c, 0x8b, 0x06, 0x08, 0xae, 0x4c, 0x50, 0xcb,
	0x05, 0xb9, 0xe2, 0xa9, 0xb6, 0x1b, 0xb1, 0x30, 0x5e, 0xcf, 0xc2, 0x53, 0x0e, 0x72, 0x3d, 0x8b,
	0x70, 0xe9, 0xc8, 0xf5, 0x2c, 0x38, 0xf5, 0x23, 0x69, 0x6c, 0xfb, 0x3e, 0x80, 0xda, 0xea, 0x3e,
	0x53, 0x15, 0xdc, 0xe9, 0xb7, 0xd1, 0x95, 0x50, 0x86, 0xae, 0xd8, 0xe9, 0xb7, 0xab, 0x5d, 0x53,
	0xd3, 0x3b, 0x46, 0xf6, 0x4f, 0x26, 0x49, 0x1a, 0x6e, 0x8a, 0x0c, 0xb0, 0x3a, 0xb6, 0xcb, 0x90,
	0x71, 0x47, 0x2b, 0x24, 0xca, 0x42, 0xeb, 0x5c, 0x1c, 0xe4, 0x02, 0x7d, 0x00, 0xd1, 0x9c, 0x83,
	0x88, 0xf4, 0x6e, 0x7f, 0x08, 0xd0, 0x30, 0x34, 0x85, 0x86, 0x79, 0xe8, 0x6a, 0x08, 0xcf, 0x43,
	0x0d, 0xb7, 0x9a, 0x36, 0x8e, 0x3f, 0x66, 0xcc, 0x34, 0x0c, 0x8d, 0x06, 0x83, 0xdb, 0x5f, 0x83,
	0x69, 0xca, 0xcc, 0x89, 0x05, 0x37, 0x68, 0x3c, 0xe3, 0x81, 0xce, 0x9e, 0xf4, 0x6c, 0x17, 0x61,
	0x96, 0x22, 0x60, 0xd5, 0x55, 0x74, 0x3d, 0x84, 0xe2, 0x80, 0xf6, 0x04, 0x90, 0xcc, 0x90, 0x61,
	0xac, 0x6f, 0xbb, 0x00, 0x33, 0x36, 0x1a, 0xf3, 0x99, 0xde, 0x44, 0xd7, 0x38, 0x58, 0xac, 0x8e,
	0x00, 0x92, 0x69, 0x86, 0xc4, 0xea, 0x72, 0x59, 0xb1, 0xff, 0xf3, 0x5b, 0x98, 0x15, 0x56, 0x50,
	0xe0, 0xb2, 0xc2, 0xfa, 0x0a, 0xef, 0x3d, 0xbd, 0x77, 0xaa, 0x99, 0xcf, 0xfa, 0xc7, 0xb9, 0x86,
	0xde, 0xbe, 0xd3, 0xd0, 0x3b, 0xa6, 0xaa, 0x75, 0x70, 0xef, 0xb6, 0x61, 0xea, 0x3d, 0xf5, 0x14,
	0xdf, 0xd6, 0x3a, 0x26, 0xee, 0x9d, 0xa8, 0x0d, 0x7c, 0xc7, 0xe8, 0xe2, 0xc6, 0x9d, 0x96, 0x76,
	0x7c, 0xe7, 0x54, 0xbf, 0xd3, 0x30, 0xb4, 0xe3, 0x34, 0xa1, 0xf3, 0x95, 0xff, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x6d, 0x86, 0xf4, 0x57, 0xad, 0x50, 0x00, 0x00,
}
