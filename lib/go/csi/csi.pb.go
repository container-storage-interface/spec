// Code generated by protoc-gen-go. DO NOT EDIT.
// source: csi.proto

/*
Package csi is a generated protocol buffer package.

It is generated from these files:
	csi.proto

It has these top-level messages:
	GetSupportedVersionsRequest
	GetSupportedVersionsResponse
	Version
	GetPluginInfoRequest
	GetPluginInfoResponse
	GetPluginCapabilitiesRequest
	GetPluginCapabilitiesResponse
	PluginCapability
	ProbeRequest
	ProbeResponse
	CreateVolumeRequest
	CreateVolumeResponse
	VolumeCapability
	CapacityRange
	VolumeInfo
	DeleteVolumeRequest
	DeleteVolumeResponse
	ControllerPublishVolumeRequest
	ControllerPublishVolumeResponse
	ControllerUnpublishVolumeRequest
	ControllerUnpublishVolumeResponse
	ValidateVolumeCapabilitiesRequest
	ValidateVolumeCapabilitiesResponse
	ListVolumesRequest
	ListVolumesResponse
	GetCapacityRequest
	GetCapacityResponse
	NodePublishVolumeRequest
	NodePublishVolumeResponse
	NodeUnpublishVolumeRequest
	NodeUnpublishVolumeResponse
	GetNodeIDRequest
	GetNodeIDResponse
*/
package csi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PluginCapability_RPC_Type int32

const (
	PluginCapability_RPC_UNKNOWN                             PluginCapability_RPC_Type = 0
	PluginCapability_RPC_CONTROLLER_CREATE_DELETE_VOLUME     PluginCapability_RPC_Type = 1
	PluginCapability_RPC_CONTROLLER_PUBLISH_UNPUBLISH_VOLUME PluginCapability_RPC_Type = 2
	PluginCapability_RPC_CONTROLLER_LIST_VOLUMES             PluginCapability_RPC_Type = 3
	PluginCapability_RPC_CONTROLLER_GET_CAPACITY             PluginCapability_RPC_Type = 4
)

var PluginCapability_RPC_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "CONTROLLER_CREATE_DELETE_VOLUME",
	2: "CONTROLLER_PUBLISH_UNPUBLISH_VOLUME",
	3: "CONTROLLER_LIST_VOLUMES",
	4: "CONTROLLER_GET_CAPACITY",
}
var PluginCapability_RPC_Type_value = map[string]int32{
	"UNKNOWN":                             0,
	"CONTROLLER_CREATE_DELETE_VOLUME":     1,
	"CONTROLLER_PUBLISH_UNPUBLISH_VOLUME": 2,
	"CONTROLLER_LIST_VOLUMES":             3,
	"CONTROLLER_GET_CAPACITY":             4,
}

func (x PluginCapability_RPC_Type) String() string {
	return proto.EnumName(PluginCapability_RPC_Type_name, int32(x))
}
func (PluginCapability_RPC_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 0, 0}
}

type PluginCapability_Service_Type int32

const (
	PluginCapability_Service_UNKNOWN            PluginCapability_Service_Type = 0
	PluginCapability_Service_CONTROLLER_SERVICE PluginCapability_Service_Type = 1
)

var PluginCapability_Service_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "CONTROLLER_SERVICE",
}
var PluginCapability_Service_Type_value = map[string]int32{
	"UNKNOWN":            0,
	"CONTROLLER_SERVICE": 1,
}

func (x PluginCapability_Service_Type) String() string {
	return proto.EnumName(PluginCapability_Service_Type_name, int32(x))
}
func (PluginCapability_Service_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 1, 0}
}

type VolumeCapability_AccessMode_Mode int32

const (
	VolumeCapability_AccessMode_UNKNOWN VolumeCapability_AccessMode_Mode = 0
	// Can only be published once as read/write on a single node, at
	// any given time.
	VolumeCapability_AccessMode_SINGLE_NODE_WRITER VolumeCapability_AccessMode_Mode = 1
	// Can only be published once as readonly on a single node, at
	// any given time.
	VolumeCapability_AccessMode_SINGLE_NODE_READER_ONLY VolumeCapability_AccessMode_Mode = 2
	// Can be published as readonly at multiple nodes simultaneously.
	VolumeCapability_AccessMode_MULTI_NODE_READER_ONLY VolumeCapability_AccessMode_Mode = 3
	// Can be published at multiple nodes simultaneously. Only one of
	// the node can be used as read/write. The rest will be readonly.
	VolumeCapability_AccessMode_MULTI_NODE_SINGLE_WRITER VolumeCapability_AccessMode_Mode = 4
	// Can be published as read/write at multiple nodes
	// simultaneously.
	VolumeCapability_AccessMode_MULTI_NODE_MULTI_WRITER VolumeCapability_AccessMode_Mode = 5
)

var VolumeCapability_AccessMode_Mode_name = map[int32]string{
	0: "UNKNOWN",
	1: "SINGLE_NODE_WRITER",
	2: "SINGLE_NODE_READER_ONLY",
	3: "MULTI_NODE_READER_ONLY",
	4: "MULTI_NODE_SINGLE_WRITER",
	5: "MULTI_NODE_MULTI_WRITER",
}
var VolumeCapability_AccessMode_Mode_value = map[string]int32{
	"UNKNOWN":                  0,
	"SINGLE_NODE_WRITER":       1,
	"SINGLE_NODE_READER_ONLY":  2,
	"MULTI_NODE_READER_ONLY":   3,
	"MULTI_NODE_SINGLE_WRITER": 4,
	"MULTI_NODE_MULTI_WRITER":  5,
}

func (x VolumeCapability_AccessMode_Mode) String() string {
	return proto.EnumName(VolumeCapability_AccessMode_Mode_name, int32(x))
}
func (VolumeCapability_AccessMode_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12, 2, 0}
}

// //////
// //////
type GetSupportedVersionsRequest struct {
}

func (m *GetSupportedVersionsRequest) Reset()                    { *m = GetSupportedVersionsRequest{} }
func (m *GetSupportedVersionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSupportedVersionsRequest) ProtoMessage()               {}
func (*GetSupportedVersionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetSupportedVersionsResponse struct {
	// All the CSI versions that the Plugin supports. This field is
	// REQUIRED.
	SupportedVersions []*Version `protobuf:"bytes,1,rep,name=supported_versions,json=supportedVersions" json:"supported_versions,omitempty"`
}

func (m *GetSupportedVersionsResponse) Reset()                    { *m = GetSupportedVersionsResponse{} }
func (m *GetSupportedVersionsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSupportedVersionsResponse) ProtoMessage()               {}
func (*GetSupportedVersionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetSupportedVersionsResponse) GetSupportedVersions() []*Version {
	if m != nil {
		return m.SupportedVersions
	}
	return nil
}

// Specifies a version in Semantic Version 2.0 format.
// (http://semver.org/spec/v2.0.0.html)
type Version struct {
	Major uint32 `protobuf:"varint,1,opt,name=major" json:"major,omitempty"`
	Minor uint32 `protobuf:"varint,2,opt,name=minor" json:"minor,omitempty"`
	Patch uint32 `protobuf:"varint,3,opt,name=patch" json:"patch,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Version) GetMajor() uint32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *Version) GetMinor() uint32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *Version) GetPatch() uint32 {
	if m != nil {
		return m.Patch
	}
	return 0
}

// //////
// //////
type GetPluginInfoRequest struct {
	// The API version assumed by the CO. This is a REQUIRED field.
	Version *Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *GetPluginInfoRequest) Reset()                    { *m = GetPluginInfoRequest{} }
func (m *GetPluginInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPluginInfoRequest) ProtoMessage()               {}
func (*GetPluginInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetPluginInfoRequest) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

type GetPluginInfoResponse struct {
	// The name MUST follow reverse domain name notation format
	// (https://en.wikipedia.org/wiki/Reverse_domain_name_notation).
	// It SHOULD include the plugin's host company name and the plugin
	// name, to minimize the possibility of collisions. It MUST be 63
	// characters or less, beginning and ending with an alphanumeric
	// character ([a-z0-9A-Z]) with dashes (-), underscores (_),
	// dots (.), and alphanumerics between. This field is REQUIRED.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// This field is REQUIRED. Value of this field is opaque to the CO.
	VendorVersion string `protobuf:"bytes,2,opt,name=vendor_version,json=vendorVersion" json:"vendor_version,omitempty"`
	// This field is OPTIONAL. Values are opaque to the CO.
	Manifest map[string]string `protobuf:"bytes,3,rep,name=manifest" json:"manifest,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetPluginInfoResponse) Reset()                    { *m = GetPluginInfoResponse{} }
func (m *GetPluginInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPluginInfoResponse) ProtoMessage()               {}
func (*GetPluginInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetPluginInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetPluginInfoResponse) GetVendorVersion() string {
	if m != nil {
		return m.VendorVersion
	}
	return ""
}

func (m *GetPluginInfoResponse) GetManifest() map[string]string {
	if m != nil {
		return m.Manifest
	}
	return nil
}

// //////
// //////
type GetPluginCapabilitiesRequest struct {
	// The API version assumed by the CO. This is a REQUIRED field.
	Version *Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *GetPluginCapabilitiesRequest) Reset()                    { *m = GetPluginCapabilitiesRequest{} }
func (m *GetPluginCapabilitiesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPluginCapabilitiesRequest) ProtoMessage()               {}
func (*GetPluginCapabilitiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetPluginCapabilitiesRequest) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

type GetPluginCapabilitiesResponse struct {
	// All the capabilities that the controller service supports. This
	// field is OPTIONAL.
	// If any of the `CONTROLLER_xxx` RPC capabilities are specified then
	// it is REQUIRED for a plugin to also report a `CONTROLLER_SERVICE`
	// service capability as well.
	Capabilities []*PluginCapability `protobuf:"bytes,2,rep,name=capabilities" json:"capabilities,omitempty"`
}

func (m *GetPluginCapabilitiesResponse) Reset()                    { *m = GetPluginCapabilitiesResponse{} }
func (m *GetPluginCapabilitiesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPluginCapabilitiesResponse) ProtoMessage()               {}
func (*GetPluginCapabilitiesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetPluginCapabilitiesResponse) GetCapabilities() []*PluginCapability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

// Specifies a capability of the plugin.
type PluginCapability struct {
	// Types that are valid to be assigned to Type:
	//	*PluginCapability_Rpc
	//	*PluginCapability_Service_
	Type isPluginCapability_Type `protobuf_oneof:"type"`
}

func (m *PluginCapability) Reset()                    { *m = PluginCapability{} }
func (m *PluginCapability) String() string            { return proto.CompactTextString(m) }
func (*PluginCapability) ProtoMessage()               {}
func (*PluginCapability) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isPluginCapability_Type interface {
	isPluginCapability_Type()
}

type PluginCapability_Rpc struct {
	Rpc *PluginCapability_RPC `protobuf:"bytes,1,opt,name=rpc,oneof"`
}
type PluginCapability_Service_ struct {
	Service *PluginCapability_Service `protobuf:"bytes,2,opt,name=service,oneof"`
}

func (*PluginCapability_Rpc) isPluginCapability_Type()      {}
func (*PluginCapability_Service_) isPluginCapability_Type() {}

func (m *PluginCapability) GetType() isPluginCapability_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *PluginCapability) GetRpc() *PluginCapability_RPC {
	if x, ok := m.GetType().(*PluginCapability_Rpc); ok {
		return x.Rpc
	}
	return nil
}

func (m *PluginCapability) GetService() *PluginCapability_Service {
	if x, ok := m.GetType().(*PluginCapability_Service_); ok {
		return x.Service
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PluginCapability) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PluginCapability_OneofMarshaler, _PluginCapability_OneofUnmarshaler, _PluginCapability_OneofSizer, []interface{}{
		(*PluginCapability_Rpc)(nil),
		(*PluginCapability_Service_)(nil),
	}
}

func _PluginCapability_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PluginCapability)
	// type
	switch x := m.Type.(type) {
	case *PluginCapability_Rpc:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rpc); err != nil {
			return err
		}
	case *PluginCapability_Service_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Service); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PluginCapability.Type has unexpected type %T", x)
	}
	return nil
}

func _PluginCapability_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PluginCapability)
	switch tag {
	case 1: // type.rpc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PluginCapability_RPC)
		err := b.DecodeMessage(msg)
		m.Type = &PluginCapability_Rpc{msg}
		return true, err
	case 2: // type.service
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PluginCapability_Service)
		err := b.DecodeMessage(msg)
		m.Type = &PluginCapability_Service_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PluginCapability_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PluginCapability)
	// type
	switch x := m.Type.(type) {
	case *PluginCapability_Rpc:
		s := proto.Size(x.Rpc)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PluginCapability_Service_:
		s := proto.Size(x.Service)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PluginCapability_RPC struct {
	Type PluginCapability_RPC_Type `protobuf:"varint,1,opt,name=type,enum=csi.PluginCapability_RPC_Type" json:"type,omitempty"`
}

func (m *PluginCapability_RPC) Reset()                    { *m = PluginCapability_RPC{} }
func (m *PluginCapability_RPC) String() string            { return proto.CompactTextString(m) }
func (*PluginCapability_RPC) ProtoMessage()               {}
func (*PluginCapability_RPC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

func (m *PluginCapability_RPC) GetType() PluginCapability_RPC_Type {
	if m != nil {
		return m.Type
	}
	return PluginCapability_RPC_UNKNOWN
}

type PluginCapability_Service struct {
}

func (m *PluginCapability_Service) Reset()                    { *m = PluginCapability_Service{} }
func (m *PluginCapability_Service) String() string            { return proto.CompactTextString(m) }
func (*PluginCapability_Service) ProtoMessage()               {}
func (*PluginCapability_Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 1} }

// //////
// //////
type ProbeRequest struct {
	// The API version assumed by the CO. This is a REQUIRED field.
	Version *Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *ProbeRequest) Reset()                    { *m = ProbeRequest{} }
func (m *ProbeRequest) String() string            { return proto.CompactTextString(m) }
func (*ProbeRequest) ProtoMessage()               {}
func (*ProbeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ProbeRequest) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

type ProbeResponse struct {
}

func (m *ProbeResponse) Reset()                    { *m = ProbeResponse{} }
func (m *ProbeResponse) String() string            { return proto.CompactTextString(m) }
func (*ProbeResponse) ProtoMessage()               {}
func (*ProbeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// //////
// //////
type CreateVolumeRequest struct {
	// The API version assumed by the CO. This field is REQUIRED.
	Version *Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	// The suggested name for the storage space. This field is REQUIRED.
	// It serves two purposes:
	// 1) Idempotency - This name is generated by the CO to achieve
	//    idempotency. If `CreateVolume` fails, the volume may or may not
	//    be provisioned. In this case, the CO may call `CreateVolume`
	//    again, with the same name, to ensure the volume exists. The
	//    Plugin should ensure that multiple `CreateVolume` calls for the
	//    same name do not result in more than one piece of storage
	//    provisioned corresponding to that name. If a Plugin is unable to
	//    enforce idempotency, the CO's error recovery logic could result
	//    in multiple (unused) volumes being provisioned.
	// 2) Suggested name - Some storage systems allow callers to specify
	//    an identifier by which to refer to the newly provisioned
	//    storage. If a storage system supports this, it can optionally
	//    use this name as the identifier for the new volume.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// This field is OPTIONAL. This allows the CO to specify the capacity
	// requirement of the volume to be provisioned. If not specified, the
	// Plugin MAY choose an implementation-defined capacity range.
	CapacityRange *CapacityRange `protobuf:"bytes,3,opt,name=capacity_range,json=capacityRange" json:"capacity_range,omitempty"`
	// The capabilities that the provisioned volume MUST have: the Plugin
	// MUST provision a volume that could satisfy ALL of the
	// capabilities specified in this list. The Plugin MUST assume that
	// the CO MAY use the  provisioned volume later with ANY of the
	// capabilities specified in this list. This also enables the CO to do
	// early validation: if ANY of the specified volume capabilities are
	// not supported by the Plugin, the call SHALL fail. This field is
	// REQUIRED.
	VolumeCapabilities []*VolumeCapability `protobuf:"bytes,4,rep,name=volume_capabilities,json=volumeCapabilities" json:"volume_capabilities,omitempty"`
	// Plugin specific parameters passed in as opaque key-value pairs.
	// This field is OPTIONAL. The Plugin is responsible for parsing and
	// validating these parameters. COs will treat these as opaque.
	Parameters map[string]string `protobuf:"bytes,5,rep,name=parameters" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Credentials used by Controller plugin to authenticate/authorize
	// volume creation request.
	// This field contains credential data, for example username and
	// password. Each key must consist of alphanumeric characters, '-',
	// '_' or '.'. Each value MUST contain a valid string. An SP MAY
	// choose to accept binary (non-string) data by using a binary-to-text
	// encoding scheme, like base64. An SP SHALL advertise the
	// requirements for credentials in documentation. COs SHALL permit
	// passing through the required credentials. This information is
	// sensitive and MUST be treated as such (not logged, etc.) by the CO.
	// This field is OPTIONAL.
	ControllerCreateCredentials map[string]string `protobuf:"bytes,6,rep,name=controller_create_credentials,json=controllerCreateCredentials" json:"controller_create_credentials,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CreateVolumeRequest) Reset()                    { *m = CreateVolumeRequest{} }
func (m *CreateVolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateVolumeRequest) ProtoMessage()               {}
func (*CreateVolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CreateVolumeRequest) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *CreateVolumeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateVolumeRequest) GetCapacityRange() *CapacityRange {
	if m != nil {
		return m.CapacityRange
	}
	return nil
}

func (m *CreateVolumeRequest) GetVolumeCapabilities() []*VolumeCapability {
	if m != nil {
		return m.VolumeCapabilities
	}
	return nil
}

func (m *CreateVolumeRequest) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *CreateVolumeRequest) GetControllerCreateCredentials() map[string]string {
	if m != nil {
		return m.ControllerCreateCredentials
	}
	return nil
}

type CreateVolumeResponse struct {
	// Contains all attributes of the newly created volume that are
	// relevant to the CO along with information required by the Plugin
	// to uniquely identify the volume. This field is REQUIRED.
	VolumeInfo *VolumeInfo `protobuf:"bytes,1,opt,name=volume_info,json=volumeInfo" json:"volume_info,omitempty"`
}

func (m *CreateVolumeResponse) Reset()                    { *m = CreateVolumeResponse{} }
func (m *CreateVolumeResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateVolumeResponse) ProtoMessage()               {}
func (*CreateVolumeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CreateVolumeResponse) GetVolumeInfo() *VolumeInfo {
	if m != nil {
		return m.VolumeInfo
	}
	return nil
}

// Specify a capability of a volume.
type VolumeCapability struct {
	// Specifies what API the volume will be accessed using. One of the
	// following fields MUST be specified.
	//
	// Types that are valid to be assigned to AccessType:
	//	*VolumeCapability_Block
	//	*VolumeCapability_Mount
	AccessType isVolumeCapability_AccessType `protobuf_oneof:"access_type"`
	// This is a REQUIRED field.
	AccessMode *VolumeCapability_AccessMode `protobuf:"bytes,3,opt,name=access_mode,json=accessMode" json:"access_mode,omitempty"`
}

func (m *VolumeCapability) Reset()                    { *m = VolumeCapability{} }
func (m *VolumeCapability) String() string            { return proto.CompactTextString(m) }
func (*VolumeCapability) ProtoMessage()               {}
func (*VolumeCapability) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type isVolumeCapability_AccessType interface {
	isVolumeCapability_AccessType()
}

type VolumeCapability_Block struct {
	Block *VolumeCapability_BlockVolume `protobuf:"bytes,1,opt,name=block,oneof"`
}
type VolumeCapability_Mount struct {
	Mount *VolumeCapability_MountVolume `protobuf:"bytes,2,opt,name=mount,oneof"`
}

func (*VolumeCapability_Block) isVolumeCapability_AccessType() {}
func (*VolumeCapability_Mount) isVolumeCapability_AccessType() {}

func (m *VolumeCapability) GetAccessType() isVolumeCapability_AccessType {
	if m != nil {
		return m.AccessType
	}
	return nil
}

func (m *VolumeCapability) GetBlock() *VolumeCapability_BlockVolume {
	if x, ok := m.GetAccessType().(*VolumeCapability_Block); ok {
		return x.Block
	}
	return nil
}

func (m *VolumeCapability) GetMount() *VolumeCapability_MountVolume {
	if x, ok := m.GetAccessType().(*VolumeCapability_Mount); ok {
		return x.Mount
	}
	return nil
}

func (m *VolumeCapability) GetAccessMode() *VolumeCapability_AccessMode {
	if m != nil {
		return m.AccessMode
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VolumeCapability) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VolumeCapability_OneofMarshaler, _VolumeCapability_OneofUnmarshaler, _VolumeCapability_OneofSizer, []interface{}{
		(*VolumeCapability_Block)(nil),
		(*VolumeCapability_Mount)(nil),
	}
}

func _VolumeCapability_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VolumeCapability)
	// access_type
	switch x := m.AccessType.(type) {
	case *VolumeCapability_Block:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case *VolumeCapability_Mount:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mount); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VolumeCapability.AccessType has unexpected type %T", x)
	}
	return nil
}

func _VolumeCapability_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VolumeCapability)
	switch tag {
	case 1: // access_type.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VolumeCapability_BlockVolume)
		err := b.DecodeMessage(msg)
		m.AccessType = &VolumeCapability_Block{msg}
		return true, err
	case 2: // access_type.mount
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VolumeCapability_MountVolume)
		err := b.DecodeMessage(msg)
		m.AccessType = &VolumeCapability_Mount{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VolumeCapability_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VolumeCapability)
	// access_type
	switch x := m.AccessType.(type) {
	case *VolumeCapability_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VolumeCapability_Mount:
		s := proto.Size(x.Mount)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Indicate that the volume will be accessed via the block device API.
type VolumeCapability_BlockVolume struct {
}

func (m *VolumeCapability_BlockVolume) Reset()         { *m = VolumeCapability_BlockVolume{} }
func (m *VolumeCapability_BlockVolume) String() string { return proto.CompactTextString(m) }
func (*VolumeCapability_BlockVolume) ProtoMessage()    {}
func (*VolumeCapability_BlockVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12, 0}
}

// Indicate that the volume will be accessed via the filesystem API.
type VolumeCapability_MountVolume struct {
	// The filesystem type. This field is OPTIONAL.
	// An empty string is equal to an unspecified field value.
	FsType string `protobuf:"bytes,1,opt,name=fs_type,json=fsType" json:"fs_type,omitempty"`
	// The mount options that can be used for the volume. This field is
	// OPTIONAL. `mount_flags` MAY contain sensitive information.
	// Therefore, the CO and the Plugin MUST NOT leak this information
	// to untrusted entities. The total size of this repeated field
	// SHALL NOT exceed 4 KiB.
	MountFlags []string `protobuf:"bytes,2,rep,name=mount_flags,json=mountFlags" json:"mount_flags,omitempty"`
}

func (m *VolumeCapability_MountVolume) Reset()         { *m = VolumeCapability_MountVolume{} }
func (m *VolumeCapability_MountVolume) String() string { return proto.CompactTextString(m) }
func (*VolumeCapability_MountVolume) ProtoMessage()    {}
func (*VolumeCapability_MountVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12, 1}
}

func (m *VolumeCapability_MountVolume) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

func (m *VolumeCapability_MountVolume) GetMountFlags() []string {
	if m != nil {
		return m.MountFlags
	}
	return nil
}

// Specify how a volume can be accessed.
type VolumeCapability_AccessMode struct {
	// This field is REQUIRED.
	Mode VolumeCapability_AccessMode_Mode `protobuf:"varint,1,opt,name=mode,enum=csi.VolumeCapability_AccessMode_Mode" json:"mode,omitempty"`
}

func (m *VolumeCapability_AccessMode) Reset()                    { *m = VolumeCapability_AccessMode{} }
func (m *VolumeCapability_AccessMode) String() string            { return proto.CompactTextString(m) }
func (*VolumeCapability_AccessMode) ProtoMessage()               {}
func (*VolumeCapability_AccessMode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12, 2} }

func (m *VolumeCapability_AccessMode) GetMode() VolumeCapability_AccessMode_Mode {
	if m != nil {
		return m.Mode
	}
	return VolumeCapability_AccessMode_UNKNOWN
}

// The capacity of the storage space in bytes. To specify an exact size,
// `required_bytes` and `limit_bytes` can be set to the same value. At
// least one of the these fields MUST be specified.
type CapacityRange struct {
	// Volume must be at least this big. This field is OPTIONAL.
	// A value of 0 is equal to an unspecified field value.
	RequiredBytes uint64 `protobuf:"varint,1,opt,name=required_bytes,json=requiredBytes" json:"required_bytes,omitempty"`
	// Volume must not be bigger than this. This field is OPTIONAL.
	// A value of 0 is equal to an unspecified field value.
	LimitBytes uint64 `protobuf:"varint,2,opt,name=limit_bytes,json=limitBytes" json:"limit_bytes,omitempty"`
}

func (m *CapacityRange) Reset()                    { *m = CapacityRange{} }
func (m *CapacityRange) String() string            { return proto.CompactTextString(m) }
func (*CapacityRange) ProtoMessage()               {}
func (*CapacityRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CapacityRange) GetRequiredBytes() uint64 {
	if m != nil {
		return m.RequiredBytes
	}
	return 0
}

func (m *CapacityRange) GetLimitBytes() uint64 {
	if m != nil {
		return m.LimitBytes
	}
	return 0
}

// The information about a provisioned volume.
type VolumeInfo struct {
	// The capacity of the volume in bytes. This field is OPTIONAL. If not
	// set (value of 0), it indicates that the capacity of the volume is
	// unknown (e.g., NFS share).
	CapacityBytes uint64 `protobuf:"varint,1,opt,name=capacity_bytes,json=capacityBytes" json:"capacity_bytes,omitempty"`
	// Contains identity information for the created volume. This field is
	// REQUIRED. The identity information will be used by the CO in
	// subsequent calls to refer to the provisioned volume.
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// Attributes reflect static properties of a volume and MUST be passed
	// to volume validation and publishing calls.
	// Attributes SHALL be opaque to a CO. Attributes SHALL NOT be mutable
	// and SHALL be safe for the CO to cache. Attributes SHOULD NOT
	// contain sensitive information. Attributes MAY NOT uniquely identify
	// a volume. A volume uniquely identified by `id` SHALL always report
	// the same attributes. This field is OPTIONAL and when present MUST
	// be passed to volume validation and publishing calls.
	Attributes map[string]string `protobuf:"bytes,3,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *VolumeInfo) Reset()                    { *m = VolumeInfo{} }
func (m *VolumeInfo) String() string            { return proto.CompactTextString(m) }
func (*VolumeInfo) ProtoMessage()               {}
func (*VolumeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *VolumeInfo) GetCapacityBytes() uint64 {
	if m != nil {
		return m.CapacityBytes
	}
	return 0
}

func (m *VolumeInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VolumeInfo) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// //////
// //////
type DeleteVolumeRequest struct {
	// The API version assumed by the CO. This field is REQUIRED.
	Version *Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	// The ID of the volume to be deprovisioned.
	// This field is REQUIRED.
	VolumeId string `protobuf:"bytes,2,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	// Credentials used by Controller plugin to authenticate/authorize
	// volume deletion request.
	// This field contains credential data, for example username and
	// password. Each key must consist of alphanumeric characters, '-',
	// '_' or '.'. Each value MUST contain a valid string. An SP MAY
	// choose to accept binary (non-string) data by using a binary-to-text
	// encoding scheme, like base64. An SP SHALL advertise the
	// requirements for credentials in documentation. COs SHALL permit
	// passing through the required credentials. This information is
	// sensitive and MUST be treated as such (not logged, etc.) by the CO.
	// This field is OPTIONAL.
	ControllerDeleteCredentials map[string]string `protobuf:"bytes,3,rep,name=controller_delete_credentials,json=controllerDeleteCredentials" json:"controller_delete_credentials,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DeleteVolumeRequest) Reset()                    { *m = DeleteVolumeRequest{} }
func (m *DeleteVolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteVolumeRequest) ProtoMessage()               {}
func (*DeleteVolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DeleteVolumeRequest) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *DeleteVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *DeleteVolumeRequest) GetControllerDeleteCredentials() map[string]string {
	if m != nil {
		return m.ControllerDeleteCredentials
	}
	return nil
}

type DeleteVolumeResponse struct {
}

func (m *DeleteVolumeResponse) Reset()                    { *m = DeleteVolumeResponse{} }
func (m *DeleteVolumeResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteVolumeResponse) ProtoMessage()               {}
func (*DeleteVolumeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

// //////
// //////
type ControllerPublishVolumeRequest struct {
	// The API version assumed by the CO. This field is REQUIRED.
	Version *Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	// The ID of the volume to be used on a node.
	// This field is REQUIRED.
	VolumeId string `protobuf:"bytes,2,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	// The ID of the node. This field is REQUIRED. The CO SHALL set this
	// field to match the node ID returned by `GetNodeID`.
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// The capability of the volume the CO expects the volume to have.
	// This is a REQUIRED field.
	VolumeCapability *VolumeCapability `protobuf:"bytes,4,opt,name=volume_capability,json=volumeCapability" json:"volume_capability,omitempty"`
	// Whether to publish the volume in readonly mode. This field is
	// REQUIRED.
	Readonly bool `protobuf:"varint,5,opt,name=readonly" json:"readonly,omitempty"`
	// Credentials used by Controller plugin to authenticate/authorize
	// controller publish request.
	// This field contains credential data, for example username and
	// password. Each key must consist of alphanumeric characters, '-',
	// '_' or '.'. Each value MUST contain a valid string. An SP MAY
	// choose to accept binary (non-string) data by using a binary-to-text
	// encoding scheme, like base64. An SP SHALL advertise the
	// requirements for credentials in documentation. COs SHALL permit
	// passing through the required credentials. This information is
	// sensitive and MUST be treated as such (not logged, etc.) by the CO.
	// This field is OPTIONAL.
	ControllerPublishCredentials map[string]string `protobuf:"bytes,6,rep,name=controller_publish_credentials,json=controllerPublishCredentials" json:"controller_publish_credentials,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Attributes of the volume to be used on a node. This field is
	// OPTIONAL and MUST match the attributes of the VolumeInfo identified
	// by `volume_id`.
	VolumeAttributes map[string]string `protobuf:"bytes,7,rep,name=volume_attributes,json=volumeAttributes" json:"volume_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ControllerPublishVolumeRequest) Reset()                    { *m = ControllerPublishVolumeRequest{} }
func (m *ControllerPublishVolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*ControllerPublishVolumeRequest) ProtoMessage()               {}
func (*ControllerPublishVolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ControllerPublishVolumeRequest) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *ControllerPublishVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *ControllerPublishVolumeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ControllerPublishVolumeRequest) GetVolumeCapability() *VolumeCapability {
	if m != nil {
		return m.VolumeCapability
	}
	return nil
}

func (m *ControllerPublishVolumeRequest) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

func (m *ControllerPublishVolumeRequest) GetControllerPublishCredentials() map[string]string {
	if m != nil {
		return m.ControllerPublishCredentials
	}
	return nil
}

func (m *ControllerPublishVolumeRequest) GetVolumeAttributes() map[string]string {
	if m != nil {
		return m.VolumeAttributes
	}
	return nil
}

type ControllerPublishVolumeResponse struct {
	// The SP specific information that will be passed to the Plugin in
	// the subsequent `NodePublishVolume` call for the given volume.
	// This information is opaque to the CO. This field is OPTIONAL.
	PublishVolumeInfo map[string]string `protobuf:"bytes,1,rep,name=publish_volume_info,json=publishVolumeInfo" json:"publish_volume_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ControllerPublishVolumeResponse) Reset()         { *m = ControllerPublishVolumeResponse{} }
func (m *ControllerPublishVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*ControllerPublishVolumeResponse) ProtoMessage()    {}
func (*ControllerPublishVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18}
}

func (m *ControllerPublishVolumeResponse) GetPublishVolumeInfo() map[string]string {
	if m != nil {
		return m.PublishVolumeInfo
	}
	return nil
}

// //////
// //////
type ControllerUnpublishVolumeRequest struct {
	// The API version assumed by the CO. This field is REQUIRED.
	Version *Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	// The ID of the volume. This field is REQUIRED.
	VolumeId string `protobuf:"bytes,2,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	// The ID of the node. This field is OPTIONAL. The CO SHOULD set this
	// field to match the node ID returned by `GetNodeID` or leave it
	// unset. If the value is set, the SP MUST unpublish the volume from
	// the specified node. If the value is unset, the SP MUST unpublish
	// the volume from all nodes it is published to.
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// Credentials used by Controller plugin to authenticate/authorize
	// controller unpublish request.
	// This field contains credential data, for example username and
	// password. Each key must consist of alphanumeric characters, '-',
	// '_' or '.'. Each value MUST contain a valid string. An SP MAY
	// choose to accept binary (non-string) data by using a binary-to-text
	// encoding scheme, like base64. An SP SHALL advertise the
	// requirements for credentials in documentation. COs SHALL permit
	// passing through the required credentials. This information is
	// sensitive and MUST be treated as such (not logged, etc.) by the CO.
	// This field is OPTIONAL.
	ControllerUnpublishCredentials map[string]string `protobuf:"bytes,4,rep,name=controller_unpublish_credentials,json=controllerUnpublishCredentials" json:"controller_unpublish_credentials,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ControllerUnpublishVolumeRequest) Reset()         { *m = ControllerUnpublishVolumeRequest{} }
func (m *ControllerUnpublishVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*ControllerUnpublishVolumeRequest) ProtoMessage()    {}
func (*ControllerUnpublishVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19}
}

func (m *ControllerUnpublishVolumeRequest) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *ControllerUnpublishVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *ControllerUnpublishVolumeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ControllerUnpublishVolumeRequest) GetControllerUnpublishCredentials() map[string]string {
	if m != nil {
		return m.ControllerUnpublishCredentials
	}
	return nil
}

type ControllerUnpublishVolumeResponse struct {
}

func (m *ControllerUnpublishVolumeResponse) Reset()         { *m = ControllerUnpublishVolumeResponse{} }
func (m *ControllerUnpublishVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*ControllerUnpublishVolumeResponse) ProtoMessage()    {}
func (*ControllerUnpublishVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{20}
}

// //////
// //////
type ValidateVolumeCapabilitiesRequest struct {
	// The API version assumed by the CO. This is a REQUIRED field.
	Version *Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	// The ID of the volume to check. This field is REQUIRED.
	VolumeId string `protobuf:"bytes,2,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	// The capabilities that the CO wants to check for the volume. This
	// call SHALL return "supported" only if all the volume capabilities
	// specified below are supported. This field is REQUIRED.
	VolumeCapabilities []*VolumeCapability `protobuf:"bytes,3,rep,name=volume_capabilities,json=volumeCapabilities" json:"volume_capabilities,omitempty"`
	// Attributes of the volume to check. This field is OPTIONAL and MUST
	// match the attributes of the VolumeInfo identified by `volume_id`.
	VolumeAttributes map[string]string `protobuf:"bytes,4,rep,name=volume_attributes,json=volumeAttributes" json:"volume_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ValidateVolumeCapabilitiesRequest) Reset()         { *m = ValidateVolumeCapabilitiesRequest{} }
func (m *ValidateVolumeCapabilitiesRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateVolumeCapabilitiesRequest) ProtoMessage()    {}
func (*ValidateVolumeCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21}
}

func (m *ValidateVolumeCapabilitiesRequest) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *ValidateVolumeCapabilitiesRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *ValidateVolumeCapabilitiesRequest) GetVolumeCapabilities() []*VolumeCapability {
	if m != nil {
		return m.VolumeCapabilities
	}
	return nil
}

func (m *ValidateVolumeCapabilitiesRequest) GetVolumeAttributes() map[string]string {
	if m != nil {
		return m.VolumeAttributes
	}
	return nil
}

type ValidateVolumeCapabilitiesResponse struct {
	// True if the Plugin supports the specified capabilities for the
	// given volume. This field is REQUIRED.
	Supported bool `protobuf:"varint,1,opt,name=supported" json:"supported,omitempty"`
	// Message to the CO if `supported` above is false. This field is
	// OPTIONAL.
	// An empty string is equal to an unspecified field value.
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ValidateVolumeCapabilitiesResponse) Reset()         { *m = ValidateVolumeCapabilitiesResponse{} }
func (m *ValidateVolumeCapabilitiesResponse) String() string { return proto.CompactTextString(m) }
func (*ValidateVolumeCapabilitiesResponse) ProtoMessage()    {}
func (*ValidateVolumeCapabilitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22}
}

func (m *ValidateVolumeCapabilitiesResponse) GetSupported() bool {
	if m != nil {
		return m.Supported
	}
	return false
}

func (m *ValidateVolumeCapabilitiesResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// //////
// //////
type ListVolumesRequest struct {
	// The API version assumed by the CO. This field is REQUIRED.
	Version *Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	// If specified (non-zero value), the Plugin MUST NOT return more
	// entries than this number in the response. If the actual number of
	// entries is more than this number, the Plugin MUST set `next_token`
	// in the response which can be used to get the next page of entries
	// in the subsequent `ListVolumes` call. This field is OPTIONAL. If
	// not specified (zero value), it means there is no restriction on the
	// number of entries that can be returned.
	MaxEntries uint32 `protobuf:"varint,2,opt,name=max_entries,json=maxEntries" json:"max_entries,omitempty"`
	// A token to specify where to start paginating. Set this field to
	// `next_token` returned by a previous `ListVolumes` call to get the
	// next page of entries. This field is OPTIONAL.
	// An empty string is equal to an unspecified field value.
	StartingToken string `protobuf:"bytes,3,opt,name=starting_token,json=startingToken" json:"starting_token,omitempty"`
}

func (m *ListVolumesRequest) Reset()                    { *m = ListVolumesRequest{} }
func (m *ListVolumesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListVolumesRequest) ProtoMessage()               {}
func (*ListVolumesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ListVolumesRequest) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *ListVolumesRequest) GetMaxEntries() uint32 {
	if m != nil {
		return m.MaxEntries
	}
	return 0
}

func (m *ListVolumesRequest) GetStartingToken() string {
	if m != nil {
		return m.StartingToken
	}
	return ""
}

type ListVolumesResponse struct {
	Entries []*ListVolumesResponse_Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	// This token allows you to get the next page of entries for
	// `ListVolumes` request. If the number of entries is larger than
	// `max_entries`, use the `next_token` as a value for the
	// `starting_token` field in the next `ListVolumes` request. This
	// field is OPTIONAL.
	// An empty string is equal to an unspecified field value.
	NextToken string `protobuf:"bytes,2,opt,name=next_token,json=nextToken" json:"next_token,omitempty"`
}

func (m *ListVolumesResponse) Reset()                    { *m = ListVolumesResponse{} }
func (m *ListVolumesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListVolumesResponse) ProtoMessage()               {}
func (*ListVolumesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ListVolumesResponse) GetEntries() []*ListVolumesResponse_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *ListVolumesResponse) GetNextToken() string {
	if m != nil {
		return m.NextToken
	}
	return ""
}

type ListVolumesResponse_Entry struct {
	VolumeInfo *VolumeInfo `protobuf:"bytes,1,opt,name=volume_info,json=volumeInfo" json:"volume_info,omitempty"`
}

func (m *ListVolumesResponse_Entry) Reset()                    { *m = ListVolumesResponse_Entry{} }
func (m *ListVolumesResponse_Entry) String() string            { return proto.CompactTextString(m) }
func (*ListVolumesResponse_Entry) ProtoMessage()               {}
func (*ListVolumesResponse_Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24, 0} }

func (m *ListVolumesResponse_Entry) GetVolumeInfo() *VolumeInfo {
	if m != nil {
		return m.VolumeInfo
	}
	return nil
}

// //////
// //////
type GetCapacityRequest struct {
	// The API version assumed by the CO. This is a REQUIRED field.
	Version *Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	// If specified, the Plugin SHALL report the capacity of the storage
	// that can be used to provision volumes that satisfy ALL of the
	// specified `volume_capabilities`. These are the same
	// `volume_capabilities` the CO will use in `CreateVolumeRequest`.
	// This field is OPTIONAL.
	VolumeCapabilities []*VolumeCapability `protobuf:"bytes,2,rep,name=volume_capabilities,json=volumeCapabilities" json:"volume_capabilities,omitempty"`
	// If specified, the Plugin SHALL report the capacity of the storage
	// that can be used to provision volumes with the given Plugin
	// specific `parameters`. These are the same `parameters` the CO will
	// use in `CreateVolumeRequest`. This field is OPTIONAL.
	Parameters map[string]string `protobuf:"bytes,3,rep,name=parameters" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetCapacityRequest) Reset()                    { *m = GetCapacityRequest{} }
func (m *GetCapacityRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCapacityRequest) ProtoMessage()               {}
func (*GetCapacityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetCapacityRequest) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *GetCapacityRequest) GetVolumeCapabilities() []*VolumeCapability {
	if m != nil {
		return m.VolumeCapabilities
	}
	return nil
}

func (m *GetCapacityRequest) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type GetCapacityResponse struct {
	// The available capacity of the storage that can be used to
	// provision volumes. If `volume_capabilities` or `parameters` is
	// specified in the request, the Plugin SHALL take those into
	// consideration when calculating the available capacity of the
	// storage. This field is REQUIRED.
	AvailableCapacity uint64 `protobuf:"varint,1,opt,name=available_capacity,json=availableCapacity" json:"available_capacity,omitempty"`
}

func (m *GetCapacityResponse) Reset()                    { *m = GetCapacityResponse{} }
func (m *GetCapacityResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCapacityResponse) ProtoMessage()               {}
func (*GetCapacityResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GetCapacityResponse) GetAvailableCapacity() uint64 {
	if m != nil {
		return m.AvailableCapacity
	}
	return 0
}

// //////
// //////
type NodePublishVolumeRequest struct {
	// The API version assumed by the CO. This is a REQUIRED field.
	Version *Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	// The ID of the volume to publish. This field is REQUIRED.
	VolumeId string `protobuf:"bytes,2,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	// The CO SHALL set this field to the value returned by
	// `ControllerPublishVolume` if the corresponding Plugin has
	// `CONTROLLER_PUBLISH_UNPUBLISH_VOLUME` plugin capability, and SHALL
	// be left unset if the corresponding Plugin does not have this
	// capability. This is an OPTIONAL field.
	PublishVolumeInfo map[string]string `protobuf:"bytes,3,rep,name=publish_volume_info,json=publishVolumeInfo" json:"publish_volume_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The path to which the volume will be published. It MUST be an
	// absolute path in the root filesystem of the process serving this
	// request. The CO SHALL ensure uniqueness of target_path per volume.
	// The CO SHALL ensure that the path exists, and that the process
	// serving the request has `read` and `write` permissions to the path.
	// This is a REQUIRED field.
	TargetPath string `protobuf:"bytes,4,opt,name=target_path,json=targetPath" json:"target_path,omitempty"`
	// The capability of the volume the CO expects the volume to have.
	// This is a REQUIRED field.
	VolumeCapability *VolumeCapability `protobuf:"bytes,5,opt,name=volume_capability,json=volumeCapability" json:"volume_capability,omitempty"`
	// Whether to publish the volume in readonly mode. This field is
	// REQUIRED.
	Readonly bool `protobuf:"varint,6,opt,name=readonly" json:"readonly,omitempty"`
	// Credentials used by Node plugin to authenticate/authorize node
	// publish request.
	// This field contains credential data, for example username and
	// password. Each key must consist of alphanumeric characters, '-',
	// '_' or '.'. Each value MUST contain a valid string. An SP MAY
	// choose to accept binary (non-string) data by using a binary-to-text
	// encoding scheme, like base64. An SP SHALL advertise the
	// requirements for credentials in documentation. COs SHALL permit
	// passing through the required credentials. This information is
	// sensitive and MUST be treated as such (not logged, etc.) by the CO.
	// This field is OPTIONAL.
	NodePublishCredentials map[string]string `protobuf:"bytes,7,rep,name=node_publish_credentials,json=nodePublishCredentials" json:"node_publish_credentials,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Attributes of the volume to publish. This field is OPTIONAL and
	// MUST match the attributes of the VolumeInfo identified by
	// `volume_id`.
	VolumeAttributes map[string]string `protobuf:"bytes,8,rep,name=volume_attributes,json=volumeAttributes" json:"volume_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NodePublishVolumeRequest) Reset()                    { *m = NodePublishVolumeRequest{} }
func (m *NodePublishVolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*NodePublishVolumeRequest) ProtoMessage()               {}
func (*NodePublishVolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *NodePublishVolumeRequest) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *NodePublishVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *NodePublishVolumeRequest) GetPublishVolumeInfo() map[string]string {
	if m != nil {
		return m.PublishVolumeInfo
	}
	return nil
}

func (m *NodePublishVolumeRequest) GetTargetPath() string {
	if m != nil {
		return m.TargetPath
	}
	return ""
}

func (m *NodePublishVolumeRequest) GetVolumeCapability() *VolumeCapability {
	if m != nil {
		return m.VolumeCapability
	}
	return nil
}

func (m *NodePublishVolumeRequest) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

func (m *NodePublishVolumeRequest) GetNodePublishCredentials() map[string]string {
	if m != nil {
		return m.NodePublishCredentials
	}
	return nil
}

func (m *NodePublishVolumeRequest) GetVolumeAttributes() map[string]string {
	if m != nil {
		return m.VolumeAttributes
	}
	return nil
}

type NodePublishVolumeResponse struct {
}

func (m *NodePublishVolumeResponse) Reset()                    { *m = NodePublishVolumeResponse{} }
func (m *NodePublishVolumeResponse) String() string            { return proto.CompactTextString(m) }
func (*NodePublishVolumeResponse) ProtoMessage()               {}
func (*NodePublishVolumeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

// //////
// //////
type NodeUnpublishVolumeRequest struct {
	// The API version assumed by the CO. This is a REQUIRED field.
	Version *Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	// The ID of the volume. This field is REQUIRED.
	VolumeId string `protobuf:"bytes,2,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	// The path at which the volume was published. It MUST be an absolute
	// path in the root filesystem of the process serving this request.
	// This is a REQUIRED field.
	TargetPath string `protobuf:"bytes,3,opt,name=target_path,json=targetPath" json:"target_path,omitempty"`
	// Credentials used by Node plugin to authenticate/authorize node
	// unpublish request.
	// This field contains credential data, for example username and
	// password. Each key must consist of alphanumeric characters, '-',
	// '_' or '.'. Each value MUST contain a valid string. An SP MAY
	// choose to accept binary (non-string) data by using a binary-to-text
	// encoding scheme, like base64. An SP SHALL advertise the
	// requirements for credentials in documentation. COs SHALL permit
	// passing through the required credentials. This information is
	// sensitive and MUST be treated as such (not logged, etc.) by the CO.
	// This field is OPTIONAL.
	NodeUnpublishCredentials map[string]string `protobuf:"bytes,4,rep,name=node_unpublish_credentials,json=nodeUnpublishCredentials" json:"node_unpublish_credentials,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NodeUnpublishVolumeRequest) Reset()                    { *m = NodeUnpublishVolumeRequest{} }
func (m *NodeUnpublishVolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeUnpublishVolumeRequest) ProtoMessage()               {}
func (*NodeUnpublishVolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *NodeUnpublishVolumeRequest) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *NodeUnpublishVolumeRequest) GetVolumeId() string {
	if m != nil {
		return m.VolumeId
	}
	return ""
}

func (m *NodeUnpublishVolumeRequest) GetTargetPath() string {
	if m != nil {
		return m.TargetPath
	}
	return ""
}

func (m *NodeUnpublishVolumeRequest) GetNodeUnpublishCredentials() map[string]string {
	if m != nil {
		return m.NodeUnpublishCredentials
	}
	return nil
}

type NodeUnpublishVolumeResponse struct {
}

func (m *NodeUnpublishVolumeResponse) Reset()                    { *m = NodeUnpublishVolumeResponse{} }
func (m *NodeUnpublishVolumeResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeUnpublishVolumeResponse) ProtoMessage()               {}
func (*NodeUnpublishVolumeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

// //////
// //////
type GetNodeIDRequest struct {
	// The API version assumed by the CO. This is a REQUIRED field.
	Version *Version `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *GetNodeIDRequest) Reset()                    { *m = GetNodeIDRequest{} }
func (m *GetNodeIDRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNodeIDRequest) ProtoMessage()               {}
func (*GetNodeIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GetNodeIDRequest) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

type GetNodeIDResponse struct {
	// The ID of the node as understood by the SP which SHALL be used by
	// CO in subsequent `ControllerPublishVolume`.
	// This is a REQUIRED field.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
}

func (m *GetNodeIDResponse) Reset()                    { *m = GetNodeIDResponse{} }
func (m *GetNodeIDResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNodeIDResponse) ProtoMessage()               {}
func (*GetNodeIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *GetNodeIDResponse) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func init() {
	proto.RegisterType((*GetSupportedVersionsRequest)(nil), "csi.GetSupportedVersionsRequest")
	proto.RegisterType((*GetSupportedVersionsResponse)(nil), "csi.GetSupportedVersionsResponse")
	proto.RegisterType((*Version)(nil), "csi.Version")
	proto.RegisterType((*GetPluginInfoRequest)(nil), "csi.GetPluginInfoRequest")
	proto.RegisterType((*GetPluginInfoResponse)(nil), "csi.GetPluginInfoResponse")
	proto.RegisterType((*GetPluginCapabilitiesRequest)(nil), "csi.GetPluginCapabilitiesRequest")
	proto.RegisterType((*GetPluginCapabilitiesResponse)(nil), "csi.GetPluginCapabilitiesResponse")
	proto.RegisterType((*PluginCapability)(nil), "csi.PluginCapability")
	proto.RegisterType((*PluginCapability_RPC)(nil), "csi.PluginCapability.RPC")
	proto.RegisterType((*PluginCapability_Service)(nil), "csi.PluginCapability.Service")
	proto.RegisterType((*ProbeRequest)(nil), "csi.ProbeRequest")
	proto.RegisterType((*ProbeResponse)(nil), "csi.ProbeResponse")
	proto.RegisterType((*CreateVolumeRequest)(nil), "csi.CreateVolumeRequest")
	proto.RegisterType((*CreateVolumeResponse)(nil), "csi.CreateVolumeResponse")
	proto.RegisterType((*VolumeCapability)(nil), "csi.VolumeCapability")
	proto.RegisterType((*VolumeCapability_BlockVolume)(nil), "csi.VolumeCapability.BlockVolume")
	proto.RegisterType((*VolumeCapability_MountVolume)(nil), "csi.VolumeCapability.MountVolume")
	proto.RegisterType((*VolumeCapability_AccessMode)(nil), "csi.VolumeCapability.AccessMode")
	proto.RegisterType((*CapacityRange)(nil), "csi.CapacityRange")
	proto.RegisterType((*VolumeInfo)(nil), "csi.VolumeInfo")
	proto.RegisterType((*DeleteVolumeRequest)(nil), "csi.DeleteVolumeRequest")
	proto.RegisterType((*DeleteVolumeResponse)(nil), "csi.DeleteVolumeResponse")
	proto.RegisterType((*ControllerPublishVolumeRequest)(nil), "csi.ControllerPublishVolumeRequest")
	proto.RegisterType((*ControllerPublishVolumeResponse)(nil), "csi.ControllerPublishVolumeResponse")
	proto.RegisterType((*ControllerUnpublishVolumeRequest)(nil), "csi.ControllerUnpublishVolumeRequest")
	proto.RegisterType((*ControllerUnpublishVolumeResponse)(nil), "csi.ControllerUnpublishVolumeResponse")
	proto.RegisterType((*ValidateVolumeCapabilitiesRequest)(nil), "csi.ValidateVolumeCapabilitiesRequest")
	proto.RegisterType((*ValidateVolumeCapabilitiesResponse)(nil), "csi.ValidateVolumeCapabilitiesResponse")
	proto.RegisterType((*ListVolumesRequest)(nil), "csi.ListVolumesRequest")
	proto.RegisterType((*ListVolumesResponse)(nil), "csi.ListVolumesResponse")
	proto.RegisterType((*ListVolumesResponse_Entry)(nil), "csi.ListVolumesResponse.Entry")
	proto.RegisterType((*GetCapacityRequest)(nil), "csi.GetCapacityRequest")
	proto.RegisterType((*GetCapacityResponse)(nil), "csi.GetCapacityResponse")
	proto.RegisterType((*NodePublishVolumeRequest)(nil), "csi.NodePublishVolumeRequest")
	proto.RegisterType((*NodePublishVolumeResponse)(nil), "csi.NodePublishVolumeResponse")
	proto.RegisterType((*NodeUnpublishVolumeRequest)(nil), "csi.NodeUnpublishVolumeRequest")
	proto.RegisterType((*NodeUnpublishVolumeResponse)(nil), "csi.NodeUnpublishVolumeResponse")
	proto.RegisterType((*GetNodeIDRequest)(nil), "csi.GetNodeIDRequest")
	proto.RegisterType((*GetNodeIDResponse)(nil), "csi.GetNodeIDResponse")
	proto.RegisterEnum("csi.PluginCapability_RPC_Type", PluginCapability_RPC_Type_name, PluginCapability_RPC_Type_value)
	proto.RegisterEnum("csi.PluginCapability_Service_Type", PluginCapability_Service_Type_name, PluginCapability_Service_Type_value)
	proto.RegisterEnum("csi.VolumeCapability_AccessMode_Mode", VolumeCapability_AccessMode_Mode_name, VolumeCapability_AccessMode_Mode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Identity service

type IdentityClient interface {
	GetSupportedVersions(ctx context.Context, in *GetSupportedVersionsRequest, opts ...grpc.CallOption) (*GetSupportedVersionsResponse, error)
	GetPluginInfo(ctx context.Context, in *GetPluginInfoRequest, opts ...grpc.CallOption) (*GetPluginInfoResponse, error)
	GetPluginCapabilities(ctx context.Context, in *GetPluginCapabilitiesRequest, opts ...grpc.CallOption) (*GetPluginCapabilitiesResponse, error)
	Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error)
}

type identityClient struct {
	cc *grpc.ClientConn
}

func NewIdentityClient(cc *grpc.ClientConn) IdentityClient {
	return &identityClient{cc}
}

func (c *identityClient) GetSupportedVersions(ctx context.Context, in *GetSupportedVersionsRequest, opts ...grpc.CallOption) (*GetSupportedVersionsResponse, error) {
	out := new(GetSupportedVersionsResponse)
	err := grpc.Invoke(ctx, "/csi.Identity/GetSupportedVersions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityClient) GetPluginInfo(ctx context.Context, in *GetPluginInfoRequest, opts ...grpc.CallOption) (*GetPluginInfoResponse, error) {
	out := new(GetPluginInfoResponse)
	err := grpc.Invoke(ctx, "/csi.Identity/GetPluginInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityClient) GetPluginCapabilities(ctx context.Context, in *GetPluginCapabilitiesRequest, opts ...grpc.CallOption) (*GetPluginCapabilitiesResponse, error) {
	out := new(GetPluginCapabilitiesResponse)
	err := grpc.Invoke(ctx, "/csi.Identity/GetPluginCapabilities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityClient) Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error) {
	out := new(ProbeResponse)
	err := grpc.Invoke(ctx, "/csi.Identity/Probe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Identity service

type IdentityServer interface {
	GetSupportedVersions(context.Context, *GetSupportedVersionsRequest) (*GetSupportedVersionsResponse, error)
	GetPluginInfo(context.Context, *GetPluginInfoRequest) (*GetPluginInfoResponse, error)
	GetPluginCapabilities(context.Context, *GetPluginCapabilitiesRequest) (*GetPluginCapabilitiesResponse, error)
	Probe(context.Context, *ProbeRequest) (*ProbeResponse, error)
}

func RegisterIdentityServer(s *grpc.Server, srv IdentityServer) {
	s.RegisterService(&_Identity_serviceDesc, srv)
}

func _Identity_GetSupportedVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupportedVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).GetSupportedVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csi.Identity/GetSupportedVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).GetSupportedVersions(ctx, req.(*GetSupportedVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identity_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csi.Identity/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).GetPluginInfo(ctx, req.(*GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identity_GetPluginCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).GetPluginCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csi.Identity/GetPluginCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).GetPluginCapabilities(ctx, req.(*GetPluginCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identity_Probe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).Probe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csi.Identity/Probe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).Probe(ctx, req.(*ProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Identity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "csi.Identity",
	HandlerType: (*IdentityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSupportedVersions",
			Handler:    _Identity_GetSupportedVersions_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _Identity_GetPluginInfo_Handler,
		},
		{
			MethodName: "GetPluginCapabilities",
			Handler:    _Identity_GetPluginCapabilities_Handler,
		},
		{
			MethodName: "Probe",
			Handler:    _Identity_Probe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "csi.proto",
}

// Client API for Controller service

type ControllerClient interface {
	CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*CreateVolumeResponse, error)
	DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error)
	ControllerPublishVolume(ctx context.Context, in *ControllerPublishVolumeRequest, opts ...grpc.CallOption) (*ControllerPublishVolumeResponse, error)
	ControllerUnpublishVolume(ctx context.Context, in *ControllerUnpublishVolumeRequest, opts ...grpc.CallOption) (*ControllerUnpublishVolumeResponse, error)
	ValidateVolumeCapabilities(ctx context.Context, in *ValidateVolumeCapabilitiesRequest, opts ...grpc.CallOption) (*ValidateVolumeCapabilitiesResponse, error)
	ListVolumes(ctx context.Context, in *ListVolumesRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error)
	GetCapacity(ctx context.Context, in *GetCapacityRequest, opts ...grpc.CallOption) (*GetCapacityResponse, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*CreateVolumeResponse, error) {
	out := new(CreateVolumeResponse)
	err := grpc.Invoke(ctx, "/csi.Controller/CreateVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*DeleteVolumeResponse, error) {
	out := new(DeleteVolumeResponse)
	err := grpc.Invoke(ctx, "/csi.Controller/DeleteVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ControllerPublishVolume(ctx context.Context, in *ControllerPublishVolumeRequest, opts ...grpc.CallOption) (*ControllerPublishVolumeResponse, error) {
	out := new(ControllerPublishVolumeResponse)
	err := grpc.Invoke(ctx, "/csi.Controller/ControllerPublishVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ControllerUnpublishVolume(ctx context.Context, in *ControllerUnpublishVolumeRequest, opts ...grpc.CallOption) (*ControllerUnpublishVolumeResponse, error) {
	out := new(ControllerUnpublishVolumeResponse)
	err := grpc.Invoke(ctx, "/csi.Controller/ControllerUnpublishVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ValidateVolumeCapabilities(ctx context.Context, in *ValidateVolumeCapabilitiesRequest, opts ...grpc.CallOption) (*ValidateVolumeCapabilitiesResponse, error) {
	out := new(ValidateVolumeCapabilitiesResponse)
	err := grpc.Invoke(ctx, "/csi.Controller/ValidateVolumeCapabilities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListVolumes(ctx context.Context, in *ListVolumesRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error) {
	out := new(ListVolumesResponse)
	err := grpc.Invoke(ctx, "/csi.Controller/ListVolumes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetCapacity(ctx context.Context, in *GetCapacityRequest, opts ...grpc.CallOption) (*GetCapacityResponse, error) {
	out := new(GetCapacityResponse)
	err := grpc.Invoke(ctx, "/csi.Controller/GetCapacity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Controller service

type ControllerServer interface {
	CreateVolume(context.Context, *CreateVolumeRequest) (*CreateVolumeResponse, error)
	DeleteVolume(context.Context, *DeleteVolumeRequest) (*DeleteVolumeResponse, error)
	ControllerPublishVolume(context.Context, *ControllerPublishVolumeRequest) (*ControllerPublishVolumeResponse, error)
	ControllerUnpublishVolume(context.Context, *ControllerUnpublishVolumeRequest) (*ControllerUnpublishVolumeResponse, error)
	ValidateVolumeCapabilities(context.Context, *ValidateVolumeCapabilitiesRequest) (*ValidateVolumeCapabilitiesResponse, error)
	ListVolumes(context.Context, *ListVolumesRequest) (*ListVolumesResponse, error)
	GetCapacity(context.Context, *GetCapacityRequest) (*GetCapacityResponse, error)
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csi.Controller/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).CreateVolume(ctx, req.(*CreateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csi.Controller/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteVolume(ctx, req.(*DeleteVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ControllerPublishVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControllerPublishVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ControllerPublishVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csi.Controller/ControllerPublishVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ControllerPublishVolume(ctx, req.(*ControllerPublishVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ControllerUnpublishVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControllerUnpublishVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ControllerUnpublishVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csi.Controller/ControllerUnpublishVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ControllerUnpublishVolume(ctx, req.(*ControllerUnpublishVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ValidateVolumeCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateVolumeCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ValidateVolumeCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csi.Controller/ValidateVolumeCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ValidateVolumeCapabilities(ctx, req.(*ValidateVolumeCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csi.Controller/ListVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListVolumes(ctx, req.(*ListVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csi.Controller/GetCapacity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetCapacity(ctx, req.(*GetCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "csi.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _Controller_CreateVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _Controller_DeleteVolume_Handler,
		},
		{
			MethodName: "ControllerPublishVolume",
			Handler:    _Controller_ControllerPublishVolume_Handler,
		},
		{
			MethodName: "ControllerUnpublishVolume",
			Handler:    _Controller_ControllerUnpublishVolume_Handler,
		},
		{
			MethodName: "ValidateVolumeCapabilities",
			Handler:    _Controller_ValidateVolumeCapabilities_Handler,
		},
		{
			MethodName: "ListVolumes",
			Handler:    _Controller_ListVolumes_Handler,
		},
		{
			MethodName: "GetCapacity",
			Handler:    _Controller_GetCapacity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "csi.proto",
}

// Client API for Node service

type NodeClient interface {
	NodePublishVolume(ctx context.Context, in *NodePublishVolumeRequest, opts ...grpc.CallOption) (*NodePublishVolumeResponse, error)
	NodeUnpublishVolume(ctx context.Context, in *NodeUnpublishVolumeRequest, opts ...grpc.CallOption) (*NodeUnpublishVolumeResponse, error)
	GetNodeID(ctx context.Context, in *GetNodeIDRequest, opts ...grpc.CallOption) (*GetNodeIDResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) NodePublishVolume(ctx context.Context, in *NodePublishVolumeRequest, opts ...grpc.CallOption) (*NodePublishVolumeResponse, error) {
	out := new(NodePublishVolumeResponse)
	err := grpc.Invoke(ctx, "/csi.Node/NodePublishVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) NodeUnpublishVolume(ctx context.Context, in *NodeUnpublishVolumeRequest, opts ...grpc.CallOption) (*NodeUnpublishVolumeResponse, error) {
	out := new(NodeUnpublishVolumeResponse)
	err := grpc.Invoke(ctx, "/csi.Node/NodeUnpublishVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetNodeID(ctx context.Context, in *GetNodeIDRequest, opts ...grpc.CallOption) (*GetNodeIDResponse, error) {
	out := new(GetNodeIDResponse)
	err := grpc.Invoke(ctx, "/csi.Node/GetNodeID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	NodePublishVolume(context.Context, *NodePublishVolumeRequest) (*NodePublishVolumeResponse, error)
	NodeUnpublishVolume(context.Context, *NodeUnpublishVolumeRequest) (*NodeUnpublishVolumeResponse, error)
	GetNodeID(context.Context, *GetNodeIDRequest) (*GetNodeIDResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_NodePublishVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodePublishVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).NodePublishVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csi.Node/NodePublishVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).NodePublishVolume(ctx, req.(*NodePublishVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_NodeUnpublishVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeUnpublishVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).NodeUnpublishVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csi.Node/NodeUnpublishVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).NodeUnpublishVolume(ctx, req.(*NodeUnpublishVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetNodeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetNodeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csi.Node/GetNodeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetNodeID(ctx, req.(*GetNodeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "csi.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodePublishVolume",
			Handler:    _Node_NodePublishVolume_Handler,
		},
		{
			MethodName: "NodeUnpublishVolume",
			Handler:    _Node_NodeUnpublishVolume_Handler,
		},
		{
			MethodName: "GetNodeID",
			Handler:    _Node_GetNodeID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "csi.proto",
}

func init() { proto.RegisterFile("csi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2034 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x19, 0x4d, 0x6f, 0xe3, 0xc6,
	0xd5, 0xd4, 0x87, 0x65, 0x3d, 0x59, 0xbb, 0xf2, 0x78, 0xd7, 0x96, 0xe9, 0xf5, 0xda, 0xa6, 0xbb,
	0x1f, 0x40, 0x1b, 0x21, 0x70, 0x8a, 0x20, 0xce, 0x26, 0x2d, 0x6c, 0x99, 0x6b, 0x0b, 0x2b, 0xcb,
	0x2a, 0x2d, 0x7b, 0x91, 0xb4, 0x05, 0x43, 0x4b, 0x63, 0x2f, 0xbb, 0x14, 0xa9, 0x90, 0x94, 0xb0,
	0x42, 0xd1, 0x5b, 0x6f, 0xed, 0xad, 0x40, 0x2f, 0x05, 0xda, 0x73, 0x80, 0xfe, 0x8b, 0x1e, 0x7a,
	0xe9, 0xb1, 0x45, 0xaf, 0xbd, 0x6e, 0xaf, 0x05, 0x7a, 0x0e, 0x38, 0x33, 0xa4, 0x86, 0x14, 0x29,
	0x9b, 0x49, 0x36, 0x27, 0x69, 0xde, 0xf7, 0x7b, 0xf3, 0xde, 0x9b, 0x37, 0x43, 0x28, 0x76, 0x1d,
	0xbd, 0x36, 0xb0, 0x2d, 0xd7, 0x42, 0xd9, 0xae, 0xa3, 0x4b, 0x1b, 0xb0, 0x7e, 0x84, 0xdd, 0xb3,
	0xe1, 0x60, 0x60, 0xd9, 0x2e, 0xee, 0x5d, 0x60, 0xdb, 0xd1, 0x2d, 0xd3, 0x51, 0xf0, 0x97, 0x43,
	0xec, 0xb8, 0xd2, 0xcf, 0xe1, 0x41, 0x3c, 0xda, 0x19, 0x58, 0xa6, 0x83, 0xd1, 0x33, 0x40, 0x8e,
	0x8f, 0x54, 0x47, 0x0c, 0x5b, 0x15, 0xb6, 0xb2, 0x4f, 0x4b, 0xbb, 0x8b, 0x35, 0x4f, 0x17, 0x63,
	0x51, 0x96, 0x9c, 0xa8, 0x10, 0xe9, 0x05, 0x14, 0xd8, 0x7f, 0x74, 0x0f, 0xf2, 0x7d, 0xed, 0x57,
	0x96, 0x5d, 0x15, 0xb6, 0x84, 0xa7, 0x65, 0x85, 0x2e, 0x08, 0x54, 0x37, 0x2d, 0xbb, 0x9a, 0x61,
	0x50, 0x6f, 0xe1, 0x41, 0x07, 0x9a, 0xdb, 0x7d, 0x55, 0xcd, 0x52, 0x28, 0x59, 0x48, 0x3f, 0x81,
	0x7b, 0x47, 0xd8, 0x6d, 0x1b, 0xc3, 0x6b, 0xdd, 0x6c, 0x98, 0x57, 0x16, 0xf3, 0x00, 0x3d, 0x86,
	0x02, 0xb3, 0x8b, 0xc8, 0x8e, 0x9a, 0xe5, 0x23, 0xa5, 0x7f, 0x09, 0x70, 0x3f, 0x22, 0x80, 0xf9,
	0x88, 0x20, 0x67, 0x6a, 0x7d, 0x4c, 0xd8, 0x8b, 0x0a, 0xf9, 0x8f, 0x1e, 0xc1, 0x9d, 0x11, 0x36,
	0x7b, 0x96, 0xed, 0x3b, 0x4d, 0x4c, 0x2c, 0x2a, 0x65, 0x0a, 0xf5, 0xdd, 0x3a, 0x84, 0x85, 0xbe,
	0x66, 0xea, 0x57, 0xd8, 0x71, 0xab, 0x59, 0x12, 0x94, 0xa7, 0x44, 0x7b, 0xac, 0xa2, 0xda, 0x09,
	0x23, 0x95, 0x4d, 0xd7, 0x1e, 0x2b, 0x01, 0xa7, 0xf8, 0x0c, 0xca, 0x21, 0x14, 0xaa, 0x40, 0xf6,
	0x35, 0x1e, 0x33, 0x83, 0xbc, 0xbf, 0x5e, 0x4c, 0x46, 0x9a, 0x31, 0xc4, 0xcc, 0x0c, 0xba, 0xf8,
	0x38, 0xf3, 0x91, 0x20, 0x3d, 0x27, 0x3b, 0x48, 0xb5, 0xd5, 0xb5, 0x81, 0x76, 0xa9, 0x1b, 0xba,
	0xab, 0x63, 0x27, 0x6d, 0x7c, 0x3e, 0x87, 0x8d, 0x04, 0x39, 0x2c, 0x4c, 0x7b, 0xb0, 0xd8, 0xe5,
	0xe0, 0xd5, 0x0c, 0xf1, 0xf7, 0x3e, 0x91, 0x16, 0x61, 0x1b, 0x2b, 0x21, 0x52, 0xe9, 0x8f, 0x59,
	0xa8, 0x44, 0x49, 0xd0, 0x7b, 0x90, 0xb5, 0x07, 0x5d, 0x66, 0xd4, 0x5a, 0xac, 0x98, 0x9a, 0xd2,
	0xae, 0x1f, 0xcf, 0x29, 0x1e, 0x1d, 0xda, 0x83, 0x82, 0x83, 0xed, 0x91, 0xde, 0xa5, 0x31, 0x28,
	0xed, 0x6e, 0xc4, 0xb3, 0x9c, 0x51, 0xa2, 0xe3, 0x39, 0xc5, 0xa7, 0x17, 0xff, 0x2d, 0x40, 0x56,
	0x69, 0xd7, 0xd1, 0x2e, 0xe4, 0xdc, 0xf1, 0x80, 0x6e, 0xf4, 0x9d, 0xdd, 0x87, 0x89, 0x2a, 0x6b,
	0x9d, 0xf1, 0x00, 0x2b, 0x84, 0x56, 0xfa, 0x93, 0x00, 0x39, 0x6f, 0x89, 0x4a, 0x50, 0x38, 0x6f,
	0xbd, 0x68, 0x9d, 0xbe, 0x6c, 0x55, 0xe6, 0xd0, 0x0e, 0x6c, 0xd6, 0x4f, 0x5b, 0x1d, 0xe5, 0xb4,
	0xd9, 0x94, 0x15, 0xb5, 0xae, 0xc8, 0xfb, 0x1d, 0x59, 0x3d, 0x94, 0x9b, 0x72, 0x47, 0x56, 0x2f,
	0x4e, 0x9b, 0xe7, 0x27, 0x72, 0x45, 0x40, 0x4f, 0x60, 0x87, 0x23, 0x6a, 0x9f, 0x1f, 0x34, 0x1b,
	0x67, 0xc7, 0xea, 0x79, 0xcb, 0xff, 0xc7, 0x08, 0x33, 0x68, 0x1d, 0x56, 0x39, 0xc2, 0x66, 0xe3,
	0xac, 0xc3, 0x70, 0x67, 0x95, 0x6c, 0x04, 0x79, 0x24, 0x77, 0xd4, 0xfa, 0x7e, 0x7b, 0xbf, 0xde,
	0xe8, 0x7c, 0x56, 0xc9, 0x89, 0x1f, 0x42, 0x81, 0xf9, 0x2b, 0xfd, 0x30, 0xce, 0xce, 0x15, 0x40,
	0x1c, 0xf3, 0x99, 0xac, 0x5c, 0x34, 0xea, 0x72, 0x45, 0x38, 0x98, 0xa7, 0x91, 0x90, 0x3e, 0x84,
	0xc5, 0xb6, 0x6d, 0x5d, 0xe2, 0xb4, 0xc9, 0x72, 0x17, 0xca, 0x8c, 0x8f, 0x26, 0x87, 0xf4, 0xd7,
	0x1c, 0x2c, 0xd7, 0x6d, 0xac, 0xb9, 0xf8, 0xc2, 0x32, 0x86, 0xfd, 0xb4, 0x02, 0x83, 0x1a, 0xcc,
	0x70, 0x35, 0xb8, 0x07, 0x77, 0xbc, 0x2c, 0xea, 0xea, 0xee, 0x58, 0xb5, 0x35, 0xf3, 0x1a, 0x93,
	0x86, 0x50, 0xda, 0x45, 0x44, 0x44, 0x9d, 0xa1, 0x14, 0x0f, 0xa3, 0x94, 0xbb, 0xfc, 0x12, 0x3d,
	0x87, 0xe5, 0x11, 0xb1, 0x43, 0x0d, 0xa5, 0x6c, 0x8e, 0x4b, 0x59, 0x6a, 0x27, 0x97, 0xb2, 0x68,
	0x14, 0x86, 0xe8, 0xd8, 0x41, 0xc7, 0x00, 0x03, 0xcd, 0xd6, 0xfa, 0xd8, 0xc5, 0xb6, 0x53, 0xcd,
	0x73, 0x15, 0x1e, 0xe3, 0x6c, 0xad, 0x1d, 0x90, 0xd2, 0x0a, 0xe7, 0x78, 0xd1, 0x6f, 0x60, 0xa3,
	0x6b, 0x99, 0xae, 0x6d, 0x19, 0x06, 0xb6, 0xd5, 0x2e, 0xe1, 0xf6, 0x7e, 0x7a, 0xd8, 0x74, 0x75,
	0xcd, 0x70, 0xaa, 0xf3, 0x44, 0xf8, 0x5e, 0xa2, 0xf0, 0x7a, 0xc0, 0x4d, 0xb1, 0xf5, 0x09, 0x2f,
	0xd5, 0xb6, 0xde, 0x4d, 0xa6, 0x10, 0x3f, 0x85, 0xbb, 0x11, 0xeb, 0xd2, 0x34, 0x19, 0xb1, 0x05,
	0x5b, 0x37, 0xe9, 0x4f, 0xd5, 0xb4, 0x8e, 0xe1, 0x5e, 0xd8, 0x47, 0xd6, 0x63, 0xde, 0x87, 0x12,
	0xdb, 0x37, 0xdd, 0xbc, 0xb2, 0x58, 0xca, 0xdc, 0xe5, 0xf6, 0x8b, 0xf4, 0x53, 0x18, 0x05, 0xff,
	0xa5, 0x3f, 0xe7, 0xa0, 0x12, 0xdd, 0x4a, 0xb4, 0x07, 0xf9, 0x4b, 0xc3, 0xea, 0xbe, 0x66, 0x02,
	0xb6, 0x63, 0x37, 0xbc, 0x76, 0xe0, 0x91, 0x50, 0xe8, 0xf1, 0x9c, 0x42, 0x39, 0x3c, 0xd6, 0xbe,
	0x35, 0x34, 0x5d, 0xd6, 0x64, 0x12, 0x58, 0x4f, 0x3c, 0x92, 0x09, 0x2b, 0xe1, 0x40, 0xfb, 0x50,
	0xd2, 0xba, 0x5d, 0xec, 0x38, 0x6a, 0xdf, 0xea, 0xf9, 0xc9, 0xba, 0x15, 0x2f, 0x60, 0x9f, 0x10,
	0x9e, 0x58, 0x3d, 0xac, 0x80, 0x16, 0xfc, 0x17, 0xcb, 0x50, 0xe2, 0xac, 0x12, 0x8f, 0xa0, 0xc4,
	0x69, 0x42, 0xab, 0x50, 0xb8, 0x72, 0xd4, 0xa0, 0x85, 0x15, 0x95, 0xf9, 0x2b, 0x87, 0xd4, 0xfc,
	0x26, 0x94, 0x88, 0x09, 0xea, 0x95, 0xa1, 0x5d, 0xd3, 0xce, 0x5c, 0x54, 0x80, 0x80, 0x9e, 0x7b,
	0x10, 0xf1, 0xad, 0x00, 0x30, 0x51, 0x89, 0xf6, 0x20, 0x47, 0x4c, 0xa4, 0x8d, 0xf0, 0xd1, 0x4d,
	0x26, 0xd6, 0x88, 0x9d, 0x84, 0x45, 0xfa, 0x8b, 0x00, 0x39, 0x22, 0x23, 0xda, 0x67, 0xce, 0x1a,
	0xad, 0xa3, 0xa6, 0xac, 0xb6, 0x4e, 0x0f, 0x65, 0xf5, 0xa5, 0xd2, 0xe8, 0xc8, 0x4a, 0x45, 0xf0,
	0x9a, 0x17, 0x0f, 0x57, 0xe4, 0xfd, 0x43, 0x59, 0x51, 0x4f, 0x5b, 0xcd, 0xcf, 0x2a, 0x19, 0x24,
	0xc2, 0xca, 0xc9, 0x79, 0xb3, 0xd3, 0x98, 0xc6, 0x65, 0xd1, 0x03, 0xa8, 0x72, 0x38, 0x26, 0x83,
	0x89, 0xcd, 0x79, 0x62, 0x39, 0x2c, 0xfd, 0xcb, 0x90, 0xf9, 0x83, 0x72, 0xb0, 0x0d, 0xa4, 0xc5,
	0xbd, 0x84, 0x72, 0xa8, 0x55, 0x78, 0x47, 0xbb, 0x8d, 0xbf, 0x1c, 0xea, 0x36, 0xee, 0xa9, 0x97,
	0x63, 0x17, 0x3b, 0x24, 0x0c, 0x39, 0xa5, 0xec, 0x43, 0x0f, 0x3c, 0xa0, 0x17, 0x53, 0x43, 0xef,
	0xeb, 0x2e, 0xa3, 0xc9, 0x10, 0x1a, 0x20, 0x20, 0x42, 0x20, 0xfd, 0x4d, 0x00, 0x98, 0x24, 0xa5,
	0x27, 0x36, 0xe8, 0x56, 0x21, 0xb1, 0x3e, 0x94, 0x8a, 0xbd, 0x03, 0x19, 0xbd, 0xc7, 0x0a, 0x22,
	0xa3, 0xf7, 0xd0, 0x4f, 0x01, 0x34, 0xd7, 0xb5, 0xf5, 0xcb, 0xa1, 0xc7, 0x42, 0x67, 0x88, 0xcd,
	0x48, 0xc2, 0xd7, 0xf6, 0x03, 0x0a, 0xd6, 0x58, 0x26, 0x2c, 0x5e, 0x65, 0x47, 0xd0, 0xa9, 0x2a,
	0xf1, 0xab, 0x0c, 0x2c, 0x1f, 0x62, 0x03, 0x7f, 0xd3, 0xc6, 0xbd, 0x0e, 0x45, 0xbf, 0x62, 0x7d,
	0xb7, 0x16, 0x58, 0x79, 0xf6, 0x22, 0x4d, 0xaf, 0x47, 0xd4, 0x84, 0x9a, 0x5e, 0x96, 0x6b, 0x7a,
	0x31, 0x56, 0x70, 0x4d, 0x8f, 0x62, 0x67, 0x35, 0xbd, 0x29, 0x8a, 0x70, 0xd7, 0x8a, 0x17, 0x90,
	0x2a, 0x56, 0x2b, 0x70, 0x2f, 0x6c, 0x24, 0x3b, 0xfc, 0xfe, 0x9b, 0x83, 0x87, 0x13, 0x45, 0xed,
	0xe1, 0xa5, 0xa1, 0x3b, 0xaf, 0xde, 0x41, 0x38, 0x57, 0xa1, 0x60, 0x5a, 0x3d, 0x82, 0xca, 0xd2,
	0xfa, 0xf7, 0x96, 0x8d, 0x1e, 0x3a, 0x80, 0xa5, 0xe8, 0x71, 0x37, 0xae, 0xe6, 0x88, 0x9e, 0x84,
	0xc3, 0xae, 0x32, 0x8a, 0xf6, 0x4c, 0x11, 0x16, 0x6c, 0xac, 0xf5, 0x2c, 0xd3, 0x18, 0x57, 0xf3,
	0x5b, 0xc2, 0xd3, 0x05, 0x25, 0x58, 0xa3, 0xdf, 0x09, 0xf0, 0x90, 0xdb, 0xc8, 0x01, 0xf5, 0x30,
	0xe6, 0xf8, 0x92, 0xe9, 0xf1, 0x35, 0x33, 0x16, 0xd3, 0xe8, 0xa9, 0x5d, 0x7d, 0xd0, 0x9d, 0x41,
	0x82, 0xae, 0x02, 0x6f, 0xb9, 0xca, 0x29, 0xf0, 0xc7, 0xe7, 0x6c, 0xfd, 0x74, 0x15, 0xad, 0x29,
	0x16, 0x91, 0x09, 0x58, 0x3c, 0x85, 0xed, 0x1b, 0x4d, 0x4d, 0x75, 0x8a, 0xd6, 0xe1, 0x7e, 0xac,
	0xee, 0x54, 0x49, 0xf8, 0x4f, 0x01, 0x36, 0x13, 0x1d, 0x64, 0xc7, 0xe8, 0x6b, 0x58, 0xf6, 0xf7,
	0x28, 0x7c, 0x9c, 0x7a, 0x31, 0x7a, 0x36, 0x3b, 0x46, 0xec, 0xae, 0x12, 0x82, 0x7a, 0x4d, 0x88,
	0x46, 0x69, 0x69, 0x10, 0x85, 0x8b, 0x87, 0xb0, 0x12, 0x4f, 0x9c, 0xca, 0xad, 0xb7, 0x19, 0xbe,
	0x58, 0xcf, 0xcd, 0xc1, 0xf7, 0x5f, 0x45, 0x7f, 0x10, 0x60, 0x8b, 0xcb, 0xf2, 0xa1, 0x19, 0x97,
	0xe7, 0x74, 0x84, 0x6c, 0x44, 0x62, 0x18, 0x6f, 0x6f, 0x1c, 0xc1, 0x54, 0xae, 0x73, 0x85, 0x15,
	0x47, 0x24, 0xfe, 0x0c, 0x76, 0x6e, 0x21, 0x26, 0x55, 0xac, 0x77, 0xf8, 0xc4, 0x9e, 0x32, 0x9d,
	0x35, 0xb5, 0xff, 0x64, 0x60, 0xfb, 0x42, 0x33, 0xf4, 0x5e, 0x30, 0xa5, 0x7d, 0x8b, 0xdb, 0xe5,
	0xec, 0x1d, 0x49, 0x98, 0xd6, 0xb3, 0x69, 0xa7, 0x75, 0x3d, 0xae, 0x31, 0xd0, 0x0d, 0xfb, 0x84,
	0x4a, 0xb9, 0xc9, 0x9f, 0x5b, 0xf7, 0x86, 0xef, 0xa4, 0x94, 0x7f, 0x01, 0xd2, 0x2c, 0x8b, 0x58,
	0x31, 0x3f, 0x80, 0x62, 0xf0, 0xb4, 0x42, 0xe4, 0x2e, 0x28, 0x13, 0x00, 0xaa, 0x42, 0xa1, 0x8f,
	0x1d, 0x47, 0xbb, 0xf6, 0xe5, 0xfb, 0x4b, 0xe9, 0xb7, 0x02, 0xa0, 0xa6, 0xee, 0xb0, 0xe1, 0x31,
	0xf5, 0x8e, 0x79, 0x33, 0xa5, 0xf6, 0x46, 0xc5, 0xa6, 0x6b, 0xeb, 0x6c, 0xfe, 0x29, 0x2b, 0xd0,
	0xd7, 0xde, 0xc8, 0x14, 0xe2, 0x0d, 0x3c, 0x8e, 0xab, 0xd9, 0xae, 0x6e, 0x5e, 0xab, 0xae, 0xf5,
	0x1a, 0x9b, 0xac, 0x9c, 0xca, 0x3e, 0xb4, 0xe3, 0x01, 0xa5, 0xaf, 0x04, 0x58, 0x0e, 0x99, 0xc1,
	0xdc, 0xfa, 0x08, 0x0a, 0xbe, 0x6c, 0xda, 0x97, 0xe8, 0x7d, 0x3c, 0x86, 0xb4, 0x46, 0x37, 0xc1,
	0x27, 0x47, 0x1b, 0x00, 0x26, 0x7e, 0xe3, 0x32, 0xa5, 0xd4, 0xeb, 0xa2, 0x07, 0x21, 0x0a, 0xc5,
	0x3d, 0xc8, 0xd3, 0xad, 0x48, 0x7f, 0x99, 0xf8, 0x7d, 0x06, 0xd0, 0x11, 0x76, 0x83, 0x79, 0x31,
	0x65, 0xc8, 0x12, 0xf2, 0x38, 0x93, 0x36, 0x8f, 0x8f, 0x42, 0xb7, 0x4e, 0x5a, 0x06, 0x4f, 0xfc,
	0x77, 0xa5, 0x88, 0x71, 0xb3, 0x2e, 0x9d, 0xdf, 0xf2, 0xd6, 0x27, 0x1d, 0xc2, 0x72, 0x48, 0x21,
	0xdb, 0xb9, 0xf7, 0x00, 0x69, 0x23, 0x4d, 0x37, 0xb4, 0x4b, 0x83, 0x7a, 0xea, 0x61, 0xd9, 0xb4,
	0xbb, 0x14, 0x60, 0x7c, 0x36, 0xe9, 0x7f, 0x79, 0xa8, 0xb6, 0xac, 0x1e, 0x7e, 0x77, 0x73, 0x51,
	0x2f, 0xfe, 0xb8, 0xa3, 0x81, 0xfb, 0x31, 0x11, 0x98, 0x64, 0xc0, 0xed, 0xcf, 0x39, 0xaf, 0x20,
	0x5c, 0xcd, 0xbe, 0xc6, 0xae, 0x3a, 0xd0, 0xdc, 0x57, 0x64, 0xbc, 0x2a, 0x2a, 0x40, 0x41, 0x6d,
	0xcd, 0x7d, 0x15, 0x3f, 0x85, 0xe5, 0xbf, 0xf9, 0x14, 0x36, 0x1f, 0x99, 0xc2, 0x1c, 0xa8, 0x92,
	0x83, 0x2b, 0xee, 0x58, 0xe2, 0xc7, 0x9f, 0x44, 0x5f, 0x39, 0xc4, 0xd4, 0x31, 0xb4, 0x62, 0xc6,
	0x22, 0xd1, 0x17, 0x71, 0x3d, 0x75, 0x81, 0x68, 0xfb, 0x60, 0xb6, 0xb6, 0xdb, 0xb6, 0xd2, 0xef,
	0x64, 0x7e, 0x10, 0x1b, 0xb0, 0x3e, 0xc3, 0xbd, 0xef, 0x7f, 0x4c, 0x5b, 0x87, 0xb5, 0x98, 0xc8,
	0xb0, 0xb3, 0xf5, 0x1f, 0x19, 0x10, 0x3d, 0xec, 0xbb, 0x1c, 0x73, 0x22, 0xe9, 0x9a, 0x9d, 0x4a,
	0xd7, 0x5f, 0x83, 0x48, 0xd2, 0x69, 0xd6, 0x9c, 0xf3, 0x69, 0xb0, 0xc5, 0x09, 0x13, 0x4e, 0x08,
	0x35, 0x95, 0x54, 0x24, 0x5f, 0x63, 0xa7, 0x9a, 0x17, 0xb0, 0x31, 0x93, 0x35, 0x55, 0xac, 0x37,
	0xe8, 0xde, 0x27, 0x4d, 0x32, 0x1f, 0x43, 0xe5, 0x08, 0xbb, 0x1e, 0x45, 0xe3, 0x30, 0xed, 0x43,
	0xe7, 0x8f, 0x60, 0x89, 0xe3, 0x65, 0x0d, 0x90, 0x9b, 0x20, 0x05, 0x7e, 0x82, 0xdc, 0xfd, 0x7b,
	0x06, 0x16, 0x1a, 0xc4, 0x0f, 0x77, 0x8c, 0x7e, 0x49, 0x3e, 0x58, 0x4c, 0x7d, 0x5a, 0x41, 0x5b,
	0x7e, 0x27, 0x4f, 0xfa, 0x28, 0x23, 0x6e, 0xcf, 0xa0, 0x60, 0x3e, 0xcd, 0xa1, 0x63, 0x28, 0x87,
	0xbe, 0x32, 0xa0, 0xb5, 0xb8, 0x2f, 0x0f, 0x54, 0xa0, 0x98, 0xfc, 0x51, 0x42, 0x9a, 0x43, 0x5f,
	0x70, 0x1f, 0x46, 0x42, 0xe7, 0xd0, 0x76, 0x98, 0x2d, 0x66, 0x5e, 0x12, 0xa5, 0x59, 0x24, 0x81,
	0x86, 0xf7, 0x21, 0x4f, 0x9e, 0x8b, 0xd1, 0x12, 0x7d, 0x73, 0xe7, 0x9e, 0x9c, 0x45, 0xc4, 0x83,
	0x7c, 0x8e, 0xdd, 0xb7, 0x39, 0x80, 0xc9, 0x8c, 0x8a, 0x64, 0x58, 0xe4, 0xdf, 0x0b, 0x51, 0x35,
	0xe9, 0x99, 0x54, 0x5c, 0x8b, 0xc1, 0x04, 0x76, 0xc8, 0xb0, 0xc8, 0x5f, 0xe0, 0x99, 0x98, 0x98,
	0x87, 0x07, 0x26, 0x26, 0xf6, 0xb6, 0x3f, 0x87, 0xae, 0x60, 0x35, 0xe1, 0xfa, 0x84, 0x76, 0x6e,
	0x71, 0x01, 0x15, 0x7f, 0x70, 0x9b, 0x1b, 0x98, 0x34, 0x87, 0x0c, 0x58, 0x4b, 0x9c, 0xd3, 0xd1,
	0xa3, 0x5b, 0x5d, 0x41, 0xc4, 0xc7, 0x37, 0x91, 0x05, 0xda, 0x2c, 0x10, 0x93, 0xa7, 0x51, 0xf4,
	0xf8, 0x76, 0x03, 0xb4, 0xf8, 0xe4, 0x46, 0xba, 0x40, 0xe1, 0x01, 0x94, 0xb8, 0x69, 0x0f, 0xad,
	0x4e, 0xcf, 0x7f, 0x54, 0x64, 0x35, 0x69, 0x30, 0xa4, 0x32, 0xb8, 0x11, 0x85, 0xc9, 0x98, 0x9e,
	0x92, 0x98, 0x8c, 0x98, 0x69, 0x46, 0x9a, 0xdb, 0xfd, 0xbf, 0x00, 0x39, 0xaf, 0xc2, 0x51, 0x07,
	0x96, 0xa6, 0x7a, 0x36, 0xda, 0x98, 0x79, 0xca, 0x89, 0x0f, 0x93, 0xd0, 0x81, 0x89, 0x9f, 0xc3,
	0x72, 0x4c, 0x77, 0x42, 0x9b, 0x37, 0xb4, 0x56, 0x71, 0x2b, 0x99, 0x20, 0x90, 0xfd, 0x09, 0x14,
	0x83, 0xf6, 0x84, 0xee, 0xfb, 0x3e, 0x86, 0x5a, 0x9d, 0xb8, 0x12, 0x05, 0xfb, 0xdc, 0x97, 0xf3,
	0xe4, 0x3b, 0xf1, 0x07, 0x5f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x82, 0x11, 0x37, 0x34, 0x1e,
	0x00, 0x00,
}
