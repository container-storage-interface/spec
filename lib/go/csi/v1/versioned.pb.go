// Code generated by protoc-gen-go. DO NOT EDIT.
// source: versioned.proto

package csi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetSupportedVersionsRequest struct {
}

func (m *GetSupportedVersionsRequest) Reset()                    { *m = GetSupportedVersionsRequest{} }
func (m *GetSupportedVersionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSupportedVersionsRequest) ProtoMessage()               {}
func (*GetSupportedVersionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type GetSupportedVersionsResponse struct {
	// All the CSI versions that the Plugin supports. This field is
	// REQUIRED.
	SupportedVersions []*Version `protobuf:"bytes,1,rep,name=supported_versions,json=supportedVersions" json:"supported_versions,omitempty"`
}

func (m *GetSupportedVersionsResponse) Reset()                    { *m = GetSupportedVersionsResponse{} }
func (m *GetSupportedVersionsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSupportedVersionsResponse) ProtoMessage()               {}
func (*GetSupportedVersionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetSupportedVersionsResponse) GetSupportedVersions() []*Version {
	if m != nil {
		return m.SupportedVersions
	}
	return nil
}

type Version struct {
	// The value of this field MUST NOT be negative.
	Major int32 `protobuf:"varint,1,opt,name=major" json:"major,omitempty"`
	// The value of this field MUST NOT be negative.
	Minor int32 `protobuf:"varint,2,opt,name=minor" json:"minor,omitempty"`
	// The value of this field MUST NOT be negative.
	Patch int32 `protobuf:"varint,3,opt,name=patch" json:"patch,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Version) GetMajor() int32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *Version) GetMinor() int32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *Version) GetPatch() int32 {
	if m != nil {
		return m.Patch
	}
	return 0
}

func init() {
	proto.RegisterType((*GetSupportedVersionsRequest)(nil), "csi.GetSupportedVersionsRequest")
	proto.RegisterType((*GetSupportedVersionsResponse)(nil), "csi.GetSupportedVersionsResponse")
	proto.RegisterType((*Version)(nil), "csi.Version")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Versioned service

type VersionedClient interface {
	GetSupportedVersions(ctx context.Context, in *GetSupportedVersionsRequest, opts ...grpc.CallOption) (*GetSupportedVersionsResponse, error)
}

type versionedClient struct {
	cc *grpc.ClientConn
}

func NewVersionedClient(cc *grpc.ClientConn) VersionedClient {
	return &versionedClient{cc}
}

func (c *versionedClient) GetSupportedVersions(ctx context.Context, in *GetSupportedVersionsRequest, opts ...grpc.CallOption) (*GetSupportedVersionsResponse, error) {
	out := new(GetSupportedVersionsResponse)
	err := grpc.Invoke(ctx, "/csi.Versioned/GetSupportedVersions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Versioned service

type VersionedServer interface {
	GetSupportedVersions(context.Context, *GetSupportedVersionsRequest) (*GetSupportedVersionsResponse, error)
}

func RegisterVersionedServer(s *grpc.Server, srv VersionedServer) {
	s.RegisterService(&_Versioned_serviceDesc, srv)
}

func _Versioned_GetSupportedVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupportedVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionedServer).GetSupportedVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csi.Versioned/GetSupportedVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionedServer).GetSupportedVersions(ctx, req.(*GetSupportedVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Versioned_serviceDesc = grpc.ServiceDesc{
	ServiceName: "csi.Versioned",
	HandlerType: (*VersionedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSupportedVersions",
			Handler:    _Versioned_GetSupportedVersions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "versioned.proto",
}

func init() { proto.RegisterFile("versioned.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x4b, 0x2d, 0x2a,
	0xce, 0xcc, 0xcf, 0x4b, 0x4d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2e, 0xce,
	0x54, 0x92, 0xe5, 0x92, 0x76, 0x4f, 0x2d, 0x09, 0x2e, 0x2d, 0x28, 0xc8, 0x2f, 0x2a, 0x49, 0x4d,
	0x09, 0x83, 0xa8, 0x29, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0x8a, 0xe6, 0x92, 0xc1,
	0x2e, 0x5d, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0x64, 0xcd, 0x25, 0x54, 0x0c, 0x93, 0x8c, 0x87,
	0x5a, 0x50, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x6d, 0xc4, 0xa3, 0x97, 0x5c, 0x9c, 0xa9, 0x07,
	0xd5, 0x12, 0x24, 0x58, 0x8c, 0x6e, 0x88, 0x92, 0x37, 0x17, 0x3b, 0x94, 0x2d, 0x24, 0xc2, 0xc5,
	0x9a, 0x9b, 0x98, 0x95, 0x5f, 0x24, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1a, 0x04, 0xe1, 0x80, 0x45,
	0x33, 0xf3, 0xf2, 0x8b, 0x24, 0x98, 0xa0, 0xa2, 0x20, 0x0e, 0x48, 0xb4, 0x20, 0xb1, 0x24, 0x39,
	0x43, 0x82, 0x19, 0x22, 0x0a, 0xe6, 0x18, 0x65, 0x71, 0x71, 0x86, 0xc1, 0x3c, 0x28, 0x14, 0xcb,
	0x25, 0x82, 0xcd, 0xd9, 0x42, 0x0a, 0x60, 0x27, 0xe1, 0xf1, 0xb0, 0x94, 0x22, 0x1e, 0x15, 0x10,
	0x3f, 0x2b, 0x31, 0x24, 0xb1, 0x81, 0x03, 0xd0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x6b,
	0x55, 0xc8, 0x53, 0x01, 0x00, 0x00,
}
